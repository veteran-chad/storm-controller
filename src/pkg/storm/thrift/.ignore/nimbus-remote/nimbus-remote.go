// Code generated by Thrift Compiler (0.22.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/veteran-chad/storm-controller/pkg/storm/thrift"
)

var _ = github.com/veteran-chad/storm-controller/pkg/storm/thrift.GoUnusedProtection__

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  void submitTopology(string name, string uploadedJarLocation, string jsonConf, StormTopology topology)")
	fmt.Fprintln(os.Stderr, "  void submitTopologyWithOpts(string name, string uploadedJarLocation, string jsonConf, StormTopology topology, SubmitOptions options)")
	fmt.Fprintln(os.Stderr, "  void killTopology(string name)")
	fmt.Fprintln(os.Stderr, "  void killTopologyWithOpts(string name, KillOptions options)")
	fmt.Fprintln(os.Stderr, "  void activate(string name)")
	fmt.Fprintln(os.Stderr, "  void deactivate(string name)")
	fmt.Fprintln(os.Stderr, "  void rebalance(string name, RebalanceOptions options)")
	fmt.Fprintln(os.Stderr, "  void setLogConfig(string name, LogConfig config)")
	fmt.Fprintln(os.Stderr, "  LogConfig getLogConfig(string name)")
	fmt.Fprintln(os.Stderr, "  void debug(string name, string component, bool enable, double samplingPercentage)")
	fmt.Fprintln(os.Stderr, "  void setWorkerProfiler(string id, ProfileRequest profileRequest)")
	fmt.Fprintln(os.Stderr, "   getComponentPendingProfileActions(string id, string component_id, ProfileAction action)")
	fmt.Fprintln(os.Stderr, "  void uploadNewCredentials(string name, Credentials creds)")
	fmt.Fprintln(os.Stderr, "  string beginCreateBlob(string key, SettableBlobMeta meta)")
	fmt.Fprintln(os.Stderr, "  string beginUpdateBlob(string key)")
	fmt.Fprintln(os.Stderr, "  void uploadBlobChunk(string session, string chunk)")
	fmt.Fprintln(os.Stderr, "  void finishBlobUpload(string session)")
	fmt.Fprintln(os.Stderr, "  void cancelBlobUpload(string session)")
	fmt.Fprintln(os.Stderr, "  ReadableBlobMeta getBlobMeta(string key)")
	fmt.Fprintln(os.Stderr, "  void setBlobMeta(string key, SettableBlobMeta meta)")
	fmt.Fprintln(os.Stderr, "  BeginDownloadResult beginBlobDownload(string key)")
	fmt.Fprintln(os.Stderr, "  string downloadBlobChunk(string session)")
	fmt.Fprintln(os.Stderr, "  void deleteBlob(string key)")
	fmt.Fprintln(os.Stderr, "  ListBlobsResult listBlobs(string session)")
	fmt.Fprintln(os.Stderr, "  i32 getBlobReplication(string key)")
	fmt.Fprintln(os.Stderr, "  i32 updateBlobReplication(string key, i32 replication)")
	fmt.Fprintln(os.Stderr, "  void createStateInZookeeper(string key)")
	fmt.Fprintln(os.Stderr, "  string beginFileUpload()")
	fmt.Fprintln(os.Stderr, "  void uploadChunk(string location, string chunk)")
	fmt.Fprintln(os.Stderr, "  void finishFileUpload(string location)")
	fmt.Fprintln(os.Stderr, "  string downloadChunk(string id)")
	fmt.Fprintln(os.Stderr, "  string getNimbusConf()")
	fmt.Fprintln(os.Stderr, "  ClusterSummary getClusterInfo()")
	fmt.Fprintln(os.Stderr, "   getTopologySummaries()")
	fmt.Fprintln(os.Stderr, "  TopologySummary getTopologySummaryByName(string name)")
	fmt.Fprintln(os.Stderr, "  TopologySummary getTopologySummary(string id)")
	fmt.Fprintln(os.Stderr, "  NimbusSummary getLeader()")
	fmt.Fprintln(os.Stderr, "  bool isTopologyNameAllowed(string name)")
	fmt.Fprintln(os.Stderr, "  TopologyInfo getTopologyInfoByName(string name)")
	fmt.Fprintln(os.Stderr, "  TopologyInfo getTopologyInfo(string id)")
	fmt.Fprintln(os.Stderr, "  TopologyInfo getTopologyInfoByNameWithOpts(string name, GetInfoOptions options)")
	fmt.Fprintln(os.Stderr, "  TopologyInfo getTopologyInfoWithOpts(string id, GetInfoOptions options)")
	fmt.Fprintln(os.Stderr, "  TopologyPageInfo getTopologyPageInfo(string id, string window, bool is_include_sys)")
	fmt.Fprintln(os.Stderr, "  SupervisorPageInfo getSupervisorPageInfo(string id, string host, bool is_include_sys)")
	fmt.Fprintln(os.Stderr, "  ComponentPageInfo getComponentPageInfo(string topology_id, string component_id, string window, bool is_include_sys)")
	fmt.Fprintln(os.Stderr, "  string getTopologyConf(string id)")
	fmt.Fprintln(os.Stderr, "  StormTopology getTopology(string id)")
	fmt.Fprintln(os.Stderr, "  StormTopology getUserTopology(string id)")
	fmt.Fprintln(os.Stderr, "  TopologyHistoryInfo getTopologyHistory(string user)")
	fmt.Fprintln(os.Stderr, "   getOwnerResourceSummaries(string owner)")
	fmt.Fprintln(os.Stderr, "  SupervisorAssignments getSupervisorAssignments(string node)")
	fmt.Fprintln(os.Stderr, "  void sendSupervisorWorkerHeartbeats(SupervisorWorkerHeartbeats heartbeats)")
	fmt.Fprintln(os.Stderr, "  void sendSupervisorWorkerHeartbeat(SupervisorWorkerHeartbeat heatbeat)")
	fmt.Fprintln(os.Stderr, "  void processWorkerMetrics(WorkerMetrics metrics)")
	fmt.Fprintln(os.Stderr, "  bool isRemoteBlobExists(string blobKey)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
	var m map[string]string = h
	return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
	parts := strings.Split(value, ": ")
	if len(parts) != 2 {
		return fmt.Errorf("header should be of format 'Key: Value'")
	}
	h[parts[0]] = parts[1]
	return nil
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	headers := make(httpHeaders)
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
	flag.Parse()
	
	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}
	
	cmd := flag.Arg(0)
	var err error
	var cfg *thrift.TConfiguration = nil
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
		if len(headers) > 0 {
			httptrans := trans.(*thrift.THttpClient)
			for key, value := range headers {
				httptrans.SetHeader(key, value)
			}
		}
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransportConf(trans, cfg)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := github.com/veteran-chad/storm-controller/pkg/storm/thrift.NewNimbusClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}
	
	switch cmd {
	case "submitTopology":
		if flag.NArg() - 1 != 4 {
			fmt.Fprintln(os.Stderr, "SubmitTopology requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg569 := flag.Arg(4)
		mbTrans570 := thrift.NewTMemoryBufferLen(len(arg569))
		defer mbTrans570.Close()
		_, err571 := mbTrans570.WriteString(arg569)
		if err571 != nil {
			Usage()
			return
		}
		factory572 := thrift.NewTJSONProtocolFactory()
		jsProt573 := factory572.GetProtocol(mbTrans570)
		argvalue3 := github.com/veteran-chad/storm-controller/pkg/storm/thrift.NewStormTopology()
		err574 := argvalue3.Read(context.Background(), jsProt573)
		if err574 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.SubmitTopology(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "submitTopologyWithOpts":
		if flag.NArg() - 1 != 5 {
			fmt.Fprintln(os.Stderr, "SubmitTopologyWithOpts requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg578 := flag.Arg(4)
		mbTrans579 := thrift.NewTMemoryBufferLen(len(arg578))
		defer mbTrans579.Close()
		_, err580 := mbTrans579.WriteString(arg578)
		if err580 != nil {
			Usage()
			return
		}
		factory581 := thrift.NewTJSONProtocolFactory()
		jsProt582 := factory581.GetProtocol(mbTrans579)
		argvalue3 := github.com/veteran-chad/storm-controller/pkg/storm/thrift.NewStormTopology()
		err583 := argvalue3.Read(context.Background(), jsProt582)
		if err583 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg584 := flag.Arg(5)
		mbTrans585 := thrift.NewTMemoryBufferLen(len(arg584))
		defer mbTrans585.Close()
		_, err586 := mbTrans585.WriteString(arg584)
		if err586 != nil {
			Usage()
			return
		}
		factory587 := thrift.NewTJSONProtocolFactory()
		jsProt588 := factory587.GetProtocol(mbTrans585)
		argvalue4 := github.com/veteran-chad/storm-controller/pkg/storm/thrift.NewSubmitOptions()
		err589 := argvalue4.Read(context.Background(), jsProt588)
		if err589 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.SubmitTopologyWithOpts(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "killTopology":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "KillTopology requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.KillTopology(context.Background(), value0))
		fmt.Print("\n")
		break
	case "killTopologyWithOpts":
		if flag.NArg() - 1 != 2 {
			fmt.Fprintln(os.Stderr, "KillTopologyWithOpts requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg592 := flag.Arg(2)
		mbTrans593 := thrift.NewTMemoryBufferLen(len(arg592))
		defer mbTrans593.Close()
		_, err594 := mbTrans593.WriteString(arg592)
		if err594 != nil {
			Usage()
			return
		}
		factory595 := thrift.NewTJSONProtocolFactory()
		jsProt596 := factory595.GetProtocol(mbTrans593)
		argvalue1 := github.com/veteran-chad/storm-controller/pkg/storm/thrift.NewKillOptions()
		err597 := argvalue1.Read(context.Background(), jsProt596)
		if err597 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.KillTopologyWithOpts(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "activate":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "Activate requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.Activate(context.Background(), value0))
		fmt.Print("\n")
		break
	case "deactivate":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "Deactivate requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.Deactivate(context.Background(), value0))
		fmt.Print("\n")
		break
	case "rebalance":
		if flag.NArg() - 1 != 2 {
			fmt.Fprintln(os.Stderr, "Rebalance requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg601 := flag.Arg(2)
		mbTrans602 := thrift.NewTMemoryBufferLen(len(arg601))
		defer mbTrans602.Close()
		_, err603 := mbTrans602.WriteString(arg601)
		if err603 != nil {
			Usage()
			return
		}
		factory604 := thrift.NewTJSONProtocolFactory()
		jsProt605 := factory604.GetProtocol(mbTrans602)
		argvalue1 := github.com/veteran-chad/storm-controller/pkg/storm/thrift.NewRebalanceOptions()
		err606 := argvalue1.Read(context.Background(), jsProt605)
		if err606 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.Rebalance(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "setLogConfig":
		if flag.NArg() - 1 != 2 {
			fmt.Fprintln(os.Stderr, "SetLogConfig requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg608 := flag.Arg(2)
		mbTrans609 := thrift.NewTMemoryBufferLen(len(arg608))
		defer mbTrans609.Close()
		_, err610 := mbTrans609.WriteString(arg608)
		if err610 != nil {
			Usage()
			return
		}
		factory611 := thrift.NewTJSONProtocolFactory()
		jsProt612 := factory611.GetProtocol(mbTrans609)
		argvalue1 := github.com/veteran-chad/storm-controller/pkg/storm/thrift.NewLogConfig()
		err613 := argvalue1.Read(context.Background(), jsProt612)
		if err613 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.SetLogConfig(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getLogConfig":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "GetLogConfig requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetLogConfig(context.Background(), value0))
		fmt.Print("\n")
		break
	case "debug":
		if flag.NArg() - 1 != 4 {
			fmt.Fprintln(os.Stderr, "Debug requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		argvalue3, err618 := (strconv.ParseFloat(flag.Arg(4), 64))
		if err618 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.Debug(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "setWorkerProfiler":
		if flag.NArg() - 1 != 2 {
			fmt.Fprintln(os.Stderr, "SetWorkerProfiler requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg620 := flag.Arg(2)
		mbTrans621 := thrift.NewTMemoryBufferLen(len(arg620))
		defer mbTrans621.Close()
		_, err622 := mbTrans621.WriteString(arg620)
		if err622 != nil {
			Usage()
			return
		}
		factory623 := thrift.NewTJSONProtocolFactory()
		jsProt624 := factory623.GetProtocol(mbTrans621)
		argvalue1 := github.com/veteran-chad/storm-controller/pkg/storm/thrift.NewProfileRequest()
		err625 := argvalue1.Read(context.Background(), jsProt624)
		if err625 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.SetWorkerProfiler(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getComponentPendingProfileActions":
		if flag.NArg() - 1 != 3 {
			fmt.Fprintln(os.Stderr, "GetComponentPendingProfileActions requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := github.com/veteran-chad/storm-controller/pkg/storm/thrift.ProfileAction(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetComponentPendingProfileActions(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "uploadNewCredentials":
		if flag.NArg() - 1 != 2 {
			fmt.Fprintln(os.Stderr, "UploadNewCredentials requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg629 := flag.Arg(2)
		mbTrans630 := thrift.NewTMemoryBufferLen(len(arg629))
		defer mbTrans630.Close()
		_, err631 := mbTrans630.WriteString(arg629)
		if err631 != nil {
			Usage()
			return
		}
		factory632 := thrift.NewTJSONProtocolFactory()
		jsProt633 := factory632.GetProtocol(mbTrans630)
		argvalue1 := github.com/veteran-chad/storm-controller/pkg/storm/thrift.NewCredentials()
		err634 := argvalue1.Read(context.Background(), jsProt633)
		if err634 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UploadNewCredentials(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "beginCreateBlob":
		if flag.NArg() - 1 != 2 {
			fmt.Fprintln(os.Stderr, "BeginCreateBlob requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg636 := flag.Arg(2)
		mbTrans637 := thrift.NewTMemoryBufferLen(len(arg636))
		defer mbTrans637.Close()
		_, err638 := mbTrans637.WriteString(arg636)
		if err638 != nil {
			Usage()
			return
		}
		factory639 := thrift.NewTJSONProtocolFactory()
		jsProt640 := factory639.GetProtocol(mbTrans637)
		argvalue1 := github.com/veteran-chad/storm-controller/pkg/storm/thrift.NewSettableBlobMeta()
		err641 := argvalue1.Read(context.Background(), jsProt640)
		if err641 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.BeginCreateBlob(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "beginUpdateBlob":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "BeginUpdateBlob requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.BeginUpdateBlob(context.Background(), value0))
		fmt.Print("\n")
		break
	case "uploadBlobChunk":
		if flag.NArg() - 1 != 2 {
			fmt.Fprintln(os.Stderr, "UploadBlobChunk requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := []byte(flag.Arg(2))
		value1 := argvalue1
		fmt.Print(client.UploadBlobChunk(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "finishBlobUpload":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "FinishBlobUpload requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.FinishBlobUpload(context.Background(), value0))
		fmt.Print("\n")
		break
	case "cancelBlobUpload":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "CancelBlobUpload requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.CancelBlobUpload(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getBlobMeta":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "GetBlobMeta requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetBlobMeta(context.Background(), value0))
		fmt.Print("\n")
		break
	case "setBlobMeta":
		if flag.NArg() - 1 != 2 {
			fmt.Fprintln(os.Stderr, "SetBlobMeta requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg649 := flag.Arg(2)
		mbTrans650 := thrift.NewTMemoryBufferLen(len(arg649))
		defer mbTrans650.Close()
		_, err651 := mbTrans650.WriteString(arg649)
		if err651 != nil {
			Usage()
			return
		}
		factory652 := thrift.NewTJSONProtocolFactory()
		jsProt653 := factory652.GetProtocol(mbTrans650)
		argvalue1 := github.com/veteran-chad/storm-controller/pkg/storm/thrift.NewSettableBlobMeta()
		err654 := argvalue1.Read(context.Background(), jsProt653)
		if err654 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.SetBlobMeta(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "beginBlobDownload":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "BeginBlobDownload requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.BeginBlobDownload(context.Background(), value0))
		fmt.Print("\n")
		break
	case "downloadBlobChunk":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "DownloadBlobChunk requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DownloadBlobChunk(context.Background(), value0))
		fmt.Print("\n")
		break
	case "deleteBlob":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteBlob requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DeleteBlob(context.Background(), value0))
		fmt.Print("\n")
		break
	case "listBlobs":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "ListBlobs requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ListBlobs(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getBlobReplication":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "GetBlobReplication requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetBlobReplication(context.Background(), value0))
		fmt.Print("\n")
		break
	case "updateBlobReplication":
		if flag.NArg() - 1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateBlobReplication requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err661 := (strconv.Atoi(flag.Arg(2)))
		if err661 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.UpdateBlobReplication(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "createStateInZookeeper":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateStateInZookeeper requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.CreateStateInZookeeper(context.Background(), value0))
		fmt.Print("\n")
		break
	case "beginFileUpload":
		if flag.NArg() - 1 != 0 {
			fmt.Fprintln(os.Stderr, "BeginFileUpload requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.BeginFileUpload(context.Background()))
		fmt.Print("\n")
		break
	case "uploadChunk":
		if flag.NArg() - 1 != 2 {
			fmt.Fprintln(os.Stderr, "UploadChunk requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := []byte(flag.Arg(2))
		value1 := argvalue1
		fmt.Print(client.UploadChunk(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "finishFileUpload":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "FinishFileUpload requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.FinishFileUpload(context.Background(), value0))
		fmt.Print("\n")
		break
	case "downloadChunk":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "DownloadChunk requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DownloadChunk(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getNimbusConf":
		if flag.NArg() - 1 != 0 {
			fmt.Fprintln(os.Stderr, "GetNimbusConf requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetNimbusConf(context.Background()))
		fmt.Print("\n")
		break
	case "getClusterInfo":
		if flag.NArg() - 1 != 0 {
			fmt.Fprintln(os.Stderr, "GetClusterInfo requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetClusterInfo(context.Background()))
		fmt.Print("\n")
		break
	case "getTopologySummaries":
		if flag.NArg() - 1 != 0 {
			fmt.Fprintln(os.Stderr, "GetTopologySummaries requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetTopologySummaries(context.Background()))
		fmt.Print("\n")
		break
	case "getTopologySummaryByName":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTopologySummaryByName requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTopologySummaryByName(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getTopologySummary":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTopologySummary requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTopologySummary(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getLeader":
		if flag.NArg() - 1 != 0 {
			fmt.Fprintln(os.Stderr, "GetLeader requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetLeader(context.Background()))
		fmt.Print("\n")
		break
	case "isTopologyNameAllowed":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "IsTopologyNameAllowed requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.IsTopologyNameAllowed(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getTopologyInfoByName":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTopologyInfoByName requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTopologyInfoByName(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getTopologyInfo":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTopologyInfo requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTopologyInfo(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getTopologyInfoByNameWithOpts":
		if flag.NArg() - 1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTopologyInfoByNameWithOpts requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg673 := flag.Arg(2)
		mbTrans674 := thrift.NewTMemoryBufferLen(len(arg673))
		defer mbTrans674.Close()
		_, err675 := mbTrans674.WriteString(arg673)
		if err675 != nil {
			Usage()
			return
		}
		factory676 := thrift.NewTJSONProtocolFactory()
		jsProt677 := factory676.GetProtocol(mbTrans674)
		argvalue1 := github.com/veteran-chad/storm-controller/pkg/storm/thrift.NewGetInfoOptions()
		err678 := argvalue1.Read(context.Background(), jsProt677)
		if err678 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.GetTopologyInfoByNameWithOpts(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getTopologyInfoWithOpts":
		if flag.NArg() - 1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTopologyInfoWithOpts requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg680 := flag.Arg(2)
		mbTrans681 := thrift.NewTMemoryBufferLen(len(arg680))
		defer mbTrans681.Close()
		_, err682 := mbTrans681.WriteString(arg680)
		if err682 != nil {
			Usage()
			return
		}
		factory683 := thrift.NewTJSONProtocolFactory()
		jsProt684 := factory683.GetProtocol(mbTrans681)
		argvalue1 := github.com/veteran-chad/storm-controller/pkg/storm/thrift.NewGetInfoOptions()
		err685 := argvalue1.Read(context.Background(), jsProt684)
		if err685 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.GetTopologyInfoWithOpts(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getTopologyPageInfo":
		if flag.NArg() - 1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTopologyPageInfo requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.GetTopologyPageInfo(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "getSupervisorPageInfo":
		if flag.NArg() - 1 != 3 {
			fmt.Fprintln(os.Stderr, "GetSupervisorPageInfo requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.GetSupervisorPageInfo(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "getComponentPageInfo":
		if flag.NArg() - 1 != 4 {
			fmt.Fprintln(os.Stderr, "GetComponentPageInfo requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.GetComponentPageInfo(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getTopologyConf":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTopologyConf requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTopologyConf(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getTopology":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTopology requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTopology(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getUserTopology":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserTopology requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetUserTopology(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getTopologyHistory":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTopologyHistory requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTopologyHistory(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getOwnerResourceSummaries":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "GetOwnerResourceSummaries requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetOwnerResourceSummaries(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getSupervisorAssignments":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSupervisorAssignments requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetSupervisorAssignments(context.Background(), value0))
		fmt.Print("\n")
		break
	case "sendSupervisorWorkerHeartbeats":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "SendSupervisorWorkerHeartbeats requires 1 args")
			flag.Usage()
		}
		arg702 := flag.Arg(1)
		mbTrans703 := thrift.NewTMemoryBufferLen(len(arg702))
		defer mbTrans703.Close()
		_, err704 := mbTrans703.WriteString(arg702)
		if err704 != nil {
			Usage()
			return
		}
		factory705 := thrift.NewTJSONProtocolFactory()
		jsProt706 := factory705.GetProtocol(mbTrans703)
		argvalue0 := github.com/veteran-chad/storm-controller/pkg/storm/thrift.NewSupervisorWorkerHeartbeats()
		err707 := argvalue0.Read(context.Background(), jsProt706)
		if err707 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SendSupervisorWorkerHeartbeats(context.Background(), value0))
		fmt.Print("\n")
		break
	case "sendSupervisorWorkerHeartbeat":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "SendSupervisorWorkerHeartbeat requires 1 args")
			flag.Usage()
		}
		arg708 := flag.Arg(1)
		mbTrans709 := thrift.NewTMemoryBufferLen(len(arg708))
		defer mbTrans709.Close()
		_, err710 := mbTrans709.WriteString(arg708)
		if err710 != nil {
			Usage()
			return
		}
		factory711 := thrift.NewTJSONProtocolFactory()
		jsProt712 := factory711.GetProtocol(mbTrans709)
		argvalue0 := github.com/veteran-chad/storm-controller/pkg/storm/thrift.NewSupervisorWorkerHeartbeat()
		err713 := argvalue0.Read(context.Background(), jsProt712)
		if err713 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SendSupervisorWorkerHeartbeat(context.Background(), value0))
		fmt.Print("\n")
		break
	case "processWorkerMetrics":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "ProcessWorkerMetrics requires 1 args")
			flag.Usage()
		}
		arg714 := flag.Arg(1)
		mbTrans715 := thrift.NewTMemoryBufferLen(len(arg714))
		defer mbTrans715.Close()
		_, err716 := mbTrans715.WriteString(arg714)
		if err716 != nil {
			Usage()
			return
		}
		factory717 := thrift.NewTJSONProtocolFactory()
		jsProt718 := factory717.GetProtocol(mbTrans715)
		argvalue0 := github.com/veteran-chad/storm-controller/pkg/storm/thrift.NewWorkerMetrics()
		err719 := argvalue0.Read(context.Background(), jsProt718)
		if err719 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ProcessWorkerMetrics(context.Background(), value0))
		fmt.Print("\n")
		break
	case "isRemoteBlobExists":
		if flag.NArg() - 1 != 1 {
			fmt.Fprintln(os.Stderr, "IsRemoteBlobExists requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.IsRemoteBlobExists(context.Background(), value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
