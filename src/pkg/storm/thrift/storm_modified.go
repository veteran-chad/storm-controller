// Code generated by Thrift Compiler (0.22.0). DO NOT EDIT.

package thrift

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"iter"
	"log/slog"
	"regexp"
	"strings"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = bytes.Equal
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = iter.Pull[int]
var _ = slog.Log
var _ = time.Now
var _ = thrift.ZERO

// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

type ComponentType int64

const (
	ComponentType_BOLT  ComponentType = 1
	ComponentType_SPOUT ComponentType = 2
)

var knownComponentTypeValues = []ComponentType{
	ComponentType_BOLT,
	ComponentType_SPOUT,
}

func ComponentTypeValues() iter.Seq[ComponentType] {
	return func(yield func(ComponentType) bool) {
		for _, v := range knownComponentTypeValues {
			if !yield(v) {
				return
			}
		}
	}
}

func (p ComponentType) String() string {
	switch p {
	case ComponentType_BOLT:
		return "BOLT"
	case ComponentType_SPOUT:
		return "SPOUT"
	}
	return "<UNSET>"
}

func ComponentTypeFromString(s string) (ComponentType, error) {
	switch s {
	case "BOLT":
		return ComponentType_BOLT, nil
	case "SPOUT":
		return ComponentType_SPOUT, nil
	}
	return ComponentType(0), fmt.Errorf("not a valid ComponentType string")
}

func ComponentTypePtr(v ComponentType) *ComponentType { return &v }

func (p ComponentType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ComponentType) UnmarshalText(text []byte) error {
	q, err := ComponentTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ComponentType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ComponentType(v)
	return nil
}

func (p *ComponentType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TopologyInitialStatus int64

const (
	TopologyInitialStatus_ACTIVE   TopologyInitialStatus = 1
	TopologyInitialStatus_INACTIVE TopologyInitialStatus = 2
)

var knownTopologyInitialStatusValues = []TopologyInitialStatus{
	TopologyInitialStatus_ACTIVE,
	TopologyInitialStatus_INACTIVE,
}

func TopologyInitialStatusValues() iter.Seq[TopologyInitialStatus] {
	return func(yield func(TopologyInitialStatus) bool) {
		for _, v := range knownTopologyInitialStatusValues {
			if !yield(v) {
				return
			}
		}
	}
}

func (p TopologyInitialStatus) String() string {
	switch p {
	case TopologyInitialStatus_ACTIVE:
		return "ACTIVE"
	case TopologyInitialStatus_INACTIVE:
		return "INACTIVE"
	}
	return "<UNSET>"
}

func TopologyInitialStatusFromString(s string) (TopologyInitialStatus, error) {
	switch s {
	case "ACTIVE":
		return TopologyInitialStatus_ACTIVE, nil
	case "INACTIVE":
		return TopologyInitialStatus_INACTIVE, nil
	}
	return TopologyInitialStatus(0), fmt.Errorf("not a valid TopologyInitialStatus string")
}

func TopologyInitialStatusPtr(v TopologyInitialStatus) *TopologyInitialStatus { return &v }

func (p TopologyInitialStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TopologyInitialStatus) UnmarshalText(text []byte) error {
	q, err := TopologyInitialStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TopologyInitialStatus) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TopologyInitialStatus(v)
	return nil
}

func (p *TopologyInitialStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type AccessControlType int64

const (
	AccessControlType_OTHER AccessControlType = 1
	AccessControlType_USER  AccessControlType = 2
)

var knownAccessControlTypeValues = []AccessControlType{
	AccessControlType_OTHER,
	AccessControlType_USER,
}

func AccessControlTypeValues() iter.Seq[AccessControlType] {
	return func(yield func(AccessControlType) bool) {
		for _, v := range knownAccessControlTypeValues {
			if !yield(v) {
				return
			}
		}
	}
}

func (p AccessControlType) String() string {
	switch p {
	case AccessControlType_OTHER:
		return "OTHER"
	case AccessControlType_USER:
		return "USER"
	}
	return "<UNSET>"
}

func AccessControlTypeFromString(s string) (AccessControlType, error) {
	switch s {
	case "OTHER":
		return AccessControlType_OTHER, nil
	case "USER":
		return AccessControlType_USER, nil
	}
	return AccessControlType(0), fmt.Errorf("not a valid AccessControlType string")
}

func AccessControlTypePtr(v AccessControlType) *AccessControlType { return &v }

func (p AccessControlType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *AccessControlType) UnmarshalText(text []byte) error {
	q, err := AccessControlTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *AccessControlType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = AccessControlType(v)
	return nil
}

func (p *AccessControlType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TopologyStatus int64

const (
	TopologyStatus_ACTIVE      TopologyStatus = 1
	TopologyStatus_INACTIVE    TopologyStatus = 2
	TopologyStatus_REBALANCING TopologyStatus = 3
	TopologyStatus_KILLED      TopologyStatus = 4
)

var knownTopologyStatusValues = []TopologyStatus{
	TopologyStatus_ACTIVE,
	TopologyStatus_INACTIVE,
	TopologyStatus_REBALANCING,
	TopologyStatus_KILLED,
}

func TopologyStatusValues() iter.Seq[TopologyStatus] {
	return func(yield func(TopologyStatus) bool) {
		for _, v := range knownTopologyStatusValues {
			if !yield(v) {
				return
			}
		}
	}
}

func (p TopologyStatus) String() string {
	switch p {
	case TopologyStatus_ACTIVE:
		return "ACTIVE"
	case TopologyStatus_INACTIVE:
		return "INACTIVE"
	case TopologyStatus_REBALANCING:
		return "REBALANCING"
	case TopologyStatus_KILLED:
		return "KILLED"
	}
	return "<UNSET>"
}

func TopologyStatusFromString(s string) (TopologyStatus, error) {
	switch s {
	case "ACTIVE":
		return TopologyStatus_ACTIVE, nil
	case "INACTIVE":
		return TopologyStatus_INACTIVE, nil
	case "REBALANCING":
		return TopologyStatus_REBALANCING, nil
	case "KILLED":
		return TopologyStatus_KILLED, nil
	}
	return TopologyStatus(0), fmt.Errorf("not a valid TopologyStatus string")
}

func TopologyStatusPtr(v TopologyStatus) *TopologyStatus { return &v }

func (p TopologyStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TopologyStatus) UnmarshalText(text []byte) error {
	q, err := TopologyStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TopologyStatus) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TopologyStatus(v)
	return nil
}

func (p *TopologyStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type NumErrorsChoice int64

const (
	NumErrorsChoice_ALL  NumErrorsChoice = 0
	NumErrorsChoice_NONE NumErrorsChoice = 1
	NumErrorsChoice_ONE  NumErrorsChoice = 2
)

var knownNumErrorsChoiceValues = []NumErrorsChoice{
	NumErrorsChoice_ALL,
	NumErrorsChoice_NONE,
	NumErrorsChoice_ONE,
}

func NumErrorsChoiceValues() iter.Seq[NumErrorsChoice] {
	return func(yield func(NumErrorsChoice) bool) {
		for _, v := range knownNumErrorsChoiceValues {
			if !yield(v) {
				return
			}
		}
	}
}

func (p NumErrorsChoice) String() string {
	switch p {
	case NumErrorsChoice_ALL:
		return "ALL"
	case NumErrorsChoice_NONE:
		return "NONE"
	case NumErrorsChoice_ONE:
		return "ONE"
	}
	return "<UNSET>"
}

func NumErrorsChoiceFromString(s string) (NumErrorsChoice, error) {
	switch s {
	case "ALL":
		return NumErrorsChoice_ALL, nil
	case "NONE":
		return NumErrorsChoice_NONE, nil
	case "ONE":
		return NumErrorsChoice_ONE, nil
	}
	return NumErrorsChoice(0), fmt.Errorf("not a valid NumErrorsChoice string")
}

func NumErrorsChoicePtr(v NumErrorsChoice) *NumErrorsChoice { return &v }

func (p NumErrorsChoice) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *NumErrorsChoice) UnmarshalText(text []byte) error {
	q, err := NumErrorsChoiceFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *NumErrorsChoice) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = NumErrorsChoice(v)
	return nil
}

func (p *NumErrorsChoice) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ProfileAction int64

const (
	ProfileAction_JPROFILE_STOP  ProfileAction = 0
	ProfileAction_JPROFILE_START ProfileAction = 1
	ProfileAction_JPROFILE_DUMP  ProfileAction = 2
	ProfileAction_JMAP_DUMP      ProfileAction = 3
	ProfileAction_JSTACK_DUMP    ProfileAction = 4
	ProfileAction_JVM_RESTART    ProfileAction = 5
)

var knownProfileActionValues = []ProfileAction{
	ProfileAction_JPROFILE_STOP,
	ProfileAction_JPROFILE_START,
	ProfileAction_JPROFILE_DUMP,
	ProfileAction_JMAP_DUMP,
	ProfileAction_JSTACK_DUMP,
	ProfileAction_JVM_RESTART,
}

func ProfileActionValues() iter.Seq[ProfileAction] {
	return func(yield func(ProfileAction) bool) {
		for _, v := range knownProfileActionValues {
			if !yield(v) {
				return
			}
		}
	}
}

func (p ProfileAction) String() string {
	switch p {
	case ProfileAction_JPROFILE_STOP:
		return "JPROFILE_STOP"
	case ProfileAction_JPROFILE_START:
		return "JPROFILE_START"
	case ProfileAction_JPROFILE_DUMP:
		return "JPROFILE_DUMP"
	case ProfileAction_JMAP_DUMP:
		return "JMAP_DUMP"
	case ProfileAction_JSTACK_DUMP:
		return "JSTACK_DUMP"
	case ProfileAction_JVM_RESTART:
		return "JVM_RESTART"
	}
	return "<UNSET>"
}

func ProfileActionFromString(s string) (ProfileAction, error) {
	switch s {
	case "JPROFILE_STOP":
		return ProfileAction_JPROFILE_STOP, nil
	case "JPROFILE_START":
		return ProfileAction_JPROFILE_START, nil
	case "JPROFILE_DUMP":
		return ProfileAction_JPROFILE_DUMP, nil
	case "JMAP_DUMP":
		return ProfileAction_JMAP_DUMP, nil
	case "JSTACK_DUMP":
		return ProfileAction_JSTACK_DUMP, nil
	case "JVM_RESTART":
		return ProfileAction_JVM_RESTART, nil
	}
	return ProfileAction(0), fmt.Errorf("not a valid ProfileAction string")
}

func ProfileActionPtr(v ProfileAction) *ProfileAction { return &v }

func (p ProfileAction) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ProfileAction) UnmarshalText(text []byte) error {
	q, err := ProfileActionFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ProfileAction) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ProfileAction(v)
	return nil
}

func (p *ProfileAction) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type LogLevelAction int64

const (
	LogLevelAction_UNCHANGED LogLevelAction = 1
	LogLevelAction_UPDATE    LogLevelAction = 2
	LogLevelAction_REMOVE    LogLevelAction = 3
)

var knownLogLevelActionValues = []LogLevelAction{
	LogLevelAction_UNCHANGED,
	LogLevelAction_UPDATE,
	LogLevelAction_REMOVE,
}

func LogLevelActionValues() iter.Seq[LogLevelAction] {
	return func(yield func(LogLevelAction) bool) {
		for _, v := range knownLogLevelActionValues {
			if !yield(v) {
				return
			}
		}
	}
}

func (p LogLevelAction) String() string {
	switch p {
	case LogLevelAction_UNCHANGED:
		return "UNCHANGED"
	case LogLevelAction_UPDATE:
		return "UPDATE"
	case LogLevelAction_REMOVE:
		return "REMOVE"
	}
	return "<UNSET>"
}

func LogLevelActionFromString(s string) (LogLevelAction, error) {
	switch s {
	case "UNCHANGED":
		return LogLevelAction_UNCHANGED, nil
	case "UPDATE":
		return LogLevelAction_UPDATE, nil
	case "REMOVE":
		return LogLevelAction_REMOVE, nil
	}
	return LogLevelAction(0), fmt.Errorf("not a valid LogLevelAction string")
}

func LogLevelActionPtr(v LogLevelAction) *LogLevelAction { return &v }

func (p LogLevelAction) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *LogLevelAction) UnmarshalText(text []byte) error {
	q, err := LogLevelActionFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *LogLevelAction) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = LogLevelAction(v)
	return nil
}

func (p *LogLevelAction) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DRPCExceptionType int64

const (
	DRPCExceptionType_INTERNAL_ERROR  DRPCExceptionType = 0
	DRPCExceptionType_SERVER_SHUTDOWN DRPCExceptionType = 1
	DRPCExceptionType_SERVER_TIMEOUT  DRPCExceptionType = 2
	DRPCExceptionType_FAILED_REQUEST  DRPCExceptionType = 3
)

var knownDRPCExceptionTypeValues = []DRPCExceptionType{
	DRPCExceptionType_INTERNAL_ERROR,
	DRPCExceptionType_SERVER_SHUTDOWN,
	DRPCExceptionType_SERVER_TIMEOUT,
	DRPCExceptionType_FAILED_REQUEST,
}

func DRPCExceptionTypeValues() iter.Seq[DRPCExceptionType] {
	return func(yield func(DRPCExceptionType) bool) {
		for _, v := range knownDRPCExceptionTypeValues {
			if !yield(v) {
				return
			}
		}
	}
}

func (p DRPCExceptionType) String() string {
	switch p {
	case DRPCExceptionType_INTERNAL_ERROR:
		return "INTERNAL_ERROR"
	case DRPCExceptionType_SERVER_SHUTDOWN:
		return "SERVER_SHUTDOWN"
	case DRPCExceptionType_SERVER_TIMEOUT:
		return "SERVER_TIMEOUT"
	case DRPCExceptionType_FAILED_REQUEST:
		return "FAILED_REQUEST"
	}
	return "<UNSET>"
}

func DRPCExceptionTypeFromString(s string) (DRPCExceptionType, error) {
	switch s {
	case "INTERNAL_ERROR":
		return DRPCExceptionType_INTERNAL_ERROR, nil
	case "SERVER_SHUTDOWN":
		return DRPCExceptionType_SERVER_SHUTDOWN, nil
	case "SERVER_TIMEOUT":
		return DRPCExceptionType_SERVER_TIMEOUT, nil
	case "FAILED_REQUEST":
		return DRPCExceptionType_FAILED_REQUEST, nil
	}
	return DRPCExceptionType(0), fmt.Errorf("not a valid DRPCExceptionType string")
}

func DRPCExceptionTypePtr(v DRPCExceptionType) *DRPCExceptionType { return &v }

func (p DRPCExceptionType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DRPCExceptionType) UnmarshalText(text []byte) error {
	q, err := DRPCExceptionTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *DRPCExceptionType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = DRPCExceptionType(v)
	return nil
}

func (p *DRPCExceptionType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type HBServerMessageType int64

const (
	HBServerMessageType_CREATE_PATH                     HBServerMessageType = 0
	HBServerMessageType_CREATE_PATH_RESPONSE            HBServerMessageType = 1
	HBServerMessageType_EXISTS                          HBServerMessageType = 2
	HBServerMessageType_EXISTS_RESPONSE                 HBServerMessageType = 3
	HBServerMessageType_SEND_PULSE                      HBServerMessageType = 4
	HBServerMessageType_SEND_PULSE_RESPONSE             HBServerMessageType = 5
	HBServerMessageType_GET_ALL_PULSE_FOR_PATH          HBServerMessageType = 6
	HBServerMessageType_GET_ALL_PULSE_FOR_PATH_RESPONSE HBServerMessageType = 7
	HBServerMessageType_GET_ALL_NODES_FOR_PATH          HBServerMessageType = 8
	HBServerMessageType_GET_ALL_NODES_FOR_PATH_RESPONSE HBServerMessageType = 9
	HBServerMessageType_GET_PULSE                       HBServerMessageType = 10
	HBServerMessageType_GET_PULSE_RESPONSE              HBServerMessageType = 11
	HBServerMessageType_DELETE_PATH                     HBServerMessageType = 12
	HBServerMessageType_DELETE_PATH_RESPONSE            HBServerMessageType = 13
	HBServerMessageType_DELETE_PULSE_ID                 HBServerMessageType = 14
	HBServerMessageType_DELETE_PULSE_ID_RESPONSE        HBServerMessageType = 15
	HBServerMessageType_CONTROL_MESSAGE                 HBServerMessageType = 16
	HBServerMessageType_SASL_MESSAGE_TOKEN              HBServerMessageType = 17
	HBServerMessageType_NOT_AUTHORIZED                  HBServerMessageType = 18
)

var knownHBServerMessageTypeValues = []HBServerMessageType{
	HBServerMessageType_CREATE_PATH,
	HBServerMessageType_CREATE_PATH_RESPONSE,
	HBServerMessageType_EXISTS,
	HBServerMessageType_EXISTS_RESPONSE,
	HBServerMessageType_SEND_PULSE,
	HBServerMessageType_SEND_PULSE_RESPONSE,
	HBServerMessageType_GET_ALL_PULSE_FOR_PATH,
	HBServerMessageType_GET_ALL_PULSE_FOR_PATH_RESPONSE,
	HBServerMessageType_GET_ALL_NODES_FOR_PATH,
	HBServerMessageType_GET_ALL_NODES_FOR_PATH_RESPONSE,
	HBServerMessageType_GET_PULSE,
	HBServerMessageType_GET_PULSE_RESPONSE,
	HBServerMessageType_DELETE_PATH,
	HBServerMessageType_DELETE_PATH_RESPONSE,
	HBServerMessageType_DELETE_PULSE_ID,
	HBServerMessageType_DELETE_PULSE_ID_RESPONSE,
	HBServerMessageType_CONTROL_MESSAGE,
	HBServerMessageType_SASL_MESSAGE_TOKEN,
	HBServerMessageType_NOT_AUTHORIZED,
}

func HBServerMessageTypeValues() iter.Seq[HBServerMessageType] {
	return func(yield func(HBServerMessageType) bool) {
		for _, v := range knownHBServerMessageTypeValues {
			if !yield(v) {
				return
			}
		}
	}
}

func (p HBServerMessageType) String() string {
	switch p {
	case HBServerMessageType_CREATE_PATH:
		return "CREATE_PATH"
	case HBServerMessageType_CREATE_PATH_RESPONSE:
		return "CREATE_PATH_RESPONSE"
	case HBServerMessageType_EXISTS:
		return "EXISTS"
	case HBServerMessageType_EXISTS_RESPONSE:
		return "EXISTS_RESPONSE"
	case HBServerMessageType_SEND_PULSE:
		return "SEND_PULSE"
	case HBServerMessageType_SEND_PULSE_RESPONSE:
		return "SEND_PULSE_RESPONSE"
	case HBServerMessageType_GET_ALL_PULSE_FOR_PATH:
		return "GET_ALL_PULSE_FOR_PATH"
	case HBServerMessageType_GET_ALL_PULSE_FOR_PATH_RESPONSE:
		return "GET_ALL_PULSE_FOR_PATH_RESPONSE"
	case HBServerMessageType_GET_ALL_NODES_FOR_PATH:
		return "GET_ALL_NODES_FOR_PATH"
	case HBServerMessageType_GET_ALL_NODES_FOR_PATH_RESPONSE:
		return "GET_ALL_NODES_FOR_PATH_RESPONSE"
	case HBServerMessageType_GET_PULSE:
		return "GET_PULSE"
	case HBServerMessageType_GET_PULSE_RESPONSE:
		return "GET_PULSE_RESPONSE"
	case HBServerMessageType_DELETE_PATH:
		return "DELETE_PATH"
	case HBServerMessageType_DELETE_PATH_RESPONSE:
		return "DELETE_PATH_RESPONSE"
	case HBServerMessageType_DELETE_PULSE_ID:
		return "DELETE_PULSE_ID"
	case HBServerMessageType_DELETE_PULSE_ID_RESPONSE:
		return "DELETE_PULSE_ID_RESPONSE"
	case HBServerMessageType_CONTROL_MESSAGE:
		return "CONTROL_MESSAGE"
	case HBServerMessageType_SASL_MESSAGE_TOKEN:
		return "SASL_MESSAGE_TOKEN"
	case HBServerMessageType_NOT_AUTHORIZED:
		return "NOT_AUTHORIZED"
	}
	return "<UNSET>"
}

func HBServerMessageTypeFromString(s string) (HBServerMessageType, error) {
	switch s {
	case "CREATE_PATH":
		return HBServerMessageType_CREATE_PATH, nil
	case "CREATE_PATH_RESPONSE":
		return HBServerMessageType_CREATE_PATH_RESPONSE, nil
	case "EXISTS":
		return HBServerMessageType_EXISTS, nil
	case "EXISTS_RESPONSE":
		return HBServerMessageType_EXISTS_RESPONSE, nil
	case "SEND_PULSE":
		return HBServerMessageType_SEND_PULSE, nil
	case "SEND_PULSE_RESPONSE":
		return HBServerMessageType_SEND_PULSE_RESPONSE, nil
	case "GET_ALL_PULSE_FOR_PATH":
		return HBServerMessageType_GET_ALL_PULSE_FOR_PATH, nil
	case "GET_ALL_PULSE_FOR_PATH_RESPONSE":
		return HBServerMessageType_GET_ALL_PULSE_FOR_PATH_RESPONSE, nil
	case "GET_ALL_NODES_FOR_PATH":
		return HBServerMessageType_GET_ALL_NODES_FOR_PATH, nil
	case "GET_ALL_NODES_FOR_PATH_RESPONSE":
		return HBServerMessageType_GET_ALL_NODES_FOR_PATH_RESPONSE, nil
	case "GET_PULSE":
		return HBServerMessageType_GET_PULSE, nil
	case "GET_PULSE_RESPONSE":
		return HBServerMessageType_GET_PULSE_RESPONSE, nil
	case "DELETE_PATH":
		return HBServerMessageType_DELETE_PATH, nil
	case "DELETE_PATH_RESPONSE":
		return HBServerMessageType_DELETE_PATH_RESPONSE, nil
	case "DELETE_PULSE_ID":
		return HBServerMessageType_DELETE_PULSE_ID, nil
	case "DELETE_PULSE_ID_RESPONSE":
		return HBServerMessageType_DELETE_PULSE_ID_RESPONSE, nil
	case "CONTROL_MESSAGE":
		return HBServerMessageType_CONTROL_MESSAGE, nil
	case "SASL_MESSAGE_TOKEN":
		return HBServerMessageType_SASL_MESSAGE_TOKEN, nil
	case "NOT_AUTHORIZED":
		return HBServerMessageType_NOT_AUTHORIZED, nil
	}
	return HBServerMessageType(0), fmt.Errorf("not a valid HBServerMessageType string")
}

func HBServerMessageTypePtr(v HBServerMessageType) *HBServerMessageType { return &v }

func (p HBServerMessageType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *HBServerMessageType) UnmarshalText(text []byte) error {
	q, err := HBServerMessageTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *HBServerMessageType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = HBServerMessageType(v)
	return nil
}

func (p *HBServerMessageType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type WorkerTokenServiceType int64

const (
	WorkerTokenServiceType_NIMBUS     WorkerTokenServiceType = 0
	WorkerTokenServiceType_DRPC       WorkerTokenServiceType = 1
	WorkerTokenServiceType_SUPERVISOR WorkerTokenServiceType = 2
)

var knownWorkerTokenServiceTypeValues = []WorkerTokenServiceType{
	WorkerTokenServiceType_NIMBUS,
	WorkerTokenServiceType_DRPC,
	WorkerTokenServiceType_SUPERVISOR,
}

func WorkerTokenServiceTypeValues() iter.Seq[WorkerTokenServiceType] {
	return func(yield func(WorkerTokenServiceType) bool) {
		for _, v := range knownWorkerTokenServiceTypeValues {
			if !yield(v) {
				return
			}
		}
	}
}

func (p WorkerTokenServiceType) String() string {
	switch p {
	case WorkerTokenServiceType_NIMBUS:
		return "NIMBUS"
	case WorkerTokenServiceType_DRPC:
		return "DRPC"
	case WorkerTokenServiceType_SUPERVISOR:
		return "SUPERVISOR"
	}
	return "<UNSET>"
}

func WorkerTokenServiceTypeFromString(s string) (WorkerTokenServiceType, error) {
	switch s {
	case "NIMBUS":
		return WorkerTokenServiceType_NIMBUS, nil
	case "DRPC":
		return WorkerTokenServiceType_DRPC, nil
	case "SUPERVISOR":
		return WorkerTokenServiceType_SUPERVISOR, nil
	}
	return WorkerTokenServiceType(0), fmt.Errorf("not a valid WorkerTokenServiceType string")
}

func WorkerTokenServiceTypePtr(v WorkerTokenServiceType) *WorkerTokenServiceType { return &v }

func (p WorkerTokenServiceType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *WorkerTokenServiceType) UnmarshalText(text []byte) error {
	q, err := WorkerTokenServiceTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *WorkerTokenServiceType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = WorkerTokenServiceType(v)
	return nil
}

func (p *WorkerTokenServiceType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//   - IntArg
//   - LongArg
//   - StringArg
//   - BoolArg
//   - BinaryArg
//   - DoubleArg
type JavaObjectArg struct {
	IntArg    *int32   `thrift:"int_arg,1" db:"int_arg" json:"int_arg,omitempty"`
	LongArg   *int64   `thrift:"long_arg,2" db:"long_arg" json:"long_arg,omitempty"`
	StringArg *string  `thrift:"string_arg,3" db:"string_arg" json:"string_arg,omitempty"`
	BoolArg   *bool    `thrift:"bool_arg,4" db:"bool_arg" json:"bool_arg,omitempty"`
	BinaryArg []byte   `thrift:"binary_arg,5" db:"binary_arg" json:"binary_arg,omitempty"`
	DoubleArg *float64 `thrift:"double_arg,6" db:"double_arg" json:"double_arg,omitempty"`
}

func NewJavaObjectArg() *JavaObjectArg {
	return &JavaObjectArg{}
}

var JavaObjectArg_IntArg_DEFAULT int32

func (p *JavaObjectArg) GetIntArg() int32 {
	if !p.IsSetIntArg() {
		return JavaObjectArg_IntArg_DEFAULT
	}
	return *p.IntArg
}

var JavaObjectArg_LongArg_DEFAULT int64

func (p *JavaObjectArg) GetLongArg() int64 {
	if !p.IsSetLongArg() {
		return JavaObjectArg_LongArg_DEFAULT
	}
	return *p.LongArg
}

var JavaObjectArg_StringArg_DEFAULT string

func (p *JavaObjectArg) GetStringArg() string {
	if !p.IsSetStringArg() {
		return JavaObjectArg_StringArg_DEFAULT
	}
	return *p.StringArg
}

var JavaObjectArg_BoolArg_DEFAULT bool

func (p *JavaObjectArg) GetBoolArg() bool {
	if !p.IsSetBoolArg() {
		return JavaObjectArg_BoolArg_DEFAULT
	}
	return *p.BoolArg
}

var JavaObjectArg_BinaryArg_DEFAULT []byte

func (p *JavaObjectArg) GetBinaryArg() []byte {
	return p.BinaryArg
}

var JavaObjectArg_DoubleArg_DEFAULT float64

func (p *JavaObjectArg) GetDoubleArg() float64 {
	if !p.IsSetDoubleArg() {
		return JavaObjectArg_DoubleArg_DEFAULT
	}
	return *p.DoubleArg
}

func (p *JavaObjectArg) CountSetFieldsJavaObjectArg() int {
	count := 0
	if p.IsSetIntArg() {
		count++
	}
	if p.IsSetLongArg() {
		count++
	}
	if p.IsSetStringArg() {
		count++
	}
	if p.IsSetBoolArg() {
		count++
	}
	if p.IsSetBinaryArg() {
		count++
	}
	if p.IsSetDoubleArg() {
		count++
	}
	return count

}

func (p *JavaObjectArg) IsSetIntArg() bool {
	return p.IntArg != nil
}

func (p *JavaObjectArg) IsSetLongArg() bool {
	return p.LongArg != nil
}

func (p *JavaObjectArg) IsSetStringArg() bool {
	return p.StringArg != nil
}

func (p *JavaObjectArg) IsSetBoolArg() bool {
	return p.BoolArg != nil
}

func (p *JavaObjectArg) IsSetBinaryArg() bool {
	return p.BinaryArg != nil
}

func (p *JavaObjectArg) IsSetDoubleArg() bool {
	return p.DoubleArg != nil
}

func (p *JavaObjectArg) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *JavaObjectArg) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IntArg = &v
	}
	return nil
}

func (p *JavaObjectArg) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LongArg = &v
	}
	return nil
}

func (p *JavaObjectArg) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StringArg = &v
	}
	return nil
}

func (p *JavaObjectArg) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.BoolArg = &v
	}
	return nil
}

func (p *JavaObjectArg) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BinaryArg = v
	}
	return nil
}

func (p *JavaObjectArg) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.DoubleArg = &v
	}
	return nil
}

func (p *JavaObjectArg) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsJavaObjectArg(); c != 1 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("%T write union: exactly one field must be set (%d set)", p, c))
	}
	if err := oprot.WriteStructBegin(ctx, "JavaObjectArg"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JavaObjectArg) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIntArg() {
		if err := oprot.WriteFieldBegin(ctx, "int_arg", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:int_arg: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.IntArg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.int_arg (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:int_arg: ", p), err)
		}
	}
	return err
}

func (p *JavaObjectArg) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetLongArg() {
		if err := oprot.WriteFieldBegin(ctx, "long_arg", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:long_arg: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.LongArg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.long_arg (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:long_arg: ", p), err)
		}
	}
	return err
}

func (p *JavaObjectArg) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetStringArg() {
		if err := oprot.WriteFieldBegin(ctx, "string_arg", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:string_arg: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.StringArg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.string_arg (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:string_arg: ", p), err)
		}
	}
	return err
}

func (p *JavaObjectArg) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBoolArg() {
		if err := oprot.WriteFieldBegin(ctx, "bool_arg", thrift.BOOL, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:bool_arg: ", p), err)
		}
		if err := oprot.WriteBool(ctx, bool(*p.BoolArg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bool_arg (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:bool_arg: ", p), err)
		}
	}
	return err
}

func (p *JavaObjectArg) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBinaryArg() {
		if err := oprot.WriteFieldBegin(ctx, "binary_arg", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:binary_arg: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.BinaryArg); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.binary_arg (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:binary_arg: ", p), err)
		}
	}
	return err
}

func (p *JavaObjectArg) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDoubleArg() {
		if err := oprot.WriteFieldBegin(ctx, "double_arg", thrift.DOUBLE, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:double_arg: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.DoubleArg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.double_arg (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:double_arg: ", p), err)
		}
	}
	return err
}

func (p *JavaObjectArg) Equals(other *JavaObjectArg) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.IntArg != other.IntArg {
		if p.IntArg == nil || other.IntArg == nil {
			return false
		}
		if (*p.IntArg) != (*other.IntArg) {
			return false
		}
	}
	if p.LongArg != other.LongArg {
		if p.LongArg == nil || other.LongArg == nil {
			return false
		}
		if (*p.LongArg) != (*other.LongArg) {
			return false
		}
	}
	if p.StringArg != other.StringArg {
		if p.StringArg == nil || other.StringArg == nil {
			return false
		}
		if (*p.StringArg) != (*other.StringArg) {
			return false
		}
	}
	if p.BoolArg != other.BoolArg {
		if p.BoolArg == nil || other.BoolArg == nil {
			return false
		}
		if (*p.BoolArg) != (*other.BoolArg) {
			return false
		}
	}
	if bytes.Compare(p.BinaryArg, other.BinaryArg) != 0 {
		return false
	}
	if p.DoubleArg != other.DoubleArg {
		if p.DoubleArg == nil || other.DoubleArg == nil {
			return false
		}
		if (*p.DoubleArg) != (*other.DoubleArg) {
			return false
		}
	}
	return true
}

func (p *JavaObjectArg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JavaObjectArg(%+v)", *p)
}

func (p *JavaObjectArg) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.JavaObjectArg",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*JavaObjectArg)(nil)

func (p *JavaObjectArg) Validate() error {
	return nil
}

// Attributes:
//   - FullClassName
//   - ArgsList
type JavaObject struct {
	FullClassName string           `thrift:"full_class_name,1,required" db:"full_class_name" json:"full_class_name"`
	ArgsList      []*JavaObjectArg `thrift:"args_list,2,required" db:"args_list" json:"args_list"`
}

func NewJavaObject() *JavaObject {
	return &JavaObject{}
}

func (p *JavaObject) GetFullClassName() string {
	return p.FullClassName
}

func (p *JavaObject) GetArgsList() []*JavaObjectArg {
	return p.ArgsList
}

func (p *JavaObject) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetFullClassName bool = false
	var issetArgsList bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetFullClassName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetArgsList = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetFullClassName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FullClassName is not set"))
	}
	if !issetArgsList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ArgsList is not set"))
	}
	return nil
}

func (p *JavaObject) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FullClassName = v
	}
	return nil
}

func (p *JavaObject) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*JavaObjectArg, 0, size)
	p.ArgsList = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &JavaObjectArg{}
		if err := _elem0.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.ArgsList = append(p.ArgsList, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *JavaObject) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "JavaObject"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JavaObject) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "full_class_name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:full_class_name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.FullClassName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.full_class_name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:full_class_name: ", p), err)
	}
	return err
}

func (p *JavaObject) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "args_list", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:args_list: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ArgsList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ArgsList {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:args_list: ", p), err)
	}
	return err
}

func (p *JavaObject) Equals(other *JavaObject) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.FullClassName != other.FullClassName {
		return false
	}
	if len(p.ArgsList) != len(other.ArgsList) {
		return false
	}
	for i, _tgt := range p.ArgsList {
		_src1 := other.ArgsList[i]
		if !_tgt.Equals(_src1) {
			return false
		}
	}
	return true
}

func (p *JavaObject) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JavaObject(%+v)", *p)
}

func (p *JavaObject) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.JavaObject",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*JavaObject)(nil)

func (p *JavaObject) Validate() error {
	return nil
}

type NullStruct struct {
}

func NewNullStruct() *NullStruct {
	return &NullStruct{}
}

func (p *NullStruct) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NullStruct) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "NullStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NullStruct) Equals(other *NullStruct) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *NullStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NullStruct(%+v)", *p)
}

func (p *NullStruct) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NullStruct",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NullStruct)(nil)

func (p *NullStruct) Validate() error {
	return nil
}

// Attributes:
//   - ComponentId
//   - StreamId
type GlobalStreamId struct {
	ComponentId string `thrift:"componentId,1,required" db:"componentId" json:"componentId"`
	StreamId    string `thrift:"streamId,2,required" db:"streamId" json:"streamId"`
}

func NewGlobalStreamId() *GlobalStreamId {
	return &GlobalStreamId{}
}

func (p *GlobalStreamId) GetComponentId() string {
	return p.ComponentId
}

func (p *GlobalStreamId) GetStreamId() string {
	return p.StreamId
}

func (p *GlobalStreamId) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetComponentId bool = false
	var issetStreamId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetComponentId = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetStreamId = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetComponentId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComponentId is not set"))
	}
	if !issetStreamId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StreamId is not set"))
	}
	return nil
}

func (p *GlobalStreamId) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ComponentId = v
	}
	return nil
}

func (p *GlobalStreamId) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StreamId = v
	}
	return nil
}

func (p *GlobalStreamId) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GlobalStreamId"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GlobalStreamId) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "componentId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:componentId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ComponentId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.componentId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:componentId: ", p), err)
	}
	return err
}

func (p *GlobalStreamId) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "streamId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:streamId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.StreamId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.streamId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:streamId: ", p), err)
	}
	return err
}

func (p *GlobalStreamId) Equals(other *GlobalStreamId) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ComponentId != other.ComponentId {
		return false
	}
	if p.StreamId != other.StreamId {
		return false
	}
	return true
}

func (p *GlobalStreamId) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GlobalStreamId(%+v)", *p)
}

func (p *GlobalStreamId) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.GlobalStreamId",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*GlobalStreamId)(nil)

func (p *GlobalStreamId) Validate() error {
	return nil
}

// Attributes:
//   - Fields
//   - Shuffle
//   - All
//   - None
//   - Direct
//   - CustomObject
//   - CustomSerialized
//   - LocalOrShuffle
type Grouping struct {
	Fields           []string    `thrift:"fields,1" db:"fields" json:"fields,omitempty"`
	Shuffle          *NullStruct `thrift:"shuffle,2" db:"shuffle" json:"shuffle,omitempty"`
	All              *NullStruct `thrift:"all,3" db:"all" json:"all,omitempty"`
	None             *NullStruct `thrift:"none,4" db:"none" json:"none,omitempty"`
	Direct           *NullStruct `thrift:"direct,5" db:"direct" json:"direct,omitempty"`
	CustomObject     *JavaObject `thrift:"custom_object,6" db:"custom_object" json:"custom_object,omitempty"`
	CustomSerialized []byte      `thrift:"custom_serialized,7" db:"custom_serialized" json:"custom_serialized,omitempty"`
	LocalOrShuffle   *NullStruct `thrift:"local_or_shuffle,8" db:"local_or_shuffle" json:"local_or_shuffle,omitempty"`
}

func NewGrouping() *Grouping {
	return &Grouping{}
}

var Grouping_Fields_DEFAULT []string

func (p *Grouping) GetFields() []string {
	return p.Fields
}

var Grouping_Shuffle_DEFAULT *NullStruct

func (p *Grouping) GetShuffle() *NullStruct {
	if !p.IsSetShuffle() {
		return Grouping_Shuffle_DEFAULT
	}
	return p.Shuffle
}

var Grouping_All_DEFAULT *NullStruct

func (p *Grouping) GetAll() *NullStruct {
	if !p.IsSetAll() {
		return Grouping_All_DEFAULT
	}
	return p.All
}

var Grouping_None_DEFAULT *NullStruct

func (p *Grouping) GetNone() *NullStruct {
	if !p.IsSetNone() {
		return Grouping_None_DEFAULT
	}
	return p.None
}

var Grouping_Direct_DEFAULT *NullStruct

func (p *Grouping) GetDirect() *NullStruct {
	if !p.IsSetDirect() {
		return Grouping_Direct_DEFAULT
	}
	return p.Direct
}

var Grouping_CustomObject_DEFAULT *JavaObject

func (p *Grouping) GetCustomObject() *JavaObject {
	if !p.IsSetCustomObject() {
		return Grouping_CustomObject_DEFAULT
	}
	return p.CustomObject
}

var Grouping_CustomSerialized_DEFAULT []byte

func (p *Grouping) GetCustomSerialized() []byte {
	return p.CustomSerialized
}

var Grouping_LocalOrShuffle_DEFAULT *NullStruct

func (p *Grouping) GetLocalOrShuffle() *NullStruct {
	if !p.IsSetLocalOrShuffle() {
		return Grouping_LocalOrShuffle_DEFAULT
	}
	return p.LocalOrShuffle
}

func (p *Grouping) CountSetFieldsGrouping() int {
	count := 0
	if p.IsSetFields() {
		count++
	}
	if p.IsSetShuffle() {
		count++
	}
	if p.IsSetAll() {
		count++
	}
	if p.IsSetNone() {
		count++
	}
	if p.IsSetDirect() {
		count++
	}
	if p.IsSetCustomObject() {
		count++
	}
	if p.IsSetCustomSerialized() {
		count++
	}
	if p.IsSetLocalOrShuffle() {
		count++
	}
	return count

}

func (p *Grouping) IsSetFields() bool {
	return p.Fields != nil
}

func (p *Grouping) IsSetShuffle() bool {
	return p.Shuffle != nil
}

func (p *Grouping) IsSetAll() bool {
	return p.All != nil
}

func (p *Grouping) IsSetNone() bool {
	return p.None != nil
}

func (p *Grouping) IsSetDirect() bool {
	return p.Direct != nil
}

func (p *Grouping) IsSetCustomObject() bool {
	return p.CustomObject != nil
}

func (p *Grouping) IsSetCustomSerialized() bool {
	return p.CustomSerialized != nil
}

func (p *Grouping) IsSetLocalOrShuffle() bool {
	return p.LocalOrShuffle != nil
}

func (p *Grouping) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Grouping) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Fields = tSlice
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.Fields = append(p.Fields, _elem2)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Grouping) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Shuffle = &NullStruct{}
	if err := p.Shuffle.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Shuffle), err)
	}
	return nil
}

func (p *Grouping) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.All = &NullStruct{}
	if err := p.All.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.All), err)
	}
	return nil
}

func (p *Grouping) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.None = &NullStruct{}
	if err := p.None.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.None), err)
	}
	return nil
}

func (p *Grouping) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	p.Direct = &NullStruct{}
	if err := p.Direct.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Direct), err)
	}
	return nil
}

func (p *Grouping) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	p.CustomObject = &JavaObject{}
	if err := p.CustomObject.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CustomObject), err)
	}
	return nil
}

func (p *Grouping) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.CustomSerialized = v
	}
	return nil
}

func (p *Grouping) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	p.LocalOrShuffle = &NullStruct{}
	if err := p.LocalOrShuffle.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LocalOrShuffle), err)
	}
	return nil
}

func (p *Grouping) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsGrouping(); c != 1 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("%T write union: exactly one field must be set (%d set)", p, c))
	}
	if err := oprot.WriteStructBegin(ctx, "Grouping"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Grouping) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFields() {
		if err := oprot.WriteFieldBegin(ctx, "fields", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fields: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Fields)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Fields {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fields: ", p), err)
		}
	}
	return err
}

func (p *Grouping) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetShuffle() {
		if err := oprot.WriteFieldBegin(ctx, "shuffle", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:shuffle: ", p), err)
		}
		if err := p.Shuffle.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Shuffle), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:shuffle: ", p), err)
		}
	}
	return err
}

func (p *Grouping) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAll() {
		if err := oprot.WriteFieldBegin(ctx, "all", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:all: ", p), err)
		}
		if err := p.All.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.All), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:all: ", p), err)
		}
	}
	return err
}

func (p *Grouping) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNone() {
		if err := oprot.WriteFieldBegin(ctx, "none", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:none: ", p), err)
		}
		if err := p.None.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.None), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:none: ", p), err)
		}
	}
	return err
}

func (p *Grouping) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDirect() {
		if err := oprot.WriteFieldBegin(ctx, "direct", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:direct: ", p), err)
		}
		if err := p.Direct.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Direct), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:direct: ", p), err)
		}
	}
	return err
}

func (p *Grouping) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCustomObject() {
		if err := oprot.WriteFieldBegin(ctx, "custom_object", thrift.STRUCT, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:custom_object: ", p), err)
		}
		if err := p.CustomObject.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CustomObject), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:custom_object: ", p), err)
		}
	}
	return err
}

func (p *Grouping) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCustomSerialized() {
		if err := oprot.WriteFieldBegin(ctx, "custom_serialized", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:custom_serialized: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.CustomSerialized); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.custom_serialized (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:custom_serialized: ", p), err)
		}
	}
	return err
}

func (p *Grouping) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetLocalOrShuffle() {
		if err := oprot.WriteFieldBegin(ctx, "local_or_shuffle", thrift.STRUCT, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:local_or_shuffle: ", p), err)
		}
		if err := p.LocalOrShuffle.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LocalOrShuffle), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:local_or_shuffle: ", p), err)
		}
	}
	return err
}

func (p *Grouping) Equals(other *Grouping) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Fields) != len(other.Fields) {
		return false
	}
	for i, _tgt := range p.Fields {
		_src3 := other.Fields[i]
		if _tgt != _src3 {
			return false
		}
	}
	if !p.Shuffle.Equals(other.Shuffle) {
		return false
	}
	if !p.All.Equals(other.All) {
		return false
	}
	if !p.None.Equals(other.None) {
		return false
	}
	if !p.Direct.Equals(other.Direct) {
		return false
	}
	if !p.CustomObject.Equals(other.CustomObject) {
		return false
	}
	if bytes.Compare(p.CustomSerialized, other.CustomSerialized) != 0 {
		return false
	}
	if !p.LocalOrShuffle.Equals(other.LocalOrShuffle) {
		return false
	}
	return true
}

func (p *Grouping) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Grouping(%+v)", *p)
}

func (p *Grouping) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.Grouping",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*Grouping)(nil)

func (p *Grouping) Validate() error {
	return nil
}

// Attributes:
//   - OutputFields
//   - Direct
type StreamInfo struct {
	OutputFields []string `thrift:"output_fields,1,required" db:"output_fields" json:"output_fields"`
	Direct       bool     `thrift:"direct,2,required" db:"direct" json:"direct"`
}

func NewStreamInfo() *StreamInfo {
	return &StreamInfo{}
}

func (p *StreamInfo) GetOutputFields() []string {
	return p.OutputFields
}

func (p *StreamInfo) GetDirect() bool {
	return p.Direct
}

func (p *StreamInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetOutputFields bool = false
	var issetDirect bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetOutputFields = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetDirect = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetOutputFields {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OutputFields is not set"))
	}
	if !issetDirect {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Direct is not set"))
	}
	return nil
}

func (p *StreamInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.OutputFields = tSlice
	for i := 0; i < size; i++ {
		var _elem4 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.OutputFields = append(p.OutputFields, _elem4)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *StreamInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Direct = v
	}
	return nil
}

func (p *StreamInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "StreamInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StreamInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "output_fields", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:output_fields: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.OutputFields)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.OutputFields {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:output_fields: ", p), err)
	}
	return err
}

func (p *StreamInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "direct", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:direct: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Direct)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.direct (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:direct: ", p), err)
	}
	return err
}

func (p *StreamInfo) Equals(other *StreamInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.OutputFields) != len(other.OutputFields) {
		return false
	}
	for i, _tgt := range p.OutputFields {
		_src5 := other.OutputFields[i]
		if _tgt != _src5 {
			return false
		}
	}
	if p.Direct != other.Direct {
		return false
	}
	return true
}

func (p *StreamInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StreamInfo(%+v)", *p)
}

func (p *StreamInfo) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.StreamInfo",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*StreamInfo)(nil)

func (p *StreamInfo) Validate() error {
	return nil
}

// Attributes:
//   - ExecutionCommand
//   - Script
type ShellComponent struct {
	ExecutionCommand string `thrift:"execution_command,1" db:"execution_command" json:"execution_command"`
	Script           string `thrift:"script,2" db:"script" json:"script"`
}

func NewShellComponent() *ShellComponent {
	return &ShellComponent{}
}

func (p *ShellComponent) GetExecutionCommand() string {
	return p.ExecutionCommand
}

func (p *ShellComponent) GetScript() string {
	return p.Script
}

func (p *ShellComponent) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ShellComponent) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExecutionCommand = v
	}
	return nil
}

func (p *ShellComponent) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Script = v
	}
	return nil
}

func (p *ShellComponent) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ShellComponent"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShellComponent) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "execution_command", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:execution_command: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ExecutionCommand)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.execution_command (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:execution_command: ", p), err)
	}
	return err
}

func (p *ShellComponent) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "script", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:script: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Script)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.script (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:script: ", p), err)
	}
	return err
}

func (p *ShellComponent) Equals(other *ShellComponent) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ExecutionCommand != other.ExecutionCommand {
		return false
	}
	if p.Script != other.Script {
		return false
	}
	return true
}

func (p *ShellComponent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShellComponent(%+v)", *p)
}

func (p *ShellComponent) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.ShellComponent",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ShellComponent)(nil)

func (p *ShellComponent) Validate() error {
	return nil
}

// Attributes:
//   - SerializedJava
//   - Shell
//   - JavaObject
type ComponentObject struct {
	SerializedJava []byte          `thrift:"serialized_java,1" db:"serialized_java" json:"serialized_java,omitempty"`
	Shell          *ShellComponent `thrift:"shell,2" db:"shell" json:"shell,omitempty"`
	JavaObject     *JavaObject     `thrift:"java_object,3" db:"java_object" json:"java_object,omitempty"`
}

func NewComponentObject() *ComponentObject {
	return &ComponentObject{}
}

var ComponentObject_SerializedJava_DEFAULT []byte

func (p *ComponentObject) GetSerializedJava() []byte {
	return p.SerializedJava
}

var ComponentObject_Shell_DEFAULT *ShellComponent

func (p *ComponentObject) GetShell() *ShellComponent {
	if !p.IsSetShell() {
		return ComponentObject_Shell_DEFAULT
	}
	return p.Shell
}

var ComponentObject_JavaObject_DEFAULT *JavaObject

func (p *ComponentObject) GetJavaObject() *JavaObject {
	if !p.IsSetJavaObject() {
		return ComponentObject_JavaObject_DEFAULT
	}
	return p.JavaObject
}

func (p *ComponentObject) CountSetFieldsComponentObject() int {
	count := 0
	if p.IsSetSerializedJava() {
		count++
	}
	if p.IsSetShell() {
		count++
	}
	if p.IsSetJavaObject() {
		count++
	}
	return count

}

func (p *ComponentObject) IsSetSerializedJava() bool {
	return p.SerializedJava != nil
}

func (p *ComponentObject) IsSetShell() bool {
	return p.Shell != nil
}

func (p *ComponentObject) IsSetJavaObject() bool {
	return p.JavaObject != nil
}

func (p *ComponentObject) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ComponentObject) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SerializedJava = v
	}
	return nil
}

func (p *ComponentObject) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Shell = &ShellComponent{}
	if err := p.Shell.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Shell), err)
	}
	return nil
}

func (p *ComponentObject) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.JavaObject = &JavaObject{}
	if err := p.JavaObject.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JavaObject), err)
	}
	return nil
}

func (p *ComponentObject) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsComponentObject(); c != 1 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("%T write union: exactly one field must be set (%d set)", p, c))
	}
	if err := oprot.WriteStructBegin(ctx, "ComponentObject"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ComponentObject) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSerializedJava() {
		if err := oprot.WriteFieldBegin(ctx, "serialized_java", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serialized_java: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.SerializedJava); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.serialized_java (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serialized_java: ", p), err)
		}
	}
	return err
}

func (p *ComponentObject) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetShell() {
		if err := oprot.WriteFieldBegin(ctx, "shell", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:shell: ", p), err)
		}
		if err := p.Shell.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Shell), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:shell: ", p), err)
		}
	}
	return err
}

func (p *ComponentObject) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetJavaObject() {
		if err := oprot.WriteFieldBegin(ctx, "java_object", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:java_object: ", p), err)
		}
		if err := p.JavaObject.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JavaObject), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:java_object: ", p), err)
		}
	}
	return err
}

func (p *ComponentObject) Equals(other *ComponentObject) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if bytes.Compare(p.SerializedJava, other.SerializedJava) != 0 {
		return false
	}
	if !p.Shell.Equals(other.Shell) {
		return false
	}
	if !p.JavaObject.Equals(other.JavaObject) {
		return false
	}
	return true
}

func (p *ComponentObject) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComponentObject(%+v)", *p)
}

func (p *ComponentObject) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.ComponentObject",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ComponentObject)(nil)

func (p *ComponentObject) Validate() error {
	return nil
}

// Attributes:
//   - Inputs
//   - Streams
//   - ParallelismHint
//   - JSONConf
type ComponentCommon struct {
	Inputs          map[*GlobalStreamId]*Grouping `thrift:"inputs,1,required" db:"inputs" json:"inputs"`
	Streams         map[string]*StreamInfo        `thrift:"streams,2,required" db:"streams" json:"streams"`
	ParallelismHint *int32                        `thrift:"parallelism_hint,3" db:"parallelism_hint" json:"parallelism_hint,omitempty"`
	JSONConf        *string                       `thrift:"json_conf,4" db:"json_conf" json:"json_conf,omitempty"`
}

func NewComponentCommon() *ComponentCommon {
	return &ComponentCommon{}
}

func (p *ComponentCommon) GetInputs() map[*GlobalStreamId]*Grouping {
	return p.Inputs
}

func (p *ComponentCommon) GetStreams() map[string]*StreamInfo {
	return p.Streams
}

var ComponentCommon_ParallelismHint_DEFAULT int32

func (p *ComponentCommon) GetParallelismHint() int32 {
	if !p.IsSetParallelismHint() {
		return ComponentCommon_ParallelismHint_DEFAULT
	}
	return *p.ParallelismHint
}

var ComponentCommon_JSONConf_DEFAULT string

func (p *ComponentCommon) GetJSONConf() string {
	if !p.IsSetJSONConf() {
		return ComponentCommon_JSONConf_DEFAULT
	}
	return *p.JSONConf
}

func (p *ComponentCommon) IsSetParallelismHint() bool {
	return p.ParallelismHint != nil
}

func (p *ComponentCommon) IsSetJSONConf() bool {
	return p.JSONConf != nil
}

func (p *ComponentCommon) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetInputs bool = false
	var issetStreams bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetInputs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetStreams = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetInputs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Inputs is not set"))
	}
	if !issetStreams {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Streams is not set"))
	}
	return nil
}

func (p *ComponentCommon) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[*GlobalStreamId]*Grouping, size)
	p.Inputs = tMap
	for i := 0; i < size; i++ {
		_key6 := &GlobalStreamId{}
		if err := _key6.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _key6), err)
		}
		_val7 := &Grouping{}
		if err := _val7.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val7), err)
		}
		p.Inputs[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ComponentCommon) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*StreamInfo, size)
	p.Streams = tMap
	for i := 0; i < size; i++ {
		var _key8 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key8 = v
		}
		_val9 := &StreamInfo{}
		if err := _val9.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val9), err)
		}
		p.Streams[_key8] = _val9
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ComponentCommon) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ParallelismHint = &v
	}
	return nil
}

func (p *ComponentCommon) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.JSONConf = &v
	}
	return nil
}

func (p *ComponentCommon) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ComponentCommon"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ComponentCommon) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "inputs", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inputs: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRUCT, thrift.STRUCT, len(p.Inputs)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Inputs {
		if err := k.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", k), err)
		}
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inputs: ", p), err)
	}
	return err
}

func (p *ComponentCommon) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "streams", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:streams: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Streams)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Streams {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:streams: ", p), err)
	}
	return err
}

func (p *ComponentCommon) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetParallelismHint() {
		if err := oprot.WriteFieldBegin(ctx, "parallelism_hint", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parallelism_hint: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.ParallelismHint)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.parallelism_hint (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parallelism_hint: ", p), err)
		}
	}
	return err
}

func (p *ComponentCommon) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetJSONConf() {
		if err := oprot.WriteFieldBegin(ctx, "json_conf", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:json_conf: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.JSONConf)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.json_conf (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:json_conf: ", p), err)
		}
	}
	return err
}

func (p *ComponentCommon) Equals(other *ComponentCommon) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Inputs) != len(other.Inputs) {
		return false
	}
	for k, _tgt := range p.Inputs {
		_src10 := other.Inputs[k]
		if !_tgt.Equals(_src10) {
			return false
		}
	}
	if len(p.Streams) != len(other.Streams) {
		return false
	}
	for k, _tgt := range p.Streams {
		_src11 := other.Streams[k]
		if !_tgt.Equals(_src11) {
			return false
		}
	}
	if p.ParallelismHint != other.ParallelismHint {
		if p.ParallelismHint == nil || other.ParallelismHint == nil {
			return false
		}
		if (*p.ParallelismHint) != (*other.ParallelismHint) {
			return false
		}
	}
	if p.JSONConf != other.JSONConf {
		if p.JSONConf == nil || other.JSONConf == nil {
			return false
		}
		if (*p.JSONConf) != (*other.JSONConf) {
			return false
		}
	}
	return true
}

func (p *ComponentCommon) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComponentCommon(%+v)", *p)
}

func (p *ComponentCommon) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.ComponentCommon",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ComponentCommon)(nil)

func (p *ComponentCommon) Validate() error {
	return nil
}

// Attributes:
//   - SpoutObject
//   - Common
type SpoutSpec struct {
	SpoutObject *ComponentObject `thrift:"spout_object,1,required" db:"spout_object" json:"spout_object"`
	Common      *ComponentCommon `thrift:"common,2,required" db:"common" json:"common"`
}

func NewSpoutSpec() *SpoutSpec {
	return &SpoutSpec{}
}

var SpoutSpec_SpoutObject_DEFAULT *ComponentObject

func (p *SpoutSpec) GetSpoutObject() *ComponentObject {
	if !p.IsSetSpoutObject() {
		return SpoutSpec_SpoutObject_DEFAULT
	}
	return p.SpoutObject
}

var SpoutSpec_Common_DEFAULT *ComponentCommon

func (p *SpoutSpec) GetCommon() *ComponentCommon {
	if !p.IsSetCommon() {
		return SpoutSpec_Common_DEFAULT
	}
	return p.Common
}

func (p *SpoutSpec) IsSetSpoutObject() bool {
	return p.SpoutObject != nil
}

func (p *SpoutSpec) IsSetCommon() bool {
	return p.Common != nil
}

func (p *SpoutSpec) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSpoutObject bool = false
	var issetCommon bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSpoutObject = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetCommon = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSpoutObject {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SpoutObject is not set"))
	}
	if !issetCommon {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Common is not set"))
	}
	return nil
}

func (p *SpoutSpec) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.SpoutObject = &ComponentObject{}
	if err := p.SpoutObject.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SpoutObject), err)
	}
	return nil
}

func (p *SpoutSpec) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Common = &ComponentCommon{}
	if err := p.Common.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
	}
	return nil
}

func (p *SpoutSpec) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpoutSpec"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SpoutSpec) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "spout_object", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spout_object: ", p), err)
	}
	if err := p.SpoutObject.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SpoutObject), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spout_object: ", p), err)
	}
	return err
}

func (p *SpoutSpec) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:common: ", p), err)
	}
	if err := p.Common.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:common: ", p), err)
	}
	return err
}

func (p *SpoutSpec) Equals(other *SpoutSpec) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.SpoutObject.Equals(other.SpoutObject) {
		return false
	}
	if !p.Common.Equals(other.Common) {
		return false
	}
	return true
}

func (p *SpoutSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpoutSpec(%+v)", *p)
}

func (p *SpoutSpec) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SpoutSpec",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SpoutSpec)(nil)

func (p *SpoutSpec) Validate() error {
	return nil
}

// Attributes:
//   - BoltObject
//   - Common
type Bolt struct {
	BoltObject *ComponentObject `thrift:"bolt_object,1,required" db:"bolt_object" json:"bolt_object"`
	Common     *ComponentCommon `thrift:"common,2,required" db:"common" json:"common"`
}

func NewBolt() *Bolt {
	return &Bolt{}
}

var Bolt_BoltObject_DEFAULT *ComponentObject

func (p *Bolt) GetBoltObject() *ComponentObject {
	if !p.IsSetBoltObject() {
		return Bolt_BoltObject_DEFAULT
	}
	return p.BoltObject
}

var Bolt_Common_DEFAULT *ComponentCommon

func (p *Bolt) GetCommon() *ComponentCommon {
	if !p.IsSetCommon() {
		return Bolt_Common_DEFAULT
	}
	return p.Common
}

func (p *Bolt) IsSetBoltObject() bool {
	return p.BoltObject != nil
}

func (p *Bolt) IsSetCommon() bool {
	return p.Common != nil
}

func (p *Bolt) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetBoltObject bool = false
	var issetCommon bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetBoltObject = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetCommon = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetBoltObject {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BoltObject is not set"))
	}
	if !issetCommon {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Common is not set"))
	}
	return nil
}

func (p *Bolt) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.BoltObject = &ComponentObject{}
	if err := p.BoltObject.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BoltObject), err)
	}
	return nil
}

func (p *Bolt) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Common = &ComponentCommon{}
	if err := p.Common.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
	}
	return nil
}

func (p *Bolt) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Bolt"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Bolt) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "bolt_object", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bolt_object: ", p), err)
	}
	if err := p.BoltObject.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BoltObject), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bolt_object: ", p), err)
	}
	return err
}

func (p *Bolt) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:common: ", p), err)
	}
	if err := p.Common.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:common: ", p), err)
	}
	return err
}

func (p *Bolt) Equals(other *Bolt) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.BoltObject.Equals(other.BoltObject) {
		return false
	}
	if !p.Common.Equals(other.Common) {
		return false
	}
	return true
}

func (p *Bolt) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Bolt(%+v)", *p)
}

func (p *Bolt) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.Bolt",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*Bolt)(nil)

func (p *Bolt) Validate() error {
	return nil
}

// Attributes:
//   - StateSpoutObject
//   - Common
type StateSpoutSpec struct {
	StateSpoutObject *ComponentObject `thrift:"state_spout_object,1,required" db:"state_spout_object" json:"state_spout_object"`
	Common           *ComponentCommon `thrift:"common,2,required" db:"common" json:"common"`
}

func NewStateSpoutSpec() *StateSpoutSpec {
	return &StateSpoutSpec{}
}

var StateSpoutSpec_StateSpoutObject_DEFAULT *ComponentObject

func (p *StateSpoutSpec) GetStateSpoutObject() *ComponentObject {
	if !p.IsSetStateSpoutObject() {
		return StateSpoutSpec_StateSpoutObject_DEFAULT
	}
	return p.StateSpoutObject
}

var StateSpoutSpec_Common_DEFAULT *ComponentCommon

func (p *StateSpoutSpec) GetCommon() *ComponentCommon {
	if !p.IsSetCommon() {
		return StateSpoutSpec_Common_DEFAULT
	}
	return p.Common
}

func (p *StateSpoutSpec) IsSetStateSpoutObject() bool {
	return p.StateSpoutObject != nil
}

func (p *StateSpoutSpec) IsSetCommon() bool {
	return p.Common != nil
}

func (p *StateSpoutSpec) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStateSpoutObject bool = false
	var issetCommon bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetStateSpoutObject = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetCommon = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStateSpoutObject {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StateSpoutObject is not set"))
	}
	if !issetCommon {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Common is not set"))
	}
	return nil
}

func (p *StateSpoutSpec) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.StateSpoutObject = &ComponentObject{}
	if err := p.StateSpoutObject.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StateSpoutObject), err)
	}
	return nil
}

func (p *StateSpoutSpec) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Common = &ComponentCommon{}
	if err := p.Common.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
	}
	return nil
}

func (p *StateSpoutSpec) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "StateSpoutSpec"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StateSpoutSpec) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "state_spout_object", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:state_spout_object: ", p), err)
	}
	if err := p.StateSpoutObject.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StateSpoutObject), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:state_spout_object: ", p), err)
	}
	return err
}

func (p *StateSpoutSpec) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:common: ", p), err)
	}
	if err := p.Common.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:common: ", p), err)
	}
	return err
}

func (p *StateSpoutSpec) Equals(other *StateSpoutSpec) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.StateSpoutObject.Equals(other.StateSpoutObject) {
		return false
	}
	if !p.Common.Equals(other.Common) {
		return false
	}
	return true
}

func (p *StateSpoutSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StateSpoutSpec(%+v)", *p)
}

func (p *StateSpoutSpec) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.StateSpoutSpec",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*StateSpoutSpec)(nil)

func (p *StateSpoutSpec) Validate() error {
	return nil
}

// Attributes:
//   - Name
//   - OnHeap
//   - OffHeapWorker
//   - OffHeapNode
type SharedMemory struct {
	Name          string   `thrift:"name,1,required" db:"name" json:"name"`
	OnHeap        *float64 `thrift:"on_heap,2" db:"on_heap" json:"on_heap,omitempty"`
	OffHeapWorker *float64 `thrift:"off_heap_worker,3" db:"off_heap_worker" json:"off_heap_worker,omitempty"`
	OffHeapNode   *float64 `thrift:"off_heap_node,4" db:"off_heap_node" json:"off_heap_node,omitempty"`
}

func NewSharedMemory() *SharedMemory {
	return &SharedMemory{}
}

func (p *SharedMemory) GetName() string {
	return p.Name
}

var SharedMemory_OnHeap_DEFAULT float64

func (p *SharedMemory) GetOnHeap() float64 {
	if !p.IsSetOnHeap() {
		return SharedMemory_OnHeap_DEFAULT
	}
	return *p.OnHeap
}

var SharedMemory_OffHeapWorker_DEFAULT float64

func (p *SharedMemory) GetOffHeapWorker() float64 {
	if !p.IsSetOffHeapWorker() {
		return SharedMemory_OffHeapWorker_DEFAULT
	}
	return *p.OffHeapWorker
}

var SharedMemory_OffHeapNode_DEFAULT float64

func (p *SharedMemory) GetOffHeapNode() float64 {
	if !p.IsSetOffHeapNode() {
		return SharedMemory_OffHeapNode_DEFAULT
	}
	return *p.OffHeapNode
}

func (p *SharedMemory) IsSetOnHeap() bool {
	return p.OnHeap != nil
}

func (p *SharedMemory) IsSetOffHeapWorker() bool {
	return p.OffHeapWorker != nil
}

func (p *SharedMemory) IsSetOffHeapNode() bool {
	return p.OffHeapNode != nil
}

func (p *SharedMemory) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	return nil
}

func (p *SharedMemory) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *SharedMemory) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OnHeap = &v
	}
	return nil
}

func (p *SharedMemory) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OffHeapWorker = &v
	}
	return nil
}

func (p *SharedMemory) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.OffHeapNode = &v
	}
	return nil
}

func (p *SharedMemory) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SharedMemory"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SharedMemory) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *SharedMemory) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOnHeap() {
		if err := oprot.WriteFieldBegin(ctx, "on_heap", thrift.DOUBLE, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:on_heap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.OnHeap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.on_heap (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:on_heap: ", p), err)
		}
	}
	return err
}

func (p *SharedMemory) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOffHeapWorker() {
		if err := oprot.WriteFieldBegin(ctx, "off_heap_worker", thrift.DOUBLE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:off_heap_worker: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.OffHeapWorker)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.off_heap_worker (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:off_heap_worker: ", p), err)
		}
	}
	return err
}

func (p *SharedMemory) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOffHeapNode() {
		if err := oprot.WriteFieldBegin(ctx, "off_heap_node", thrift.DOUBLE, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:off_heap_node: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.OffHeapNode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.off_heap_node (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:off_heap_node: ", p), err)
		}
	}
	return err
}

func (p *SharedMemory) Equals(other *SharedMemory) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Name != other.Name {
		return false
	}
	if p.OnHeap != other.OnHeap {
		if p.OnHeap == nil || other.OnHeap == nil {
			return false
		}
		if (*p.OnHeap) != (*other.OnHeap) {
			return false
		}
	}
	if p.OffHeapWorker != other.OffHeapWorker {
		if p.OffHeapWorker == nil || other.OffHeapWorker == nil {
			return false
		}
		if (*p.OffHeapWorker) != (*other.OffHeapWorker) {
			return false
		}
	}
	if p.OffHeapNode != other.OffHeapNode {
		if p.OffHeapNode == nil || other.OffHeapNode == nil {
			return false
		}
		if (*p.OffHeapNode) != (*other.OffHeapNode) {
			return false
		}
	}
	return true
}

func (p *SharedMemory) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SharedMemory(%+v)", *p)
}

func (p *SharedMemory) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SharedMemory",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SharedMemory)(nil)

func (p *SharedMemory) Validate() error {
	return nil
}

// Attributes:
//   - Spouts
//   - Bolts
//   - StateSpouts
//   - WorkerHooks
//   - DependencyJars
//   - DependencyArtifacts
//   - StormVersion
//   - JdkVersion
//   - ComponentToSharedMemory
//   - SharedMemory
type StormTopology struct {
	Spouts                  map[string]*SpoutSpec      `thrift:"spouts,1,required" db:"spouts" json:"spouts"`
	Bolts                   map[string]*Bolt           `thrift:"bolts,2,required" db:"bolts" json:"bolts"`
	StateSpouts             map[string]*StateSpoutSpec `thrift:"state_spouts,3,required" db:"state_spouts" json:"state_spouts"`
	WorkerHooks             [][]byte                   `thrift:"worker_hooks,4" db:"worker_hooks" json:"worker_hooks,omitempty"`
	DependencyJars          []string                   `thrift:"dependency_jars,5" db:"dependency_jars" json:"dependency_jars,omitempty"`
	DependencyArtifacts     []string                   `thrift:"dependency_artifacts,6" db:"dependency_artifacts" json:"dependency_artifacts,omitempty"`
	StormVersion            *string                    `thrift:"storm_version,7" db:"storm_version" json:"storm_version,omitempty"`
	JdkVersion              *string                    `thrift:"jdk_version,8" db:"jdk_version" json:"jdk_version,omitempty"`
	ComponentToSharedMemory map[string][]string        `thrift:"component_to_shared_memory,9" db:"component_to_shared_memory" json:"component_to_shared_memory,omitempty"`
	SharedMemory            map[string]*SharedMemory   `thrift:"shared_memory,10" db:"shared_memory" json:"shared_memory,omitempty"`
}

func NewStormTopology() *StormTopology {
	return &StormTopology{}
}

func (p *StormTopology) GetSpouts() map[string]*SpoutSpec {
	return p.Spouts
}

func (p *StormTopology) GetBolts() map[string]*Bolt {
	return p.Bolts
}

func (p *StormTopology) GetStateSpouts() map[string]*StateSpoutSpec {
	return p.StateSpouts
}

var StormTopology_WorkerHooks_DEFAULT [][]byte

func (p *StormTopology) GetWorkerHooks() [][]byte {
	return p.WorkerHooks
}

var StormTopology_DependencyJars_DEFAULT []string

func (p *StormTopology) GetDependencyJars() []string {
	return p.DependencyJars
}

var StormTopology_DependencyArtifacts_DEFAULT []string

func (p *StormTopology) GetDependencyArtifacts() []string {
	return p.DependencyArtifacts
}

var StormTopology_StormVersion_DEFAULT string

func (p *StormTopology) GetStormVersion() string {
	if !p.IsSetStormVersion() {
		return StormTopology_StormVersion_DEFAULT
	}
	return *p.StormVersion
}

var StormTopology_JdkVersion_DEFAULT string

func (p *StormTopology) GetJdkVersion() string {
	if !p.IsSetJdkVersion() {
		return StormTopology_JdkVersion_DEFAULT
	}
	return *p.JdkVersion
}

var StormTopology_ComponentToSharedMemory_DEFAULT map[string][]string

func (p *StormTopology) GetComponentToSharedMemory() map[string][]string {
	return p.ComponentToSharedMemory
}

var StormTopology_SharedMemory_DEFAULT map[string]*SharedMemory

func (p *StormTopology) GetSharedMemory() map[string]*SharedMemory {
	return p.SharedMemory
}

func (p *StormTopology) IsSetWorkerHooks() bool {
	return p.WorkerHooks != nil
}

func (p *StormTopology) IsSetDependencyJars() bool {
	return p.DependencyJars != nil
}

func (p *StormTopology) IsSetDependencyArtifacts() bool {
	return p.DependencyArtifacts != nil
}

func (p *StormTopology) IsSetStormVersion() bool {
	return p.StormVersion != nil
}

func (p *StormTopology) IsSetJdkVersion() bool {
	return p.JdkVersion != nil
}

func (p *StormTopology) IsSetComponentToSharedMemory() bool {
	return p.ComponentToSharedMemory != nil
}

func (p *StormTopology) IsSetSharedMemory() bool {
	return p.SharedMemory != nil
}

func (p *StormTopology) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSpouts bool = false
	var issetBolts bool = false
	var issetStateSpouts bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSpouts = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetBolts = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetStateSpouts = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSpouts {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Spouts is not set"))
	}
	if !issetBolts {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Bolts is not set"))
	}
	if !issetStateSpouts {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StateSpouts is not set"))
	}
	return nil
}

func (p *StormTopology) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*SpoutSpec, size)
	p.Spouts = tMap
	for i := 0; i < size; i++ {
		var _key12 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key12 = v
		}
		_val13 := &SpoutSpec{}
		if err := _val13.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val13), err)
		}
		p.Spouts[_key12] = _val13
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *StormTopology) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*Bolt, size)
	p.Bolts = tMap
	for i := 0; i < size; i++ {
		var _key14 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key14 = v
		}
		_val15 := &Bolt{}
		if err := _val15.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val15), err)
		}
		p.Bolts[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *StormTopology) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*StateSpoutSpec, size)
	p.StateSpouts = tMap
	for i := 0; i < size; i++ {
		var _key16 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key16 = v
		}
		_val17 := &StateSpoutSpec{}
		if err := _val17.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val17), err)
		}
		p.StateSpouts[_key16] = _val17
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *StormTopology) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.WorkerHooks = tSlice
	for i := 0; i < size; i++ {
		var _elem18 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem18 = v
		}
		p.WorkerHooks = append(p.WorkerHooks, _elem18)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *StormTopology) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.DependencyJars = tSlice
	for i := 0; i < size; i++ {
		var _elem19 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem19 = v
		}
		p.DependencyJars = append(p.DependencyJars, _elem19)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *StormTopology) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.DependencyArtifacts = tSlice
	for i := 0; i < size; i++ {
		var _elem20 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem20 = v
		}
		p.DependencyArtifacts = append(p.DependencyArtifacts, _elem20)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *StormTopology) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.StormVersion = &v
	}
	return nil
}

func (p *StormTopology) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.JdkVersion = &v
	}
	return nil
}

func (p *StormTopology) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]string, size)
	p.ComponentToSharedMemory = tMap
	for i := 0; i < size; i++ {
		var _key21 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key21 = v
		}
		_, size, err := iprot.ReadSetBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading set begin: ", err)
		}
		tSet := make([]string, 0, size)
		_val22 := tSet
		for i := 0; i < size; i++ {
			var _elem23 string
			if v, err := iprot.ReadString(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem23 = v
			}
			_val22 = append(_val22, _elem23)
		}
		if err := iprot.ReadSetEnd(ctx); err != nil {
			return thrift.PrependError("error reading set end: ", err)
		}
		p.ComponentToSharedMemory[_key21] = _val22
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *StormTopology) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*SharedMemory, size)
	p.SharedMemory = tMap
	for i := 0; i < size; i++ {
		var _key24 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key24 = v
		}
		_val25 := &SharedMemory{}
		if err := _val25.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val25), err)
		}
		p.SharedMemory[_key24] = _val25
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *StormTopology) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "StormTopology"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StormTopology) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "spouts", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spouts: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Spouts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Spouts {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spouts: ", p), err)
	}
	return err
}

func (p *StormTopology) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "bolts", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bolts: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Bolts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Bolts {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bolts: ", p), err)
	}
	return err
}

func (p *StormTopology) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "state_spouts", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:state_spouts: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.StateSpouts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.StateSpouts {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:state_spouts: ", p), err)
	}
	return err
}

func (p *StormTopology) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkerHooks() {
		if err := oprot.WriteFieldBegin(ctx, "worker_hooks", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:worker_hooks: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.WorkerHooks)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.WorkerHooks {
			if err := oprot.WriteBinary(ctx, v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:worker_hooks: ", p), err)
		}
	}
	return err
}

func (p *StormTopology) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDependencyJars() {
		if err := oprot.WriteFieldBegin(ctx, "dependency_jars", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:dependency_jars: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.DependencyJars)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.DependencyJars {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:dependency_jars: ", p), err)
		}
	}
	return err
}

func (p *StormTopology) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDependencyArtifacts() {
		if err := oprot.WriteFieldBegin(ctx, "dependency_artifacts", thrift.LIST, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dependency_artifacts: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.DependencyArtifacts)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.DependencyArtifacts {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dependency_artifacts: ", p), err)
		}
	}
	return err
}

func (p *StormTopology) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetStormVersion() {
		if err := oprot.WriteFieldBegin(ctx, "storm_version", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:storm_version: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.StormVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.storm_version (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:storm_version: ", p), err)
		}
	}
	return err
}

func (p *StormTopology) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetJdkVersion() {
		if err := oprot.WriteFieldBegin(ctx, "jdk_version", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:jdk_version: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.JdkVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.jdk_version (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:jdk_version: ", p), err)
		}
	}
	return err
}

func (p *StormTopology) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetComponentToSharedMemory() {
		if err := oprot.WriteFieldBegin(ctx, "component_to_shared_memory", thrift.MAP, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:component_to_shared_memory: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.SET, len(p.ComponentToSharedMemory)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ComponentToSharedMemory {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing set begin: ", err)
			}
			for i := 0; i < len(v); i++ {
				for j := i + 1; j < len(v); j++ {
					if func(tgt, src string) bool {
						if tgt != src {
							return false
						}
						return true
					}(v[i], v[j]) {
						return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("%T error writing set field: slice is not unique", v))
					}
				}
			}
			for _, v := range v {
				if err := oprot.WriteString(ctx, string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteSetEnd(ctx); err != nil {
				return thrift.PrependError("error writing set end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:component_to_shared_memory: ", p), err)
		}
	}
	return err
}

func (p *StormTopology) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSharedMemory() {
		if err := oprot.WriteFieldBegin(ctx, "shared_memory", thrift.MAP, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:shared_memory: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.SharedMemory)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.SharedMemory {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:shared_memory: ", p), err)
		}
	}
	return err
}

func (p *StormTopology) Equals(other *StormTopology) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Spouts) != len(other.Spouts) {
		return false
	}
	for k, _tgt := range p.Spouts {
		_src26 := other.Spouts[k]
		if !_tgt.Equals(_src26) {
			return false
		}
	}
	if len(p.Bolts) != len(other.Bolts) {
		return false
	}
	for k, _tgt := range p.Bolts {
		_src27 := other.Bolts[k]
		if !_tgt.Equals(_src27) {
			return false
		}
	}
	if len(p.StateSpouts) != len(other.StateSpouts) {
		return false
	}
	for k, _tgt := range p.StateSpouts {
		_src28 := other.StateSpouts[k]
		if !_tgt.Equals(_src28) {
			return false
		}
	}
	if len(p.WorkerHooks) != len(other.WorkerHooks) {
		return false
	}
	for i, _tgt := range p.WorkerHooks {
		_src29 := other.WorkerHooks[i]
		if bytes.Compare(_tgt, _src29) != 0 {
			return false
		}
	}
	if len(p.DependencyJars) != len(other.DependencyJars) {
		return false
	}
	for i, _tgt := range p.DependencyJars {
		_src30 := other.DependencyJars[i]
		if _tgt != _src30 {
			return false
		}
	}
	if len(p.DependencyArtifacts) != len(other.DependencyArtifacts) {
		return false
	}
	for i, _tgt := range p.DependencyArtifacts {
		_src31 := other.DependencyArtifacts[i]
		if _tgt != _src31 {
			return false
		}
	}
	if p.StormVersion != other.StormVersion {
		if p.StormVersion == nil || other.StormVersion == nil {
			return false
		}
		if (*p.StormVersion) != (*other.StormVersion) {
			return false
		}
	}
	if p.JdkVersion != other.JdkVersion {
		if p.JdkVersion == nil || other.JdkVersion == nil {
			return false
		}
		if (*p.JdkVersion) != (*other.JdkVersion) {
			return false
		}
	}
	if len(p.ComponentToSharedMemory) != len(other.ComponentToSharedMemory) {
		return false
	}
	for k, _tgt := range p.ComponentToSharedMemory {
		_src32 := other.ComponentToSharedMemory[k]
		if len(_tgt) != len(_src32) {
			return false
		}
		for i, _tgt := range _tgt {
			_src33 := _src32[i]
			if _tgt != _src33 {
				return false
			}
		}
	}
	if len(p.SharedMemory) != len(other.SharedMemory) {
		return false
	}
	for k, _tgt := range p.SharedMemory {
		_src34 := other.SharedMemory[k]
		if !_tgt.Equals(_src34) {
			return false
		}
	}
	return true
}

func (p *StormTopology) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StormTopology(%+v)", *p)
}

func (p *StormTopology) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.StormTopology",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*StormTopology)(nil)

func (p *StormTopology) Validate() error {
	return nil
}

// Attributes:
//   - Msg
type AlreadyAliveException struct {
	Msg string `thrift:"msg,1,required" db:"msg" json:"msg"`
}

func NewAlreadyAliveException() *AlreadyAliveException {
	return &AlreadyAliveException{}
}

func (p *AlreadyAliveException) GetMsg() string {
	return p.Msg
}

func (p *AlreadyAliveException) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMsg bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMsg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMsg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Msg is not set"))
	}
	return nil
}

func (p *AlreadyAliveException) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *AlreadyAliveException) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AlreadyAliveException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AlreadyAliveException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *AlreadyAliveException) Equals(other *AlreadyAliveException) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Msg != other.Msg {
		return false
	}
	return true
}

func (p *AlreadyAliveException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlreadyAliveException(%+v)", *p)
}

func (p *AlreadyAliveException) Error() string {
	return p.String()
}

func (AlreadyAliveException) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*AlreadyAliveException)(nil)

func (p *AlreadyAliveException) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.AlreadyAliveException",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AlreadyAliveException)(nil)

func (p *AlreadyAliveException) Validate() error {
	return nil
}

// Attributes:
//   - Msg
type NotAliveException struct {
	Msg string `thrift:"msg,1,required" db:"msg" json:"msg"`
}

func NewNotAliveException() *NotAliveException {
	return &NotAliveException{}
}

func (p *NotAliveException) GetMsg() string {
	return p.Msg
}

func (p *NotAliveException) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMsg bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMsg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMsg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Msg is not set"))
	}
	return nil
}

func (p *NotAliveException) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *NotAliveException) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "NotAliveException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NotAliveException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *NotAliveException) Equals(other *NotAliveException) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Msg != other.Msg {
		return false
	}
	return true
}

func (p *NotAliveException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotAliveException(%+v)", *p)
}

func (p *NotAliveException) Error() string {
	return p.String()
}

func (NotAliveException) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*NotAliveException)(nil)

func (p *NotAliveException) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NotAliveException",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NotAliveException)(nil)

func (p *NotAliveException) Validate() error {
	return nil
}

// Attributes:
//   - Msg
type AuthorizationException struct {
	Msg string `thrift:"msg,1,required" db:"msg" json:"msg"`
}

func NewAuthorizationException() *AuthorizationException {
	return &AuthorizationException{}
}

func (p *AuthorizationException) GetMsg() string {
	return p.Msg
}

func (p *AuthorizationException) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMsg bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMsg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMsg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Msg is not set"))
	}
	return nil
}

func (p *AuthorizationException) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *AuthorizationException) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AuthorizationException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthorizationException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *AuthorizationException) Equals(other *AuthorizationException) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Msg != other.Msg {
		return false
	}
	return true
}

func (p *AuthorizationException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthorizationException(%+v)", *p)
}

func (p *AuthorizationException) Error() string {
	return p.String()
}

func (AuthorizationException) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*AuthorizationException)(nil)

func (p *AuthorizationException) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.AuthorizationException",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AuthorizationException)(nil)

func (p *AuthorizationException) Validate() error {
	return nil
}

// Attributes:
//   - Msg
type InvalidTopologyException struct {
	Msg string `thrift:"msg,1,required" db:"msg" json:"msg"`
}

func NewInvalidTopologyException() *InvalidTopologyException {
	return &InvalidTopologyException{}
}

func (p *InvalidTopologyException) GetMsg() string {
	return p.Msg
}

func (p *InvalidTopologyException) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMsg bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMsg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMsg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Msg is not set"))
	}
	return nil
}

func (p *InvalidTopologyException) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *InvalidTopologyException) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "InvalidTopologyException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InvalidTopologyException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *InvalidTopologyException) Equals(other *InvalidTopologyException) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Msg != other.Msg {
		return false
	}
	return true
}

func (p *InvalidTopologyException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidTopologyException(%+v)", *p)
}

func (p *InvalidTopologyException) Error() string {
	return p.String()
}

func (InvalidTopologyException) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*InvalidTopologyException)(nil)

func (p *InvalidTopologyException) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.InvalidTopologyException",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*InvalidTopologyException)(nil)

func (p *InvalidTopologyException) Validate() error {
	return nil
}

// Attributes:
//   - Msg
type KeyNotFoundException struct {
	Msg string `thrift:"msg,1,required" db:"msg" json:"msg"`
}

func NewKeyNotFoundException() *KeyNotFoundException {
	return &KeyNotFoundException{}
}

func (p *KeyNotFoundException) GetMsg() string {
	return p.Msg
}

func (p *KeyNotFoundException) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMsg bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMsg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMsg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Msg is not set"))
	}
	return nil
}

func (p *KeyNotFoundException) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *KeyNotFoundException) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "KeyNotFoundException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KeyNotFoundException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *KeyNotFoundException) Equals(other *KeyNotFoundException) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Msg != other.Msg {
		return false
	}
	return true
}

func (p *KeyNotFoundException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KeyNotFoundException(%+v)", *p)
}

func (p *KeyNotFoundException) Error() string {
	return p.String()
}

func (KeyNotFoundException) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*KeyNotFoundException)(nil)

func (p *KeyNotFoundException) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.KeyNotFoundException",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*KeyNotFoundException)(nil)

func (p *KeyNotFoundException) Validate() error {
	return nil
}

// Attributes:
//   - Msg
type IllegalStateException struct {
	Msg string `thrift:"msg,1,required" db:"msg" json:"msg"`
}

func NewIllegalStateException() *IllegalStateException {
	return &IllegalStateException{}
}

func (p *IllegalStateException) GetMsg() string {
	return p.Msg
}

func (p *IllegalStateException) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMsg bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMsg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMsg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Msg is not set"))
	}
	return nil
}

func (p *IllegalStateException) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *IllegalStateException) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "IllegalStateException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IllegalStateException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *IllegalStateException) Equals(other *IllegalStateException) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Msg != other.Msg {
		return false
	}
	return true
}

func (p *IllegalStateException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IllegalStateException(%+v)", *p)
}

func (p *IllegalStateException) Error() string {
	return p.String()
}

func (IllegalStateException) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*IllegalStateException)(nil)

func (p *IllegalStateException) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.IllegalStateException",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*IllegalStateException)(nil)

func (p *IllegalStateException) Validate() error {
	return nil
}

// Attributes:
//   - Msg
type KeyAlreadyExistsException struct {
	Msg string `thrift:"msg,1,required" db:"msg" json:"msg"`
}

func NewKeyAlreadyExistsException() *KeyAlreadyExistsException {
	return &KeyAlreadyExistsException{}
}

func (p *KeyAlreadyExistsException) GetMsg() string {
	return p.Msg
}

func (p *KeyAlreadyExistsException) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMsg bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMsg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMsg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Msg is not set"))
	}
	return nil
}

func (p *KeyAlreadyExistsException) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *KeyAlreadyExistsException) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "KeyAlreadyExistsException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KeyAlreadyExistsException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *KeyAlreadyExistsException) Equals(other *KeyAlreadyExistsException) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Msg != other.Msg {
		return false
	}
	return true
}

func (p *KeyAlreadyExistsException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KeyAlreadyExistsException(%+v)", *p)
}

func (p *KeyAlreadyExistsException) Error() string {
	return p.String()
}

func (KeyAlreadyExistsException) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*KeyAlreadyExistsException)(nil)

func (p *KeyAlreadyExistsException) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.KeyAlreadyExistsException",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*KeyAlreadyExistsException)(nil)

func (p *KeyAlreadyExistsException) Validate() error {
	return nil
}

// Attributes:
//   - ID
//   - Name
//   - NumTasks
//   - NumExecutors
//   - NumWorkers
//   - UptimeSecs
//   - Status
//   - StormVersion
//   - TopologyVersion
//   - SchedStatus
//   - Owner
//   - ReplicationCount
//   - RequestedMemonheap
//   - RequestedMemoffheap
//   - RequestedCPU
//   - AssignedMemonheap
//   - AssignedMemoffheap
//   - AssignedCPU
//   - RequestedGenericResources
//   - AssignedGenericResources
type TopologySummary struct {
	ID              string  `thrift:"id,1,required" db:"id" json:"id"`
	Name            string  `thrift:"name,2,required" db:"name" json:"name"`
	NumTasks        int32   `thrift:"num_tasks,3,required" db:"num_tasks" json:"num_tasks"`
	NumExecutors    int32   `thrift:"num_executors,4,required" db:"num_executors" json:"num_executors"`
	NumWorkers      int32   `thrift:"num_workers,5,required" db:"num_workers" json:"num_workers"`
	UptimeSecs      int32   `thrift:"uptime_secs,6,required" db:"uptime_secs" json:"uptime_secs"`
	Status          string  `thrift:"status,7,required" db:"status" json:"status"`
	StormVersion    *string `thrift:"storm_version,8" db:"storm_version" json:"storm_version,omitempty"`
	TopologyVersion *string `thrift:"topology_version,9" db:"topology_version" json:"topology_version,omitempty"`
	// unused fields # 10 to 512
	SchedStatus      *string `thrift:"sched_status,513" db:"sched_status" json:"sched_status,omitempty"`
	Owner            *string `thrift:"owner,514" db:"owner" json:"owner,omitempty"`
	ReplicationCount *int32  `thrift:"replication_count,515" db:"replication_count" json:"replication_count,omitempty"`
	// unused fields # 516 to 520
	RequestedMemonheap        *float64           `thrift:"requested_memonheap,521" db:"requested_memonheap" json:"requested_memonheap,omitempty"`
	RequestedMemoffheap       *float64           `thrift:"requested_memoffheap,522" db:"requested_memoffheap" json:"requested_memoffheap,omitempty"`
	RequestedCPU              *float64           `thrift:"requested_cpu,523" db:"requested_cpu" json:"requested_cpu,omitempty"`
	AssignedMemonheap         *float64           `thrift:"assigned_memonheap,524" db:"assigned_memonheap" json:"assigned_memonheap,omitempty"`
	AssignedMemoffheap        *float64           `thrift:"assigned_memoffheap,525" db:"assigned_memoffheap" json:"assigned_memoffheap,omitempty"`
	AssignedCPU               *float64           `thrift:"assigned_cpu,526" db:"assigned_cpu" json:"assigned_cpu,omitempty"`
	RequestedGenericResources map[string]float64 `thrift:"requested_generic_resources,527" db:"requested_generic_resources" json:"requested_generic_resources,omitempty"`
	AssignedGenericResources  map[string]float64 `thrift:"assigned_generic_resources,528" db:"assigned_generic_resources" json:"assigned_generic_resources,omitempty"`
}

func NewTopologySummary() *TopologySummary {
	return &TopologySummary{}
}

func (p *TopologySummary) GetID() string {
	return p.ID
}

func (p *TopologySummary) GetName() string {
	return p.Name
}

func (p *TopologySummary) GetNumTasks() int32 {
	return p.NumTasks
}

func (p *TopologySummary) GetNumExecutors() int32 {
	return p.NumExecutors
}

func (p *TopologySummary) GetNumWorkers() int32 {
	return p.NumWorkers
}

func (p *TopologySummary) GetUptimeSecs() int32 {
	return p.UptimeSecs
}

func (p *TopologySummary) GetStatus() string {
	return p.Status
}

var TopologySummary_StormVersion_DEFAULT string

func (p *TopologySummary) GetStormVersion() string {
	if !p.IsSetStormVersion() {
		return TopologySummary_StormVersion_DEFAULT
	}
	return *p.StormVersion
}

var TopologySummary_TopologyVersion_DEFAULT string

func (p *TopologySummary) GetTopologyVersion() string {
	if !p.IsSetTopologyVersion() {
		return TopologySummary_TopologyVersion_DEFAULT
	}
	return *p.TopologyVersion
}

var TopologySummary_SchedStatus_DEFAULT string

func (p *TopologySummary) GetSchedStatus() string {
	if !p.IsSetSchedStatus() {
		return TopologySummary_SchedStatus_DEFAULT
	}
	return *p.SchedStatus
}

var TopologySummary_Owner_DEFAULT string

func (p *TopologySummary) GetOwner() string {
	if !p.IsSetOwner() {
		return TopologySummary_Owner_DEFAULT
	}
	return *p.Owner
}

var TopologySummary_ReplicationCount_DEFAULT int32

func (p *TopologySummary) GetReplicationCount() int32 {
	if !p.IsSetReplicationCount() {
		return TopologySummary_ReplicationCount_DEFAULT
	}
	return *p.ReplicationCount
}

var TopologySummary_RequestedMemonheap_DEFAULT float64

func (p *TopologySummary) GetRequestedMemonheap() float64 {
	if !p.IsSetRequestedMemonheap() {
		return TopologySummary_RequestedMemonheap_DEFAULT
	}
	return *p.RequestedMemonheap
}

var TopologySummary_RequestedMemoffheap_DEFAULT float64

func (p *TopologySummary) GetRequestedMemoffheap() float64 {
	if !p.IsSetRequestedMemoffheap() {
		return TopologySummary_RequestedMemoffheap_DEFAULT
	}
	return *p.RequestedMemoffheap
}

var TopologySummary_RequestedCPU_DEFAULT float64

func (p *TopologySummary) GetRequestedCPU() float64 {
	if !p.IsSetRequestedCPU() {
		return TopologySummary_RequestedCPU_DEFAULT
	}
	return *p.RequestedCPU
}

var TopologySummary_AssignedMemonheap_DEFAULT float64

func (p *TopologySummary) GetAssignedMemonheap() float64 {
	if !p.IsSetAssignedMemonheap() {
		return TopologySummary_AssignedMemonheap_DEFAULT
	}
	return *p.AssignedMemonheap
}

var TopologySummary_AssignedMemoffheap_DEFAULT float64

func (p *TopologySummary) GetAssignedMemoffheap() float64 {
	if !p.IsSetAssignedMemoffheap() {
		return TopologySummary_AssignedMemoffheap_DEFAULT
	}
	return *p.AssignedMemoffheap
}

var TopologySummary_AssignedCPU_DEFAULT float64

func (p *TopologySummary) GetAssignedCPU() float64 {
	if !p.IsSetAssignedCPU() {
		return TopologySummary_AssignedCPU_DEFAULT
	}
	return *p.AssignedCPU
}

var TopologySummary_RequestedGenericResources_DEFAULT map[string]float64

func (p *TopologySummary) GetRequestedGenericResources() map[string]float64 {
	return p.RequestedGenericResources
}

var TopologySummary_AssignedGenericResources_DEFAULT map[string]float64

func (p *TopologySummary) GetAssignedGenericResources() map[string]float64 {
	return p.AssignedGenericResources
}

func (p *TopologySummary) IsSetStormVersion() bool {
	return p.StormVersion != nil
}

func (p *TopologySummary) IsSetTopologyVersion() bool {
	return p.TopologyVersion != nil
}

func (p *TopologySummary) IsSetSchedStatus() bool {
	return p.SchedStatus != nil
}

func (p *TopologySummary) IsSetOwner() bool {
	return p.Owner != nil
}

func (p *TopologySummary) IsSetReplicationCount() bool {
	return p.ReplicationCount != nil
}

func (p *TopologySummary) IsSetRequestedMemonheap() bool {
	return p.RequestedMemonheap != nil
}

func (p *TopologySummary) IsSetRequestedMemoffheap() bool {
	return p.RequestedMemoffheap != nil
}

func (p *TopologySummary) IsSetRequestedCPU() bool {
	return p.RequestedCPU != nil
}

func (p *TopologySummary) IsSetAssignedMemonheap() bool {
	return p.AssignedMemonheap != nil
}

func (p *TopologySummary) IsSetAssignedMemoffheap() bool {
	return p.AssignedMemoffheap != nil
}

func (p *TopologySummary) IsSetAssignedCPU() bool {
	return p.AssignedCPU != nil
}

func (p *TopologySummary) IsSetRequestedGenericResources() bool {
	return p.RequestedGenericResources != nil
}

func (p *TopologySummary) IsSetAssignedGenericResources() bool {
	return p.AssignedGenericResources != nil
}

func (p *TopologySummary) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetName bool = false
	var issetNumTasks bool = false
	var issetNumExecutors bool = false
	var issetNumWorkers bool = false
	var issetUptimeSecs bool = false
	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetNumTasks = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetNumExecutors = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetNumWorkers = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
				issetUptimeSecs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 513:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField513(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 514:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField514(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 515:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField515(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 521:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField521(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 522:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField522(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 523:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField523(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 524:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField524(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 525:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField525(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 526:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField526(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 527:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField527(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 528:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField528(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetNumTasks {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumTasks is not set"))
	}
	if !issetNumExecutors {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumExecutors is not set"))
	}
	if !issetNumWorkers {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumWorkers is not set"))
	}
	if !issetUptimeSecs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UptimeSecs is not set"))
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *TopologySummary) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TopologySummary) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TopologySummary) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NumTasks = v
	}
	return nil
}

func (p *TopologySummary) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NumExecutors = v
	}
	return nil
}

func (p *TopologySummary) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.NumWorkers = v
	}
	return nil
}

func (p *TopologySummary) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.UptimeSecs = v
	}
	return nil
}

func (p *TopologySummary) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *TopologySummary) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.StormVersion = &v
	}
	return nil
}

func (p *TopologySummary) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.TopologyVersion = &v
	}
	return nil
}

func (p *TopologySummary) ReadField513(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 513: ", err)
	} else {
		p.SchedStatus = &v
	}
	return nil
}

func (p *TopologySummary) ReadField514(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 514: ", err)
	} else {
		p.Owner = &v
	}
	return nil
}

func (p *TopologySummary) ReadField515(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 515: ", err)
	} else {
		p.ReplicationCount = &v
	}
	return nil
}

func (p *TopologySummary) ReadField521(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 521: ", err)
	} else {
		p.RequestedMemonheap = &v
	}
	return nil
}

func (p *TopologySummary) ReadField522(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 522: ", err)
	} else {
		p.RequestedMemoffheap = &v
	}
	return nil
}

func (p *TopologySummary) ReadField523(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 523: ", err)
	} else {
		p.RequestedCPU = &v
	}
	return nil
}

func (p *TopologySummary) ReadField524(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 524: ", err)
	} else {
		p.AssignedMemonheap = &v
	}
	return nil
}

func (p *TopologySummary) ReadField525(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 525: ", err)
	} else {
		p.AssignedMemoffheap = &v
	}
	return nil
}

func (p *TopologySummary) ReadField526(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 526: ", err)
	} else {
		p.AssignedCPU = &v
	}
	return nil
}

func (p *TopologySummary) ReadField527(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]float64, size)
	p.RequestedGenericResources = tMap
	for i := 0; i < size; i++ {
		var _key35 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key35 = v
		}
		var _val36 float64
		if v, err := iprot.ReadDouble(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val36 = v
		}
		p.RequestedGenericResources[_key35] = _val36
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TopologySummary) ReadField528(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]float64, size)
	p.AssignedGenericResources = tMap
	for i := 0; i < size; i++ {
		var _key37 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key37 = v
		}
		var _val38 float64
		if v, err := iprot.ReadDouble(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val38 = v
		}
		p.AssignedGenericResources[_key37] = _val38
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TopologySummary) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TopologySummary"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField513(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField514(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField515(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField521(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField522(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField523(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField524(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField525(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField526(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField527(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField528(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TopologySummary) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *TopologySummary) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *TopologySummary) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "num_tasks", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:num_tasks: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.NumTasks)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_tasks (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:num_tasks: ", p), err)
	}
	return err
}

func (p *TopologySummary) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "num_executors", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:num_executors: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.NumExecutors)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_executors (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:num_executors: ", p), err)
	}
	return err
}

func (p *TopologySummary) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "num_workers", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:num_workers: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.NumWorkers)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_workers (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:num_workers: ", p), err)
	}
	return err
}

func (p *TopologySummary) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "uptime_secs", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:uptime_secs: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UptimeSecs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uptime_secs (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:uptime_secs: ", p), err)
	}
	return err
}

func (p *TopologySummary) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err)
	}
	return err
}

func (p *TopologySummary) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetStormVersion() {
		if err := oprot.WriteFieldBegin(ctx, "storm_version", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:storm_version: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.StormVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.storm_version (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:storm_version: ", p), err)
		}
	}
	return err
}

func (p *TopologySummary) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTopologyVersion() {
		if err := oprot.WriteFieldBegin(ctx, "topology_version", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:topology_version: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.TopologyVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.topology_version (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:topology_version: ", p), err)
		}
	}
	return err
}

func (p *TopologySummary) writeField513(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSchedStatus() {
		if err := oprot.WriteFieldBegin(ctx, "sched_status", thrift.STRING, 513); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 513:sched_status: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.SchedStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sched_status (513) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 513:sched_status: ", p), err)
		}
	}
	return err
}

func (p *TopologySummary) writeField514(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOwner() {
		if err := oprot.WriteFieldBegin(ctx, "owner", thrift.STRING, 514); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 514:owner: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Owner)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.owner (514) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 514:owner: ", p), err)
		}
	}
	return err
}

func (p *TopologySummary) writeField515(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicationCount() {
		if err := oprot.WriteFieldBegin(ctx, "replication_count", thrift.I32, 515); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 515:replication_count: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.ReplicationCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.replication_count (515) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 515:replication_count: ", p), err)
		}
	}
	return err
}

func (p *TopologySummary) writeField521(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedMemonheap() {
		if err := oprot.WriteFieldBegin(ctx, "requested_memonheap", thrift.DOUBLE, 521); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 521:requested_memonheap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedMemonheap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_memonheap (521) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 521:requested_memonheap: ", p), err)
		}
	}
	return err
}

func (p *TopologySummary) writeField522(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedMemoffheap() {
		if err := oprot.WriteFieldBegin(ctx, "requested_memoffheap", thrift.DOUBLE, 522); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 522:requested_memoffheap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedMemoffheap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_memoffheap (522) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 522:requested_memoffheap: ", p), err)
		}
	}
	return err
}

func (p *TopologySummary) writeField523(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedCPU() {
		if err := oprot.WriteFieldBegin(ctx, "requested_cpu", thrift.DOUBLE, 523); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 523:requested_cpu: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedCPU)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_cpu (523) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 523:requested_cpu: ", p), err)
		}
	}
	return err
}

func (p *TopologySummary) writeField524(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedMemonheap() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_memonheap", thrift.DOUBLE, 524); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 524:assigned_memonheap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedMemonheap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_memonheap (524) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 524:assigned_memonheap: ", p), err)
		}
	}
	return err
}

func (p *TopologySummary) writeField525(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedMemoffheap() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_memoffheap", thrift.DOUBLE, 525); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 525:assigned_memoffheap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedMemoffheap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_memoffheap (525) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 525:assigned_memoffheap: ", p), err)
		}
	}
	return err
}

func (p *TopologySummary) writeField526(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedCPU() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_cpu", thrift.DOUBLE, 526); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 526:assigned_cpu: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedCPU)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_cpu (526) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 526:assigned_cpu: ", p), err)
		}
	}
	return err
}

func (p *TopologySummary) writeField527(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedGenericResources() {
		if err := oprot.WriteFieldBegin(ctx, "requested_generic_resources", thrift.MAP, 527); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 527:requested_generic_resources: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.DOUBLE, len(p.RequestedGenericResources)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.RequestedGenericResources {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 527:requested_generic_resources: ", p), err)
		}
	}
	return err
}

func (p *TopologySummary) writeField528(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedGenericResources() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_generic_resources", thrift.MAP, 528); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 528:assigned_generic_resources: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.DOUBLE, len(p.AssignedGenericResources)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.AssignedGenericResources {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 528:assigned_generic_resources: ", p), err)
		}
	}
	return err
}

func (p *TopologySummary) Equals(other *TopologySummary) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ID != other.ID {
		return false
	}
	if p.Name != other.Name {
		return false
	}
	if p.NumTasks != other.NumTasks {
		return false
	}
	if p.NumExecutors != other.NumExecutors {
		return false
	}
	if p.NumWorkers != other.NumWorkers {
		return false
	}
	if p.UptimeSecs != other.UptimeSecs {
		return false
	}
	if p.Status != other.Status {
		return false
	}
	if p.StormVersion != other.StormVersion {
		if p.StormVersion == nil || other.StormVersion == nil {
			return false
		}
		if (*p.StormVersion) != (*other.StormVersion) {
			return false
		}
	}
	if p.TopologyVersion != other.TopologyVersion {
		if p.TopologyVersion == nil || other.TopologyVersion == nil {
			return false
		}
		if (*p.TopologyVersion) != (*other.TopologyVersion) {
			return false
		}
	}
	if p.SchedStatus != other.SchedStatus {
		if p.SchedStatus == nil || other.SchedStatus == nil {
			return false
		}
		if (*p.SchedStatus) != (*other.SchedStatus) {
			return false
		}
	}
	if p.Owner != other.Owner {
		if p.Owner == nil || other.Owner == nil {
			return false
		}
		if (*p.Owner) != (*other.Owner) {
			return false
		}
	}
	if p.ReplicationCount != other.ReplicationCount {
		if p.ReplicationCount == nil || other.ReplicationCount == nil {
			return false
		}
		if (*p.ReplicationCount) != (*other.ReplicationCount) {
			return false
		}
	}
	if p.RequestedMemonheap != other.RequestedMemonheap {
		if p.RequestedMemonheap == nil || other.RequestedMemonheap == nil {
			return false
		}
		if (*p.RequestedMemonheap) != (*other.RequestedMemonheap) {
			return false
		}
	}
	if p.RequestedMemoffheap != other.RequestedMemoffheap {
		if p.RequestedMemoffheap == nil || other.RequestedMemoffheap == nil {
			return false
		}
		if (*p.RequestedMemoffheap) != (*other.RequestedMemoffheap) {
			return false
		}
	}
	if p.RequestedCPU != other.RequestedCPU {
		if p.RequestedCPU == nil || other.RequestedCPU == nil {
			return false
		}
		if (*p.RequestedCPU) != (*other.RequestedCPU) {
			return false
		}
	}
	if p.AssignedMemonheap != other.AssignedMemonheap {
		if p.AssignedMemonheap == nil || other.AssignedMemonheap == nil {
			return false
		}
		if (*p.AssignedMemonheap) != (*other.AssignedMemonheap) {
			return false
		}
	}
	if p.AssignedMemoffheap != other.AssignedMemoffheap {
		if p.AssignedMemoffheap == nil || other.AssignedMemoffheap == nil {
			return false
		}
		if (*p.AssignedMemoffheap) != (*other.AssignedMemoffheap) {
			return false
		}
	}
	if p.AssignedCPU != other.AssignedCPU {
		if p.AssignedCPU == nil || other.AssignedCPU == nil {
			return false
		}
		if (*p.AssignedCPU) != (*other.AssignedCPU) {
			return false
		}
	}
	if len(p.RequestedGenericResources) != len(other.RequestedGenericResources) {
		return false
	}
	for k, _tgt := range p.RequestedGenericResources {
		_src39 := other.RequestedGenericResources[k]
		if _tgt != _src39 {
			return false
		}
	}
	if len(p.AssignedGenericResources) != len(other.AssignedGenericResources) {
		return false
	}
	for k, _tgt := range p.AssignedGenericResources {
		_src40 := other.AssignedGenericResources[k]
		if _tgt != _src40 {
			return false
		}
	}
	return true
}

func (p *TopologySummary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopologySummary(%+v)", *p)
}

func (p *TopologySummary) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.TopologySummary",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TopologySummary)(nil)

func (p *TopologySummary) Validate() error {
	return nil
}

// Attributes:
//   - Host
//   - UptimeSecs
//   - NumWorkers
//   - NumUsedWorkers
//   - SupervisorID
//   - Version
//   - TotalResources
//   - UsedMem
//   - UsedCPU
//   - FragmentedMem
//   - FragmentedCPU
//   - Blacklisted
//   - UsedGenericResources
type SupervisorSummary struct {
	Host                 string             `thrift:"host,1,required" db:"host" json:"host"`
	UptimeSecs           int32              `thrift:"uptime_secs,2,required" db:"uptime_secs" json:"uptime_secs"`
	NumWorkers           int32              `thrift:"num_workers,3,required" db:"num_workers" json:"num_workers"`
	NumUsedWorkers       int32              `thrift:"num_used_workers,4,required" db:"num_used_workers" json:"num_used_workers"`
	SupervisorID         string             `thrift:"supervisor_id,5,required" db:"supervisor_id" json:"supervisor_id"`
	Version              string             `thrift:"version,6" db:"version" json:"version"`
	TotalResources       map[string]float64 `thrift:"total_resources,7" db:"total_resources" json:"total_resources,omitempty"`
	UsedMem              *float64           `thrift:"used_mem,8" db:"used_mem" json:"used_mem,omitempty"`
	UsedCPU              *float64           `thrift:"used_cpu,9" db:"used_cpu" json:"used_cpu,omitempty"`
	FragmentedMem        *float64           `thrift:"fragmented_mem,10" db:"fragmented_mem" json:"fragmented_mem,omitempty"`
	FragmentedCPU        *float64           `thrift:"fragmented_cpu,11" db:"fragmented_cpu" json:"fragmented_cpu,omitempty"`
	Blacklisted          *bool              `thrift:"blacklisted,12" db:"blacklisted" json:"blacklisted,omitempty"`
	UsedGenericResources map[string]float64 `thrift:"used_generic_resources,13" db:"used_generic_resources" json:"used_generic_resources,omitempty"`
}

func NewSupervisorSummary() *SupervisorSummary {
	return &SupervisorSummary{
		Version: "VERSION_NOT_PROVIDED",
	}
}

func (p *SupervisorSummary) GetHost() string {
	return p.Host
}

func (p *SupervisorSummary) GetUptimeSecs() int32 {
	return p.UptimeSecs
}

func (p *SupervisorSummary) GetNumWorkers() int32 {
	return p.NumWorkers
}

func (p *SupervisorSummary) GetNumUsedWorkers() int32 {
	return p.NumUsedWorkers
}

func (p *SupervisorSummary) GetSupervisorID() string {
	return p.SupervisorID
}

var SupervisorSummary_Version_DEFAULT string = "VERSION_NOT_PROVIDED"

func (p *SupervisorSummary) GetVersion() string {
	return p.Version
}

var SupervisorSummary_TotalResources_DEFAULT map[string]float64

func (p *SupervisorSummary) GetTotalResources() map[string]float64 {
	return p.TotalResources
}

var SupervisorSummary_UsedMem_DEFAULT float64

func (p *SupervisorSummary) GetUsedMem() float64 {
	if !p.IsSetUsedMem() {
		return SupervisorSummary_UsedMem_DEFAULT
	}
	return *p.UsedMem
}

var SupervisorSummary_UsedCPU_DEFAULT float64

func (p *SupervisorSummary) GetUsedCPU() float64 {
	if !p.IsSetUsedCPU() {
		return SupervisorSummary_UsedCPU_DEFAULT
	}
	return *p.UsedCPU
}

var SupervisorSummary_FragmentedMem_DEFAULT float64

func (p *SupervisorSummary) GetFragmentedMem() float64 {
	if !p.IsSetFragmentedMem() {
		return SupervisorSummary_FragmentedMem_DEFAULT
	}
	return *p.FragmentedMem
}

var SupervisorSummary_FragmentedCPU_DEFAULT float64

func (p *SupervisorSummary) GetFragmentedCPU() float64 {
	if !p.IsSetFragmentedCPU() {
		return SupervisorSummary_FragmentedCPU_DEFAULT
	}
	return *p.FragmentedCPU
}

var SupervisorSummary_Blacklisted_DEFAULT bool

func (p *SupervisorSummary) GetBlacklisted() bool {
	if !p.IsSetBlacklisted() {
		return SupervisorSummary_Blacklisted_DEFAULT
	}
	return *p.Blacklisted
}

var SupervisorSummary_UsedGenericResources_DEFAULT map[string]float64

func (p *SupervisorSummary) GetUsedGenericResources() map[string]float64 {
	return p.UsedGenericResources
}

func (p *SupervisorSummary) IsSetVersion() bool {
	return p.Version != SupervisorSummary_Version_DEFAULT
}

func (p *SupervisorSummary) IsSetTotalResources() bool {
	return p.TotalResources != nil
}

func (p *SupervisorSummary) IsSetUsedMem() bool {
	return p.UsedMem != nil
}

func (p *SupervisorSummary) IsSetUsedCPU() bool {
	return p.UsedCPU != nil
}

func (p *SupervisorSummary) IsSetFragmentedMem() bool {
	return p.FragmentedMem != nil
}

func (p *SupervisorSummary) IsSetFragmentedCPU() bool {
	return p.FragmentedCPU != nil
}

func (p *SupervisorSummary) IsSetBlacklisted() bool {
	return p.Blacklisted != nil
}

func (p *SupervisorSummary) IsSetUsedGenericResources() bool {
	return p.UsedGenericResources != nil
}

func (p *SupervisorSummary) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetHost bool = false
	var issetUptimeSecs bool = false
	var issetNumWorkers bool = false
	var issetNumUsedWorkers bool = false
	var issetSupervisorID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetHost = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetUptimeSecs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetNumWorkers = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetNumUsedWorkers = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetSupervisorID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField12(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField13(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetHost {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Host is not set"))
	}
	if !issetUptimeSecs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UptimeSecs is not set"))
	}
	if !issetNumWorkers {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumWorkers is not set"))
	}
	if !issetNumUsedWorkers {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumUsedWorkers is not set"))
	}
	if !issetSupervisorID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SupervisorID is not set"))
	}
	return nil
}

func (p *SupervisorSummary) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Host = v
	}
	return nil
}

func (p *SupervisorSummary) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UptimeSecs = v
	}
	return nil
}

func (p *SupervisorSummary) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NumWorkers = v
	}
	return nil
}

func (p *SupervisorSummary) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NumUsedWorkers = v
	}
	return nil
}

func (p *SupervisorSummary) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SupervisorID = v
	}
	return nil
}

func (p *SupervisorSummary) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *SupervisorSummary) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]float64, size)
	p.TotalResources = tMap
	for i := 0; i < size; i++ {
		var _key41 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key41 = v
		}
		var _val42 float64
		if v, err := iprot.ReadDouble(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val42 = v
		}
		p.TotalResources[_key41] = _val42
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SupervisorSummary) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.UsedMem = &v
	}
	return nil
}

func (p *SupervisorSummary) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.UsedCPU = &v
	}
	return nil
}

func (p *SupervisorSummary) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.FragmentedMem = &v
	}
	return nil
}

func (p *SupervisorSummary) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.FragmentedCPU = &v
	}
	return nil
}

func (p *SupervisorSummary) ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Blacklisted = &v
	}
	return nil
}

func (p *SupervisorSummary) ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]float64, size)
	p.UsedGenericResources = tMap
	for i := 0; i < size; i++ {
		var _key43 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key43 = v
		}
		var _val44 float64
		if v, err := iprot.ReadDouble(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val44 = v
		}
		p.UsedGenericResources[_key43] = _val44
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SupervisorSummary) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SupervisorSummary"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField11(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField12(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField13(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SupervisorSummary) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Host)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err)
	}
	return err
}

func (p *SupervisorSummary) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "uptime_secs", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uptime_secs: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UptimeSecs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uptime_secs (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uptime_secs: ", p), err)
	}
	return err
}

func (p *SupervisorSummary) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "num_workers", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:num_workers: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.NumWorkers)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_workers (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:num_workers: ", p), err)
	}
	return err
}

func (p *SupervisorSummary) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "num_used_workers", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:num_used_workers: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.NumUsedWorkers)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_used_workers (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:num_used_workers: ", p), err)
	}
	return err
}

func (p *SupervisorSummary) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "supervisor_id", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:supervisor_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SupervisorID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.supervisor_id (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:supervisor_id: ", p), err)
	}
	return err
}

func (p *SupervisorSummary) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin(ctx, "version", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:version: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(p.Version)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.version (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:version: ", p), err)
		}
	}
	return err
}

func (p *SupervisorSummary) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalResources() {
		if err := oprot.WriteFieldBegin(ctx, "total_resources", thrift.MAP, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:total_resources: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.DOUBLE, len(p.TotalResources)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.TotalResources {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:total_resources: ", p), err)
		}
	}
	return err
}

func (p *SupervisorSummary) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUsedMem() {
		if err := oprot.WriteFieldBegin(ctx, "used_mem", thrift.DOUBLE, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:used_mem: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.UsedMem)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.used_mem (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:used_mem: ", p), err)
		}
	}
	return err
}

func (p *SupervisorSummary) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUsedCPU() {
		if err := oprot.WriteFieldBegin(ctx, "used_cpu", thrift.DOUBLE, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:used_cpu: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.UsedCPU)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.used_cpu (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:used_cpu: ", p), err)
		}
	}
	return err
}

func (p *SupervisorSummary) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFragmentedMem() {
		if err := oprot.WriteFieldBegin(ctx, "fragmented_mem", thrift.DOUBLE, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:fragmented_mem: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.FragmentedMem)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fragmented_mem (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:fragmented_mem: ", p), err)
		}
	}
	return err
}

func (p *SupervisorSummary) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFragmentedCPU() {
		if err := oprot.WriteFieldBegin(ctx, "fragmented_cpu", thrift.DOUBLE, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:fragmented_cpu: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.FragmentedCPU)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fragmented_cpu (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:fragmented_cpu: ", p), err)
		}
	}
	return err
}

func (p *SupervisorSummary) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBlacklisted() {
		if err := oprot.WriteFieldBegin(ctx, "blacklisted", thrift.BOOL, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:blacklisted: ", p), err)
		}
		if err := oprot.WriteBool(ctx, bool(*p.Blacklisted)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.blacklisted (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:blacklisted: ", p), err)
		}
	}
	return err
}

func (p *SupervisorSummary) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUsedGenericResources() {
		if err := oprot.WriteFieldBegin(ctx, "used_generic_resources", thrift.MAP, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:used_generic_resources: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.DOUBLE, len(p.UsedGenericResources)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.UsedGenericResources {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:used_generic_resources: ", p), err)
		}
	}
	return err
}

func (p *SupervisorSummary) Equals(other *SupervisorSummary) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Host != other.Host {
		return false
	}
	if p.UptimeSecs != other.UptimeSecs {
		return false
	}
	if p.NumWorkers != other.NumWorkers {
		return false
	}
	if p.NumUsedWorkers != other.NumUsedWorkers {
		return false
	}
	if p.SupervisorID != other.SupervisorID {
		return false
	}
	if p.Version != other.Version {
		return false
	}
	if len(p.TotalResources) != len(other.TotalResources) {
		return false
	}
	for k, _tgt := range p.TotalResources {
		_src45 := other.TotalResources[k]
		if _tgt != _src45 {
			return false
		}
	}
	if p.UsedMem != other.UsedMem {
		if p.UsedMem == nil || other.UsedMem == nil {
			return false
		}
		if (*p.UsedMem) != (*other.UsedMem) {
			return false
		}
	}
	if p.UsedCPU != other.UsedCPU {
		if p.UsedCPU == nil || other.UsedCPU == nil {
			return false
		}
		if (*p.UsedCPU) != (*other.UsedCPU) {
			return false
		}
	}
	if p.FragmentedMem != other.FragmentedMem {
		if p.FragmentedMem == nil || other.FragmentedMem == nil {
			return false
		}
		if (*p.FragmentedMem) != (*other.FragmentedMem) {
			return false
		}
	}
	if p.FragmentedCPU != other.FragmentedCPU {
		if p.FragmentedCPU == nil || other.FragmentedCPU == nil {
			return false
		}
		if (*p.FragmentedCPU) != (*other.FragmentedCPU) {
			return false
		}
	}
	if p.Blacklisted != other.Blacklisted {
		if p.Blacklisted == nil || other.Blacklisted == nil {
			return false
		}
		if (*p.Blacklisted) != (*other.Blacklisted) {
			return false
		}
	}
	if len(p.UsedGenericResources) != len(other.UsedGenericResources) {
		return false
	}
	for k, _tgt := range p.UsedGenericResources {
		_src46 := other.UsedGenericResources[k]
		if _tgt != _src46 {
			return false
		}
	}
	return true
}

func (p *SupervisorSummary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SupervisorSummary(%+v)", *p)
}

func (p *SupervisorSummary) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SupervisorSummary",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SupervisorSummary)(nil)

func (p *SupervisorSummary) Validate() error {
	return nil
}

// Attributes:
//   - Host
//   - Port
//   - UptimeSecs
//   - IsLeader
//   - Version
//   - TlsPort
type NimbusSummary struct {
	Host       string `thrift:"host,1,required" db:"host" json:"host"`
	Port       int32  `thrift:"port,2,required" db:"port" json:"port"`
	UptimeSecs int32  `thrift:"uptime_secs,3,required" db:"uptime_secs" json:"uptime_secs"`
	IsLeader   bool   `thrift:"isLeader,4,required" db:"isLeader" json:"isLeader"`
	Version    string `thrift:"version,5,required" db:"version" json:"version"`
	TlsPort    *int32 `thrift:"tlsPort,6" db:"tlsPort" json:"tlsPort,omitempty"`
}

func NewNimbusSummary() *NimbusSummary {
	return &NimbusSummary{}
}

func (p *NimbusSummary) GetHost() string {
	return p.Host
}

func (p *NimbusSummary) GetPort() int32 {
	return p.Port
}

func (p *NimbusSummary) GetUptimeSecs() int32 {
	return p.UptimeSecs
}

func (p *NimbusSummary) GetIsLeader() bool {
	return p.IsLeader
}

func (p *NimbusSummary) GetVersion() string {
	return p.Version
}

var NimbusSummary_TlsPort_DEFAULT int32

func (p *NimbusSummary) GetTlsPort() int32 {
	if !p.IsSetTlsPort() {
		return NimbusSummary_TlsPort_DEFAULT
	}
	return *p.TlsPort
}

func (p *NimbusSummary) IsSetTlsPort() bool {
	return p.TlsPort != nil
}

func (p *NimbusSummary) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetHost bool = false
	var issetPort bool = false
	var issetUptimeSecs bool = false
	var issetIsLeader bool = false
	var issetVersion bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetHost = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetPort = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetUptimeSecs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetIsLeader = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetVersion = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetHost {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Host is not set"))
	}
	if !issetPort {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Port is not set"))
	}
	if !issetUptimeSecs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UptimeSecs is not set"))
	}
	if !issetIsLeader {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsLeader is not set"))
	}
	if !issetVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"))
	}
	return nil
}

func (p *NimbusSummary) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Host = v
	}
	return nil
}

func (p *NimbusSummary) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *NimbusSummary) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UptimeSecs = v
	}
	return nil
}

func (p *NimbusSummary) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IsLeader = v
	}
	return nil
}

func (p *NimbusSummary) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *NimbusSummary) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.TlsPort = &v
	}
	return nil
}

func (p *NimbusSummary) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "NimbusSummary"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusSummary) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Host)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err)
	}
	return err
}

func (p *NimbusSummary) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "port", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err)
	}
	return err
}

func (p *NimbusSummary) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "uptime_secs", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:uptime_secs: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UptimeSecs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uptime_secs (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:uptime_secs: ", p), err)
	}
	return err
}

func (p *NimbusSummary) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "isLeader", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isLeader: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.IsLeader)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isLeader (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isLeader: ", p), err)
	}
	return err
}

func (p *NimbusSummary) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "version", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:version: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:version: ", p), err)
	}
	return err
}

func (p *NimbusSummary) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTlsPort() {
		if err := oprot.WriteFieldBegin(ctx, "tlsPort", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:tlsPort: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.TlsPort)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tlsPort (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:tlsPort: ", p), err)
		}
	}
	return err
}

func (p *NimbusSummary) Equals(other *NimbusSummary) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Host != other.Host {
		return false
	}
	if p.Port != other.Port {
		return false
	}
	if p.UptimeSecs != other.UptimeSecs {
		return false
	}
	if p.IsLeader != other.IsLeader {
		return false
	}
	if p.Version != other.Version {
		return false
	}
	if p.TlsPort != other.TlsPort {
		if p.TlsPort == nil || other.TlsPort == nil {
			return false
		}
		if (*p.TlsPort) != (*other.TlsPort) {
			return false
		}
	}
	return true
}

func (p *NimbusSummary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusSummary(%+v)", *p)
}

func (p *NimbusSummary) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusSummary",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusSummary)(nil)

func (p *NimbusSummary) Validate() error {
	return nil
}

// Attributes:
//   - Supervisors
//   - Topologies
//   - Nimbuses
type ClusterSummary struct {
	Supervisors []*SupervisorSummary `thrift:"supervisors,1,required" db:"supervisors" json:"supervisors"`
	// unused field # 2
	Topologies []*TopologySummary `thrift:"topologies,3,required" db:"topologies" json:"topologies"`
	Nimbuses   []*NimbusSummary   `thrift:"nimbuses,4,required" db:"nimbuses" json:"nimbuses"`
}

func NewClusterSummary() *ClusterSummary {
	return &ClusterSummary{}
}

func (p *ClusterSummary) GetSupervisors() []*SupervisorSummary {
	return p.Supervisors
}

func (p *ClusterSummary) GetTopologies() []*TopologySummary {
	return p.Topologies
}

func (p *ClusterSummary) GetNimbuses() []*NimbusSummary {
	return p.Nimbuses
}

func (p *ClusterSummary) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSupervisors bool = false
	var issetTopologies bool = false
	var issetNimbuses bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSupervisors = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetTopologies = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetNimbuses = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSupervisors {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Supervisors is not set"))
	}
	if !issetTopologies {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Topologies is not set"))
	}
	if !issetNimbuses {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Nimbuses is not set"))
	}
	return nil
}

func (p *ClusterSummary) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SupervisorSummary, 0, size)
	p.Supervisors = tSlice
	for i := 0; i < size; i++ {
		_elem47 := &SupervisorSummary{
			Version: "VERSION_NOT_PROVIDED",
		}
		if err := _elem47.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem47), err)
		}
		p.Supervisors = append(p.Supervisors, _elem47)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ClusterSummary) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TopologySummary, 0, size)
	p.Topologies = tSlice
	for i := 0; i < size; i++ {
		_elem48 := &TopologySummary{}
		if err := _elem48.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem48), err)
		}
		p.Topologies = append(p.Topologies, _elem48)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ClusterSummary) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*NimbusSummary, 0, size)
	p.Nimbuses = tSlice
	for i := 0; i < size; i++ {
		_elem49 := &NimbusSummary{}
		if err := _elem49.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem49), err)
		}
		p.Nimbuses = append(p.Nimbuses, _elem49)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ClusterSummary) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ClusterSummary"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ClusterSummary) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "supervisors", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:supervisors: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Supervisors)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Supervisors {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:supervisors: ", p), err)
	}
	return err
}

func (p *ClusterSummary) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "topologies", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:topologies: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Topologies)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Topologies {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:topologies: ", p), err)
	}
	return err
}

func (p *ClusterSummary) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "nimbuses", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nimbuses: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Nimbuses)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Nimbuses {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nimbuses: ", p), err)
	}
	return err
}

func (p *ClusterSummary) Equals(other *ClusterSummary) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Supervisors) != len(other.Supervisors) {
		return false
	}
	for i, _tgt := range p.Supervisors {
		_src50 := other.Supervisors[i]
		if !_tgt.Equals(_src50) {
			return false
		}
	}
	if len(p.Topologies) != len(other.Topologies) {
		return false
	}
	for i, _tgt := range p.Topologies {
		_src51 := other.Topologies[i]
		if !_tgt.Equals(_src51) {
			return false
		}
	}
	if len(p.Nimbuses) != len(other.Nimbuses) {
		return false
	}
	for i, _tgt := range p.Nimbuses {
		_src52 := other.Nimbuses[i]
		if !_tgt.Equals(_src52) {
			return false
		}
	}
	return true
}

func (p *ClusterSummary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClusterSummary(%+v)", *p)
}

func (p *ClusterSummary) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.ClusterSummary",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ClusterSummary)(nil)

func (p *ClusterSummary) Validate() error {
	return nil
}

// Attributes:
//   - Error
//   - ErrorTimeSecs
//   - Host
//   - Port
type ErrorInfo struct {
	Error         string  `thrift:"error,1,required" db:"error" json:"error"`
	ErrorTimeSecs int32   `thrift:"error_time_secs,2,required" db:"error_time_secs" json:"error_time_secs"`
	Host          *string `thrift:"host,3" db:"host" json:"host,omitempty"`
	Port          *int32  `thrift:"port,4" db:"port" json:"port,omitempty"`
}

func NewErrorInfo() *ErrorInfo {
	return &ErrorInfo{}
}

func (p *ErrorInfo) GetError() string {
	return p.Error
}

func (p *ErrorInfo) GetErrorTimeSecs() int32 {
	return p.ErrorTimeSecs
}

var ErrorInfo_Host_DEFAULT string

func (p *ErrorInfo) GetHost() string {
	if !p.IsSetHost() {
		return ErrorInfo_Host_DEFAULT
	}
	return *p.Host
}

var ErrorInfo_Port_DEFAULT int32

func (p *ErrorInfo) GetPort() int32 {
	if !p.IsSetPort() {
		return ErrorInfo_Port_DEFAULT
	}
	return *p.Port
}

func (p *ErrorInfo) IsSetHost() bool {
	return p.Host != nil
}

func (p *ErrorInfo) IsSetPort() bool {
	return p.Port != nil
}

func (p *ErrorInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetError bool = false
	var issetErrorTimeSecs bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetError = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetErrorTimeSecs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetError {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Error is not set"))
	}
	if !issetErrorTimeSecs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorTimeSecs is not set"))
	}
	return nil
}

func (p *ErrorInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Error = v
	}
	return nil
}

func (p *ErrorInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrorTimeSecs = v
	}
	return nil
}

func (p *ErrorInfo) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Host = &v
	}
	return nil
}

func (p *ErrorInfo) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Port = &v
	}
	return nil
}

func (p *ErrorInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ErrorInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ErrorInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *ErrorInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "error_time_secs", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_time_secs: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ErrorTimeSecs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error_time_secs (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_time_secs: ", p), err)
	}
	return err
}

func (p *ErrorInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetHost() {
		if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:host: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Host)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.host (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:host: ", p), err)
		}
	}
	return err
}

func (p *ErrorInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPort() {
		if err := oprot.WriteFieldBegin(ctx, "port", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:port: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.Port)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.port (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:port: ", p), err)
		}
	}
	return err
}

func (p *ErrorInfo) Equals(other *ErrorInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Error != other.Error {
		return false
	}
	if p.ErrorTimeSecs != other.ErrorTimeSecs {
		return false
	}
	if p.Host != other.Host {
		if p.Host == nil || other.Host == nil {
			return false
		}
		if (*p.Host) != (*other.Host) {
			return false
		}
	}
	if p.Port != other.Port {
		if p.Port == nil || other.Port == nil {
			return false
		}
		if (*p.Port) != (*other.Port) {
			return false
		}
	}
	return true
}

func (p *ErrorInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ErrorInfo(%+v)", *p)
}

func (p *ErrorInfo) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.ErrorInfo",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ErrorInfo)(nil)

func (p *ErrorInfo) Validate() error {
	return nil
}

// Attributes:
//   - Acked
//   - Failed
//   - ProcessMsAvg
//   - Executed
//   - ExecuteMsAvg
type BoltStats struct {
	Acked        map[string]map[*GlobalStreamId]int64   `thrift:"acked,1,required" db:"acked" json:"acked"`
	Failed       map[string]map[*GlobalStreamId]int64   `thrift:"failed,2,required" db:"failed" json:"failed"`
	ProcessMsAvg map[string]map[*GlobalStreamId]float64 `thrift:"process_ms_avg,3,required" db:"process_ms_avg" json:"process_ms_avg"`
	Executed     map[string]map[*GlobalStreamId]int64   `thrift:"executed,4,required" db:"executed" json:"executed"`
	ExecuteMsAvg map[string]map[*GlobalStreamId]float64 `thrift:"execute_ms_avg,5,required" db:"execute_ms_avg" json:"execute_ms_avg"`
}

func NewBoltStats() *BoltStats {
	return &BoltStats{}
}

func (p *BoltStats) GetAcked() map[string]map[*GlobalStreamId]int64 {
	return p.Acked
}

func (p *BoltStats) GetFailed() map[string]map[*GlobalStreamId]int64 {
	return p.Failed
}

func (p *BoltStats) GetProcessMsAvg() map[string]map[*GlobalStreamId]float64 {
	return p.ProcessMsAvg
}

func (p *BoltStats) GetExecuted() map[string]map[*GlobalStreamId]int64 {
	return p.Executed
}

func (p *BoltStats) GetExecuteMsAvg() map[string]map[*GlobalStreamId]float64 {
	return p.ExecuteMsAvg
}

func (p *BoltStats) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetAcked bool = false
	var issetFailed bool = false
	var issetProcessMsAvg bool = false
	var issetExecuted bool = false
	var issetExecuteMsAvg bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetAcked = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetFailed = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetProcessMsAvg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetExecuted = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetExecuteMsAvg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetAcked {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Acked is not set"))
	}
	if !issetFailed {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Failed is not set"))
	}
	if !issetProcessMsAvg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ProcessMsAvg is not set"))
	}
	if !issetExecuted {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Executed is not set"))
	}
	if !issetExecuteMsAvg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExecuteMsAvg is not set"))
	}
	return nil
}

func (p *BoltStats) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[*GlobalStreamId]int64, size)
	p.Acked = tMap
	for i := 0; i < size; i++ {
		var _key53 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key53 = v
		}
		_, _, size, err := iprot.ReadMapBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[*GlobalStreamId]int64, size)
		_val54 := tMap
		for i := 0; i < size; i++ {
			_key55 := &GlobalStreamId{}
			if err := _key55.Read(ctx, iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _key55), err)
			}
			var _val56 int64
			if v, err := iprot.ReadI64(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val56 = v
			}
			_val54[_key55] = _val56
		}
		if err := iprot.ReadMapEnd(ctx); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.Acked[_key53] = _val54
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *BoltStats) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[*GlobalStreamId]int64, size)
	p.Failed = tMap
	for i := 0; i < size; i++ {
		var _key57 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key57 = v
		}
		_, _, size, err := iprot.ReadMapBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[*GlobalStreamId]int64, size)
		_val58 := tMap
		for i := 0; i < size; i++ {
			_key59 := &GlobalStreamId{}
			if err := _key59.Read(ctx, iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _key59), err)
			}
			var _val60 int64
			if v, err := iprot.ReadI64(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val60 = v
			}
			_val58[_key59] = _val60
		}
		if err := iprot.ReadMapEnd(ctx); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.Failed[_key57] = _val58
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *BoltStats) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[*GlobalStreamId]float64, size)
	p.ProcessMsAvg = tMap
	for i := 0; i < size; i++ {
		var _key61 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key61 = v
		}
		_, _, size, err := iprot.ReadMapBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[*GlobalStreamId]float64, size)
		_val62 := tMap
		for i := 0; i < size; i++ {
			_key63 := &GlobalStreamId{}
			if err := _key63.Read(ctx, iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _key63), err)
			}
			var _val64 float64
			if v, err := iprot.ReadDouble(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val64 = v
			}
			_val62[_key63] = _val64
		}
		if err := iprot.ReadMapEnd(ctx); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.ProcessMsAvg[_key61] = _val62
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *BoltStats) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[*GlobalStreamId]int64, size)
	p.Executed = tMap
	for i := 0; i < size; i++ {
		var _key65 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key65 = v
		}
		_, _, size, err := iprot.ReadMapBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[*GlobalStreamId]int64, size)
		_val66 := tMap
		for i := 0; i < size; i++ {
			_key67 := &GlobalStreamId{}
			if err := _key67.Read(ctx, iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _key67), err)
			}
			var _val68 int64
			if v, err := iprot.ReadI64(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val68 = v
			}
			_val66[_key67] = _val68
		}
		if err := iprot.ReadMapEnd(ctx); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.Executed[_key65] = _val66
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *BoltStats) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[*GlobalStreamId]float64, size)
	p.ExecuteMsAvg = tMap
	for i := 0; i < size; i++ {
		var _key69 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key69 = v
		}
		_, _, size, err := iprot.ReadMapBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[*GlobalStreamId]float64, size)
		_val70 := tMap
		for i := 0; i < size; i++ {
			_key71 := &GlobalStreamId{}
			if err := _key71.Read(ctx, iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _key71), err)
			}
			var _val72 float64
			if v, err := iprot.ReadDouble(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val72 = v
			}
			_val70[_key71] = _val72
		}
		if err := iprot.ReadMapEnd(ctx); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.ExecuteMsAvg[_key69] = _val70
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *BoltStats) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BoltStats"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BoltStats) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "acked", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:acked: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.MAP, len(p.Acked)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Acked {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRUCT, thrift.I64, len(v)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range v {
			if err := k.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", k), err)
			}
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:acked: ", p), err)
	}
	return err
}

func (p *BoltStats) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "failed", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:failed: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.MAP, len(p.Failed)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Failed {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRUCT, thrift.I64, len(v)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range v {
			if err := k.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", k), err)
			}
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:failed: ", p), err)
	}
	return err
}

func (p *BoltStats) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "process_ms_avg", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:process_ms_avg: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.MAP, len(p.ProcessMsAvg)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ProcessMsAvg {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRUCT, thrift.DOUBLE, len(v)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range v {
			if err := k.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", k), err)
			}
			if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:process_ms_avg: ", p), err)
	}
	return err
}

func (p *BoltStats) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "executed", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:executed: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.MAP, len(p.Executed)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Executed {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRUCT, thrift.I64, len(v)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range v {
			if err := k.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", k), err)
			}
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:executed: ", p), err)
	}
	return err
}

func (p *BoltStats) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "execute_ms_avg", thrift.MAP, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:execute_ms_avg: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.MAP, len(p.ExecuteMsAvg)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ExecuteMsAvg {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRUCT, thrift.DOUBLE, len(v)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range v {
			if err := k.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", k), err)
			}
			if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:execute_ms_avg: ", p), err)
	}
	return err
}

func (p *BoltStats) Equals(other *BoltStats) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Acked) != len(other.Acked) {
		return false
	}
	for k, _tgt := range p.Acked {
		_src73 := other.Acked[k]
		if len(_tgt) != len(_src73) {
			return false
		}
		for k, _tgt := range _tgt {
			_src74 := _src73[k]
			if _tgt != _src74 {
				return false
			}
		}
	}
	if len(p.Failed) != len(other.Failed) {
		return false
	}
	for k, _tgt := range p.Failed {
		_src75 := other.Failed[k]
		if len(_tgt) != len(_src75) {
			return false
		}
		for k, _tgt := range _tgt {
			_src76 := _src75[k]
			if _tgt != _src76 {
				return false
			}
		}
	}
	if len(p.ProcessMsAvg) != len(other.ProcessMsAvg) {
		return false
	}
	for k, _tgt := range p.ProcessMsAvg {
		_src77 := other.ProcessMsAvg[k]
		if len(_tgt) != len(_src77) {
			return false
		}
		for k, _tgt := range _tgt {
			_src78 := _src77[k]
			if _tgt != _src78 {
				return false
			}
		}
	}
	if len(p.Executed) != len(other.Executed) {
		return false
	}
	for k, _tgt := range p.Executed {
		_src79 := other.Executed[k]
		if len(_tgt) != len(_src79) {
			return false
		}
		for k, _tgt := range _tgt {
			_src80 := _src79[k]
			if _tgt != _src80 {
				return false
			}
		}
	}
	if len(p.ExecuteMsAvg) != len(other.ExecuteMsAvg) {
		return false
	}
	for k, _tgt := range p.ExecuteMsAvg {
		_src81 := other.ExecuteMsAvg[k]
		if len(_tgt) != len(_src81) {
			return false
		}
		for k, _tgt := range _tgt {
			_src82 := _src81[k]
			if _tgt != _src82 {
				return false
			}
		}
	}
	return true
}

func (p *BoltStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BoltStats(%+v)", *p)
}

func (p *BoltStats) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.BoltStats",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*BoltStats)(nil)

func (p *BoltStats) Validate() error {
	return nil
}

// Attributes:
//   - Acked
//   - Failed
//   - CompleteMsAvg
type SpoutStats struct {
	Acked         map[string]map[string]int64   `thrift:"acked,1,required" db:"acked" json:"acked"`
	Failed        map[string]map[string]int64   `thrift:"failed,2,required" db:"failed" json:"failed"`
	CompleteMsAvg map[string]map[string]float64 `thrift:"complete_ms_avg,3,required" db:"complete_ms_avg" json:"complete_ms_avg"`
}

func NewSpoutStats() *SpoutStats {
	return &SpoutStats{}
}

func (p *SpoutStats) GetAcked() map[string]map[string]int64 {
	return p.Acked
}

func (p *SpoutStats) GetFailed() map[string]map[string]int64 {
	return p.Failed
}

func (p *SpoutStats) GetCompleteMsAvg() map[string]map[string]float64 {
	return p.CompleteMsAvg
}

func (p *SpoutStats) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetAcked bool = false
	var issetFailed bool = false
	var issetCompleteMsAvg bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetAcked = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetFailed = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetCompleteMsAvg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetAcked {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Acked is not set"))
	}
	if !issetFailed {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Failed is not set"))
	}
	if !issetCompleteMsAvg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CompleteMsAvg is not set"))
	}
	return nil
}

func (p *SpoutStats) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[string]int64, size)
	p.Acked = tMap
	for i := 0; i < size; i++ {
		var _key83 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key83 = v
		}
		_, _, size, err := iprot.ReadMapBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]int64, size)
		_val84 := tMap
		for i := 0; i < size; i++ {
			var _key85 string
			if v, err := iprot.ReadString(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key85 = v
			}
			var _val86 int64
			if v, err := iprot.ReadI64(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val86 = v
			}
			_val84[_key85] = _val86
		}
		if err := iprot.ReadMapEnd(ctx); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.Acked[_key83] = _val84
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SpoutStats) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[string]int64, size)
	p.Failed = tMap
	for i := 0; i < size; i++ {
		var _key87 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key87 = v
		}
		_, _, size, err := iprot.ReadMapBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]int64, size)
		_val88 := tMap
		for i := 0; i < size; i++ {
			var _key89 string
			if v, err := iprot.ReadString(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key89 = v
			}
			var _val90 int64
			if v, err := iprot.ReadI64(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val90 = v
			}
			_val88[_key89] = _val90
		}
		if err := iprot.ReadMapEnd(ctx); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.Failed[_key87] = _val88
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SpoutStats) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[string]float64, size)
	p.CompleteMsAvg = tMap
	for i := 0; i < size; i++ {
		var _key91 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key91 = v
		}
		_, _, size, err := iprot.ReadMapBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]float64, size)
		_val92 := tMap
		for i := 0; i < size; i++ {
			var _key93 string
			if v, err := iprot.ReadString(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key93 = v
			}
			var _val94 float64
			if v, err := iprot.ReadDouble(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val94 = v
			}
			_val92[_key93] = _val94
		}
		if err := iprot.ReadMapEnd(ctx); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.CompleteMsAvg[_key91] = _val92
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SpoutStats) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpoutStats"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SpoutStats) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "acked", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:acked: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.MAP, len(p.Acked)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Acked {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(v)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range v {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:acked: ", p), err)
	}
	return err
}

func (p *SpoutStats) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "failed", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:failed: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.MAP, len(p.Failed)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Failed {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(v)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range v {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:failed: ", p), err)
	}
	return err
}

func (p *SpoutStats) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "complete_ms_avg", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:complete_ms_avg: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.MAP, len(p.CompleteMsAvg)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.CompleteMsAvg {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.DOUBLE, len(v)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range v {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:complete_ms_avg: ", p), err)
	}
	return err
}

func (p *SpoutStats) Equals(other *SpoutStats) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Acked) != len(other.Acked) {
		return false
	}
	for k, _tgt := range p.Acked {
		_src95 := other.Acked[k]
		if len(_tgt) != len(_src95) {
			return false
		}
		for k, _tgt := range _tgt {
			_src96 := _src95[k]
			if _tgt != _src96 {
				return false
			}
		}
	}
	if len(p.Failed) != len(other.Failed) {
		return false
	}
	for k, _tgt := range p.Failed {
		_src97 := other.Failed[k]
		if len(_tgt) != len(_src97) {
			return false
		}
		for k, _tgt := range _tgt {
			_src98 := _src97[k]
			if _tgt != _src98 {
				return false
			}
		}
	}
	if len(p.CompleteMsAvg) != len(other.CompleteMsAvg) {
		return false
	}
	for k, _tgt := range p.CompleteMsAvg {
		_src99 := other.CompleteMsAvg[k]
		if len(_tgt) != len(_src99) {
			return false
		}
		for k, _tgt := range _tgt {
			_src100 := _src99[k]
			if _tgt != _src100 {
				return false
			}
		}
	}
	return true
}

func (p *SpoutStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpoutStats(%+v)", *p)
}

func (p *SpoutStats) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SpoutStats",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SpoutStats)(nil)

func (p *SpoutStats) Validate() error {
	return nil
}

// Attributes:
//   - Bolt
//   - Spout
type ExecutorSpecificStats struct {
	Bolt  *BoltStats  `thrift:"bolt,1" db:"bolt" json:"bolt,omitempty"`
	Spout *SpoutStats `thrift:"spout,2" db:"spout" json:"spout,omitempty"`
}

func NewExecutorSpecificStats() *ExecutorSpecificStats {
	return &ExecutorSpecificStats{}
}

var ExecutorSpecificStats_Bolt_DEFAULT *BoltStats

func (p *ExecutorSpecificStats) GetBolt() *BoltStats {
	if !p.IsSetBolt() {
		return ExecutorSpecificStats_Bolt_DEFAULT
	}
	return p.Bolt
}

var ExecutorSpecificStats_Spout_DEFAULT *SpoutStats

func (p *ExecutorSpecificStats) GetSpout() *SpoutStats {
	if !p.IsSetSpout() {
		return ExecutorSpecificStats_Spout_DEFAULT
	}
	return p.Spout
}

func (p *ExecutorSpecificStats) CountSetFieldsExecutorSpecificStats() int {
	count := 0
	if p.IsSetBolt() {
		count++
	}
	if p.IsSetSpout() {
		count++
	}
	return count

}

func (p *ExecutorSpecificStats) IsSetBolt() bool {
	return p.Bolt != nil
}

func (p *ExecutorSpecificStats) IsSetSpout() bool {
	return p.Spout != nil
}

func (p *ExecutorSpecificStats) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExecutorSpecificStats) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Bolt = &BoltStats{}
	if err := p.Bolt.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Bolt), err)
	}
	return nil
}

func (p *ExecutorSpecificStats) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Spout = &SpoutStats{}
	if err := p.Spout.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Spout), err)
	}
	return nil
}

func (p *ExecutorSpecificStats) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsExecutorSpecificStats(); c != 1 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("%T write union: exactly one field must be set (%d set)", p, c))
	}
	if err := oprot.WriteStructBegin(ctx, "ExecutorSpecificStats"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExecutorSpecificStats) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBolt() {
		if err := oprot.WriteFieldBegin(ctx, "bolt", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bolt: ", p), err)
		}
		if err := p.Bolt.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Bolt), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bolt: ", p), err)
		}
	}
	return err
}

func (p *ExecutorSpecificStats) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSpout() {
		if err := oprot.WriteFieldBegin(ctx, "spout", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:spout: ", p), err)
		}
		if err := p.Spout.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Spout), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:spout: ", p), err)
		}
	}
	return err
}

func (p *ExecutorSpecificStats) Equals(other *ExecutorSpecificStats) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Bolt.Equals(other.Bolt) {
		return false
	}
	if !p.Spout.Equals(other.Spout) {
		return false
	}
	return true
}

func (p *ExecutorSpecificStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecutorSpecificStats(%+v)", *p)
}

func (p *ExecutorSpecificStats) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.ExecutorSpecificStats",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ExecutorSpecificStats)(nil)

func (p *ExecutorSpecificStats) Validate() error {
	return nil
}

// Attributes:
//   - Emitted
//   - Transferred
//   - Specific
//   - Rate
type ExecutorStats struct {
	Emitted     map[string]map[string]int64 `thrift:"emitted,1,required" db:"emitted" json:"emitted"`
	Transferred map[string]map[string]int64 `thrift:"transferred,2,required" db:"transferred" json:"transferred"`
	Specific    *ExecutorSpecificStats      `thrift:"specific,3,required" db:"specific" json:"specific"`
	Rate        float64                     `thrift:"rate,4,required" db:"rate" json:"rate"`
}

func NewExecutorStats() *ExecutorStats {
	return &ExecutorStats{}
}

func (p *ExecutorStats) GetEmitted() map[string]map[string]int64 {
	return p.Emitted
}

func (p *ExecutorStats) GetTransferred() map[string]map[string]int64 {
	return p.Transferred
}

var ExecutorStats_Specific_DEFAULT *ExecutorSpecificStats

func (p *ExecutorStats) GetSpecific() *ExecutorSpecificStats {
	if !p.IsSetSpecific() {
		return ExecutorStats_Specific_DEFAULT
	}
	return p.Specific
}

func (p *ExecutorStats) GetRate() float64 {
	return p.Rate
}

func (p *ExecutorStats) IsSetSpecific() bool {
	return p.Specific != nil
}

func (p *ExecutorStats) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetEmitted bool = false
	var issetTransferred bool = false
	var issetSpecific bool = false
	var issetRate bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetEmitted = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetTransferred = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetSpecific = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetRate = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetEmitted {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Emitted is not set"))
	}
	if !issetTransferred {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Transferred is not set"))
	}
	if !issetSpecific {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Specific is not set"))
	}
	if !issetRate {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Rate is not set"))
	}
	return nil
}

func (p *ExecutorStats) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[string]int64, size)
	p.Emitted = tMap
	for i := 0; i < size; i++ {
		var _key101 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key101 = v
		}
		_, _, size, err := iprot.ReadMapBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]int64, size)
		_val102 := tMap
		for i := 0; i < size; i++ {
			var _key103 string
			if v, err := iprot.ReadString(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key103 = v
			}
			var _val104 int64
			if v, err := iprot.ReadI64(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val104 = v
			}
			_val102[_key103] = _val104
		}
		if err := iprot.ReadMapEnd(ctx); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.Emitted[_key101] = _val102
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ExecutorStats) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[string]int64, size)
	p.Transferred = tMap
	for i := 0; i < size; i++ {
		var _key105 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key105 = v
		}
		_, _, size, err := iprot.ReadMapBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]int64, size)
		_val106 := tMap
		for i := 0; i < size; i++ {
			var _key107 string
			if v, err := iprot.ReadString(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key107 = v
			}
			var _val108 int64
			if v, err := iprot.ReadI64(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val108 = v
			}
			_val106[_key107] = _val108
		}
		if err := iprot.ReadMapEnd(ctx); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.Transferred[_key105] = _val106
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ExecutorStats) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.Specific = &ExecutorSpecificStats{}
	if err := p.Specific.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Specific), err)
	}
	return nil
}

func (p *ExecutorStats) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Rate = v
	}
	return nil
}

func (p *ExecutorStats) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ExecutorStats"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExecutorStats) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "emitted", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:emitted: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.MAP, len(p.Emitted)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Emitted {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(v)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range v {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:emitted: ", p), err)
	}
	return err
}

func (p *ExecutorStats) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "transferred", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:transferred: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.MAP, len(p.Transferred)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Transferred {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(v)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range v {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:transferred: ", p), err)
	}
	return err
}

func (p *ExecutorStats) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "specific", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:specific: ", p), err)
	}
	if err := p.Specific.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Specific), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:specific: ", p), err)
	}
	return err
}

func (p *ExecutorStats) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "rate", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:rate: ", p), err)
	}
	if err := oprot.WriteDouble(ctx, float64(p.Rate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rate (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:rate: ", p), err)
	}
	return err
}

func (p *ExecutorStats) Equals(other *ExecutorStats) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Emitted) != len(other.Emitted) {
		return false
	}
	for k, _tgt := range p.Emitted {
		_src109 := other.Emitted[k]
		if len(_tgt) != len(_src109) {
			return false
		}
		for k, _tgt := range _tgt {
			_src110 := _src109[k]
			if _tgt != _src110 {
				return false
			}
		}
	}
	if len(p.Transferred) != len(other.Transferred) {
		return false
	}
	for k, _tgt := range p.Transferred {
		_src111 := other.Transferred[k]
		if len(_tgt) != len(_src111) {
			return false
		}
		for k, _tgt := range _tgt {
			_src112 := _src111[k]
			if _tgt != _src112 {
				return false
			}
		}
	}
	if !p.Specific.Equals(other.Specific) {
		return false
	}
	if p.Rate != other.Rate {
		return false
	}
	return true
}

func (p *ExecutorStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecutorStats(%+v)", *p)
}

func (p *ExecutorStats) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.ExecutorStats",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ExecutorStats)(nil)

func (p *ExecutorStats) Validate() error {
	return nil
}

// Attributes:
//   - TaskStart
//   - TaskEnd
type ExecutorInfo struct {
	TaskStart int32 `thrift:"task_start,1,required" db:"task_start" json:"task_start"`
	TaskEnd   int32 `thrift:"task_end,2,required" db:"task_end" json:"task_end"`
}

func NewExecutorInfo() *ExecutorInfo {
	return &ExecutorInfo{}
}

func (p *ExecutorInfo) GetTaskStart() int32 {
	return p.TaskStart
}

func (p *ExecutorInfo) GetTaskEnd() int32 {
	return p.TaskEnd
}

func (p *ExecutorInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTaskStart bool = false
	var issetTaskEnd bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetTaskStart = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetTaskEnd = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTaskStart {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TaskStart is not set"))
	}
	if !issetTaskEnd {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TaskEnd is not set"))
	}
	return nil
}

func (p *ExecutorInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TaskStart = v
	}
	return nil
}

func (p *ExecutorInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TaskEnd = v
	}
	return nil
}

func (p *ExecutorInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ExecutorInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExecutorInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "task_start", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:task_start: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.TaskStart)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.task_start (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:task_start: ", p), err)
	}
	return err
}

func (p *ExecutorInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "task_end", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:task_end: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.TaskEnd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.task_end (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:task_end: ", p), err)
	}
	return err
}

func (p *ExecutorInfo) Equals(other *ExecutorInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.TaskStart != other.TaskStart {
		return false
	}
	if p.TaskEnd != other.TaskEnd {
		return false
	}
	return true
}

func (p *ExecutorInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecutorInfo(%+v)", *p)
}

func (p *ExecutorInfo) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.ExecutorInfo",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ExecutorInfo)(nil)

func (p *ExecutorInfo) Validate() error {
	return nil
}

// Attributes:
//   - ExecutorInfo
//   - ComponentID
//   - Host
//   - Port
//   - UptimeSecs
//   - Stats
type ExecutorSummary struct {
	ExecutorInfo *ExecutorInfo `thrift:"executor_info,1,required" db:"executor_info" json:"executor_info"`
	ComponentID  string        `thrift:"component_id,2,required" db:"component_id" json:"component_id"`
	Host         string        `thrift:"host,3,required" db:"host" json:"host"`
	Port         int32         `thrift:"port,4,required" db:"port" json:"port"`
	UptimeSecs   int32         `thrift:"uptime_secs,5,required" db:"uptime_secs" json:"uptime_secs"`
	// unused field # 6
	Stats *ExecutorStats `thrift:"stats,7" db:"stats" json:"stats,omitempty"`
}

func NewExecutorSummary() *ExecutorSummary {
	return &ExecutorSummary{}
}

var ExecutorSummary_ExecutorInfo_DEFAULT *ExecutorInfo

func (p *ExecutorSummary) GetExecutorInfo() *ExecutorInfo {
	if !p.IsSetExecutorInfo() {
		return ExecutorSummary_ExecutorInfo_DEFAULT
	}
	return p.ExecutorInfo
}

func (p *ExecutorSummary) GetComponentID() string {
	return p.ComponentID
}

func (p *ExecutorSummary) GetHost() string {
	return p.Host
}

func (p *ExecutorSummary) GetPort() int32 {
	return p.Port
}

func (p *ExecutorSummary) GetUptimeSecs() int32 {
	return p.UptimeSecs
}

var ExecutorSummary_Stats_DEFAULT *ExecutorStats

func (p *ExecutorSummary) GetStats() *ExecutorStats {
	if !p.IsSetStats() {
		return ExecutorSummary_Stats_DEFAULT
	}
	return p.Stats
}

func (p *ExecutorSummary) IsSetExecutorInfo() bool {
	return p.ExecutorInfo != nil
}

func (p *ExecutorSummary) IsSetStats() bool {
	return p.Stats != nil
}

func (p *ExecutorSummary) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetExecutorInfo bool = false
	var issetComponentID bool = false
	var issetHost bool = false
	var issetPort bool = false
	var issetUptimeSecs bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetExecutorInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetComponentID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetHost = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetPort = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetUptimeSecs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetExecutorInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExecutorInfo is not set"))
	}
	if !issetComponentID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComponentID is not set"))
	}
	if !issetHost {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Host is not set"))
	}
	if !issetPort {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Port is not set"))
	}
	if !issetUptimeSecs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UptimeSecs is not set"))
	}
	return nil
}

func (p *ExecutorSummary) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.ExecutorInfo = &ExecutorInfo{}
	if err := p.ExecutorInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExecutorInfo), err)
	}
	return nil
}

func (p *ExecutorSummary) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ComponentID = v
	}
	return nil
}

func (p *ExecutorSummary) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Host = v
	}
	return nil
}

func (p *ExecutorSummary) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *ExecutorSummary) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.UptimeSecs = v
	}
	return nil
}

func (p *ExecutorSummary) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	p.Stats = &ExecutorStats{}
	if err := p.Stats.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Stats), err)
	}
	return nil
}

func (p *ExecutorSummary) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ExecutorSummary"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExecutorSummary) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "executor_info", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:executor_info: ", p), err)
	}
	if err := p.ExecutorInfo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExecutorInfo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:executor_info: ", p), err)
	}
	return err
}

func (p *ExecutorSummary) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "component_id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:component_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ComponentID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:component_id: ", p), err)
	}
	return err
}

func (p *ExecutorSummary) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:host: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Host)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.host (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:host: ", p), err)
	}
	return err
}

func (p *ExecutorSummary) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "port", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:port: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:port: ", p), err)
	}
	return err
}

func (p *ExecutorSummary) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "uptime_secs", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:uptime_secs: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UptimeSecs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uptime_secs (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:uptime_secs: ", p), err)
	}
	return err
}

func (p *ExecutorSummary) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetStats() {
		if err := oprot.WriteFieldBegin(ctx, "stats", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:stats: ", p), err)
		}
		if err := p.Stats.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Stats), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:stats: ", p), err)
		}
	}
	return err
}

func (p *ExecutorSummary) Equals(other *ExecutorSummary) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.ExecutorInfo.Equals(other.ExecutorInfo) {
		return false
	}
	if p.ComponentID != other.ComponentID {
		return false
	}
	if p.Host != other.Host {
		return false
	}
	if p.Port != other.Port {
		return false
	}
	if p.UptimeSecs != other.UptimeSecs {
		return false
	}
	if !p.Stats.Equals(other.Stats) {
		return false
	}
	return true
}

func (p *ExecutorSummary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecutorSummary(%+v)", *p)
}

func (p *ExecutorSummary) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.ExecutorSummary",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ExecutorSummary)(nil)

func (p *ExecutorSummary) Validate() error {
	return nil
}

// Attributes:
//   - Enable
//   - Samplingpct
type DebugOptions struct {
	Enable      *bool    `thrift:"enable,1" db:"enable" json:"enable,omitempty"`
	Samplingpct *float64 `thrift:"samplingpct,2" db:"samplingpct" json:"samplingpct,omitempty"`
}

func NewDebugOptions() *DebugOptions {
	return &DebugOptions{}
}

var DebugOptions_Enable_DEFAULT bool

func (p *DebugOptions) GetEnable() bool {
	if !p.IsSetEnable() {
		return DebugOptions_Enable_DEFAULT
	}
	return *p.Enable
}

var DebugOptions_Samplingpct_DEFAULT float64

func (p *DebugOptions) GetSamplingpct() float64 {
	if !p.IsSetSamplingpct() {
		return DebugOptions_Samplingpct_DEFAULT
	}
	return *p.Samplingpct
}

func (p *DebugOptions) IsSetEnable() bool {
	return p.Enable != nil
}

func (p *DebugOptions) IsSetSamplingpct() bool {
	return p.Samplingpct != nil
}

func (p *DebugOptions) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DebugOptions) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Enable = &v
	}
	return nil
}

func (p *DebugOptions) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Samplingpct = &v
	}
	return nil
}

func (p *DebugOptions) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "DebugOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DebugOptions) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetEnable() {
		if err := oprot.WriteFieldBegin(ctx, "enable", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:enable: ", p), err)
		}
		if err := oprot.WriteBool(ctx, bool(*p.Enable)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.enable (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:enable: ", p), err)
		}
	}
	return err
}

func (p *DebugOptions) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSamplingpct() {
		if err := oprot.WriteFieldBegin(ctx, "samplingpct", thrift.DOUBLE, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:samplingpct: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.Samplingpct)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.samplingpct (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:samplingpct: ", p), err)
		}
	}
	return err
}

func (p *DebugOptions) Equals(other *DebugOptions) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Enable != other.Enable {
		if p.Enable == nil || other.Enable == nil {
			return false
		}
		if (*p.Enable) != (*other.Enable) {
			return false
		}
	}
	if p.Samplingpct != other.Samplingpct {
		if p.Samplingpct == nil || other.Samplingpct == nil {
			return false
		}
		if (*p.Samplingpct) != (*other.Samplingpct) {
			return false
		}
	}
	return true
}

func (p *DebugOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DebugOptions(%+v)", *p)
}

func (p *DebugOptions) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.DebugOptions",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DebugOptions)(nil)

func (p *DebugOptions) Validate() error {
	return nil
}

// Attributes:
//   - ID
//   - Name
//   - UptimeSecs
//   - Executors
//   - Status
//   - Errors
//   - ComponentDebug
//   - StormVersion
//   - SchedStatus
//   - Owner
//   - ReplicationCount
//   - RequestedMemonheap
//   - RequestedMemoffheap
//   - RequestedCPU
//   - AssignedMemonheap
//   - AssignedMemoffheap
//   - AssignedCPU
type TopologyInfo struct {
	ID             string                   `thrift:"id,1,required" db:"id" json:"id"`
	Name           string                   `thrift:"name,2,required" db:"name" json:"name"`
	UptimeSecs     int32                    `thrift:"uptime_secs,3,required" db:"uptime_secs" json:"uptime_secs"`
	Executors      []*ExecutorSummary       `thrift:"executors,4,required" db:"executors" json:"executors"`
	Status         string                   `thrift:"status,5,required" db:"status" json:"status"`
	Errors         map[string][]*ErrorInfo  `thrift:"errors,6,required" db:"errors" json:"errors"`
	ComponentDebug map[string]*DebugOptions `thrift:"component_debug,7" db:"component_debug" json:"component_debug,omitempty"`
	StormVersion   *string                  `thrift:"storm_version,8" db:"storm_version" json:"storm_version,omitempty"`
	// unused fields # 9 to 512
	SchedStatus      *string `thrift:"sched_status,513" db:"sched_status" json:"sched_status,omitempty"`
	Owner            *string `thrift:"owner,514" db:"owner" json:"owner,omitempty"`
	ReplicationCount *int32  `thrift:"replication_count,515" db:"replication_count" json:"replication_count,omitempty"`
	// unused fields # 516 to 520
	RequestedMemonheap  *float64 `thrift:"requested_memonheap,521" db:"requested_memonheap" json:"requested_memonheap,omitempty"`
	RequestedMemoffheap *float64 `thrift:"requested_memoffheap,522" db:"requested_memoffheap" json:"requested_memoffheap,omitempty"`
	RequestedCPU        *float64 `thrift:"requested_cpu,523" db:"requested_cpu" json:"requested_cpu,omitempty"`
	AssignedMemonheap   *float64 `thrift:"assigned_memonheap,524" db:"assigned_memonheap" json:"assigned_memonheap,omitempty"`
	AssignedMemoffheap  *float64 `thrift:"assigned_memoffheap,525" db:"assigned_memoffheap" json:"assigned_memoffheap,omitempty"`
	AssignedCPU         *float64 `thrift:"assigned_cpu,526" db:"assigned_cpu" json:"assigned_cpu,omitempty"`
}

func NewTopologyInfo() *TopologyInfo {
	return &TopologyInfo{}
}

func (p *TopologyInfo) GetID() string {
	return p.ID
}

func (p *TopologyInfo) GetName() string {
	return p.Name
}

func (p *TopologyInfo) GetUptimeSecs() int32 {
	return p.UptimeSecs
}

func (p *TopologyInfo) GetExecutors() []*ExecutorSummary {
	return p.Executors
}

func (p *TopologyInfo) GetStatus() string {
	return p.Status
}

func (p *TopologyInfo) GetErrors() map[string][]*ErrorInfo {
	return p.Errors
}

var TopologyInfo_ComponentDebug_DEFAULT map[string]*DebugOptions

func (p *TopologyInfo) GetComponentDebug() map[string]*DebugOptions {
	return p.ComponentDebug
}

var TopologyInfo_StormVersion_DEFAULT string

func (p *TopologyInfo) GetStormVersion() string {
	if !p.IsSetStormVersion() {
		return TopologyInfo_StormVersion_DEFAULT
	}
	return *p.StormVersion
}

var TopologyInfo_SchedStatus_DEFAULT string

func (p *TopologyInfo) GetSchedStatus() string {
	if !p.IsSetSchedStatus() {
		return TopologyInfo_SchedStatus_DEFAULT
	}
	return *p.SchedStatus
}

var TopologyInfo_Owner_DEFAULT string

func (p *TopologyInfo) GetOwner() string {
	if !p.IsSetOwner() {
		return TopologyInfo_Owner_DEFAULT
	}
	return *p.Owner
}

var TopologyInfo_ReplicationCount_DEFAULT int32

func (p *TopologyInfo) GetReplicationCount() int32 {
	if !p.IsSetReplicationCount() {
		return TopologyInfo_ReplicationCount_DEFAULT
	}
	return *p.ReplicationCount
}

var TopologyInfo_RequestedMemonheap_DEFAULT float64

func (p *TopologyInfo) GetRequestedMemonheap() float64 {
	if !p.IsSetRequestedMemonheap() {
		return TopologyInfo_RequestedMemonheap_DEFAULT
	}
	return *p.RequestedMemonheap
}

var TopologyInfo_RequestedMemoffheap_DEFAULT float64

func (p *TopologyInfo) GetRequestedMemoffheap() float64 {
	if !p.IsSetRequestedMemoffheap() {
		return TopologyInfo_RequestedMemoffheap_DEFAULT
	}
	return *p.RequestedMemoffheap
}

var TopologyInfo_RequestedCPU_DEFAULT float64

func (p *TopologyInfo) GetRequestedCPU() float64 {
	if !p.IsSetRequestedCPU() {
		return TopologyInfo_RequestedCPU_DEFAULT
	}
	return *p.RequestedCPU
}

var TopologyInfo_AssignedMemonheap_DEFAULT float64

func (p *TopologyInfo) GetAssignedMemonheap() float64 {
	if !p.IsSetAssignedMemonheap() {
		return TopologyInfo_AssignedMemonheap_DEFAULT
	}
	return *p.AssignedMemonheap
}

var TopologyInfo_AssignedMemoffheap_DEFAULT float64

func (p *TopologyInfo) GetAssignedMemoffheap() float64 {
	if !p.IsSetAssignedMemoffheap() {
		return TopologyInfo_AssignedMemoffheap_DEFAULT
	}
	return *p.AssignedMemoffheap
}

var TopologyInfo_AssignedCPU_DEFAULT float64

func (p *TopologyInfo) GetAssignedCPU() float64 {
	if !p.IsSetAssignedCPU() {
		return TopologyInfo_AssignedCPU_DEFAULT
	}
	return *p.AssignedCPU
}

func (p *TopologyInfo) IsSetComponentDebug() bool {
	return p.ComponentDebug != nil
}

func (p *TopologyInfo) IsSetStormVersion() bool {
	return p.StormVersion != nil
}

func (p *TopologyInfo) IsSetSchedStatus() bool {
	return p.SchedStatus != nil
}

func (p *TopologyInfo) IsSetOwner() bool {
	return p.Owner != nil
}

func (p *TopologyInfo) IsSetReplicationCount() bool {
	return p.ReplicationCount != nil
}

func (p *TopologyInfo) IsSetRequestedMemonheap() bool {
	return p.RequestedMemonheap != nil
}

func (p *TopologyInfo) IsSetRequestedMemoffheap() bool {
	return p.RequestedMemoffheap != nil
}

func (p *TopologyInfo) IsSetRequestedCPU() bool {
	return p.RequestedCPU != nil
}

func (p *TopologyInfo) IsSetAssignedMemonheap() bool {
	return p.AssignedMemonheap != nil
}

func (p *TopologyInfo) IsSetAssignedMemoffheap() bool {
	return p.AssignedMemoffheap != nil
}

func (p *TopologyInfo) IsSetAssignedCPU() bool {
	return p.AssignedCPU != nil
}

func (p *TopologyInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetName bool = false
	var issetUptimeSecs bool = false
	var issetExecutors bool = false
	var issetStatus bool = false
	var issetErrors bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetUptimeSecs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetExecutors = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
				issetErrors = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 513:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField513(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 514:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField514(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 515:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField515(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 521:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField521(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 522:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField522(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 523:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField523(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 524:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField524(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 525:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField525(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 526:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField526(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetUptimeSecs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UptimeSecs is not set"))
	}
	if !issetExecutors {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Executors is not set"))
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetErrors {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Errors is not set"))
	}
	return nil
}

func (p *TopologyInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TopologyInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *TopologyInfo) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UptimeSecs = v
	}
	return nil
}

func (p *TopologyInfo) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ExecutorSummary, 0, size)
	p.Executors = tSlice
	for i := 0; i < size; i++ {
		_elem113 := &ExecutorSummary{}
		if err := _elem113.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem113), err)
		}
		p.Executors = append(p.Executors, _elem113)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TopologyInfo) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *TopologyInfo) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]*ErrorInfo, size)
	p.Errors = tMap
	for i := 0; i < size; i++ {
		var _key114 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key114 = v
		}
		_, size, err := iprot.ReadListBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]*ErrorInfo, 0, size)
		_val115 := tSlice
		for i := 0; i < size; i++ {
			_elem116 := &ErrorInfo{}
			if err := _elem116.Read(ctx, iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem116), err)
			}
			_val115 = append(_val115, _elem116)
		}
		if err := iprot.ReadListEnd(ctx); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Errors[_key114] = _val115
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TopologyInfo) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*DebugOptions, size)
	p.ComponentDebug = tMap
	for i := 0; i < size; i++ {
		var _key117 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key117 = v
		}
		_val118 := &DebugOptions{}
		if err := _val118.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val118), err)
		}
		p.ComponentDebug[_key117] = _val118
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TopologyInfo) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.StormVersion = &v
	}
	return nil
}

func (p *TopologyInfo) ReadField513(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 513: ", err)
	} else {
		p.SchedStatus = &v
	}
	return nil
}

func (p *TopologyInfo) ReadField514(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 514: ", err)
	} else {
		p.Owner = &v
	}
	return nil
}

func (p *TopologyInfo) ReadField515(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 515: ", err)
	} else {
		p.ReplicationCount = &v
	}
	return nil
}

func (p *TopologyInfo) ReadField521(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 521: ", err)
	} else {
		p.RequestedMemonheap = &v
	}
	return nil
}

func (p *TopologyInfo) ReadField522(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 522: ", err)
	} else {
		p.RequestedMemoffheap = &v
	}
	return nil
}

func (p *TopologyInfo) ReadField523(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 523: ", err)
	} else {
		p.RequestedCPU = &v
	}
	return nil
}

func (p *TopologyInfo) ReadField524(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 524: ", err)
	} else {
		p.AssignedMemonheap = &v
	}
	return nil
}

func (p *TopologyInfo) ReadField525(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 525: ", err)
	} else {
		p.AssignedMemoffheap = &v
	}
	return nil
}

func (p *TopologyInfo) ReadField526(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 526: ", err)
	} else {
		p.AssignedCPU = &v
	}
	return nil
}

func (p *TopologyInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TopologyInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField513(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField514(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField515(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField521(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField522(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField523(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField524(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField525(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField526(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TopologyInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *TopologyInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *TopologyInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "uptime_secs", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:uptime_secs: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UptimeSecs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uptime_secs (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:uptime_secs: ", p), err)
	}
	return err
}

func (p *TopologyInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "executors", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:executors: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Executors)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Executors {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:executors: ", p), err)
	}
	return err
}

func (p *TopologyInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err)
	}
	return err
}

func (p *TopologyInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "errors", thrift.MAP, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:errors: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.LIST, len(p.Errors)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Errors {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:errors: ", p), err)
	}
	return err
}

func (p *TopologyInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetComponentDebug() {
		if err := oprot.WriteFieldBegin(ctx, "component_debug", thrift.MAP, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:component_debug: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.ComponentDebug)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ComponentDebug {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:component_debug: ", p), err)
		}
	}
	return err
}

func (p *TopologyInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetStormVersion() {
		if err := oprot.WriteFieldBegin(ctx, "storm_version", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:storm_version: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.StormVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.storm_version (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:storm_version: ", p), err)
		}
	}
	return err
}

func (p *TopologyInfo) writeField513(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSchedStatus() {
		if err := oprot.WriteFieldBegin(ctx, "sched_status", thrift.STRING, 513); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 513:sched_status: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.SchedStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sched_status (513) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 513:sched_status: ", p), err)
		}
	}
	return err
}

func (p *TopologyInfo) writeField514(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOwner() {
		if err := oprot.WriteFieldBegin(ctx, "owner", thrift.STRING, 514); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 514:owner: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Owner)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.owner (514) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 514:owner: ", p), err)
		}
	}
	return err
}

func (p *TopologyInfo) writeField515(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicationCount() {
		if err := oprot.WriteFieldBegin(ctx, "replication_count", thrift.I32, 515); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 515:replication_count: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.ReplicationCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.replication_count (515) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 515:replication_count: ", p), err)
		}
	}
	return err
}

func (p *TopologyInfo) writeField521(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedMemonheap() {
		if err := oprot.WriteFieldBegin(ctx, "requested_memonheap", thrift.DOUBLE, 521); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 521:requested_memonheap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedMemonheap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_memonheap (521) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 521:requested_memonheap: ", p), err)
		}
	}
	return err
}

func (p *TopologyInfo) writeField522(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedMemoffheap() {
		if err := oprot.WriteFieldBegin(ctx, "requested_memoffheap", thrift.DOUBLE, 522); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 522:requested_memoffheap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedMemoffheap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_memoffheap (522) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 522:requested_memoffheap: ", p), err)
		}
	}
	return err
}

func (p *TopologyInfo) writeField523(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedCPU() {
		if err := oprot.WriteFieldBegin(ctx, "requested_cpu", thrift.DOUBLE, 523); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 523:requested_cpu: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedCPU)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_cpu (523) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 523:requested_cpu: ", p), err)
		}
	}
	return err
}

func (p *TopologyInfo) writeField524(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedMemonheap() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_memonheap", thrift.DOUBLE, 524); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 524:assigned_memonheap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedMemonheap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_memonheap (524) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 524:assigned_memonheap: ", p), err)
		}
	}
	return err
}

func (p *TopologyInfo) writeField525(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedMemoffheap() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_memoffheap", thrift.DOUBLE, 525); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 525:assigned_memoffheap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedMemoffheap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_memoffheap (525) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 525:assigned_memoffheap: ", p), err)
		}
	}
	return err
}

func (p *TopologyInfo) writeField526(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedCPU() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_cpu", thrift.DOUBLE, 526); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 526:assigned_cpu: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedCPU)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_cpu (526) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 526:assigned_cpu: ", p), err)
		}
	}
	return err
}

func (p *TopologyInfo) Equals(other *TopologyInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ID != other.ID {
		return false
	}
	if p.Name != other.Name {
		return false
	}
	if p.UptimeSecs != other.UptimeSecs {
		return false
	}
	if len(p.Executors) != len(other.Executors) {
		return false
	}
	for i, _tgt := range p.Executors {
		_src119 := other.Executors[i]
		if !_tgt.Equals(_src119) {
			return false
		}
	}
	if p.Status != other.Status {
		return false
	}
	if len(p.Errors) != len(other.Errors) {
		return false
	}
	for k, _tgt := range p.Errors {
		_src120 := other.Errors[k]
		if len(_tgt) != len(_src120) {
			return false
		}
		for i, _tgt := range _tgt {
			_src121 := _src120[i]
			if !_tgt.Equals(_src121) {
				return false
			}
		}
	}
	if len(p.ComponentDebug) != len(other.ComponentDebug) {
		return false
	}
	for k, _tgt := range p.ComponentDebug {
		_src122 := other.ComponentDebug[k]
		if !_tgt.Equals(_src122) {
			return false
		}
	}
	if p.StormVersion != other.StormVersion {
		if p.StormVersion == nil || other.StormVersion == nil {
			return false
		}
		if (*p.StormVersion) != (*other.StormVersion) {
			return false
		}
	}
	if p.SchedStatus != other.SchedStatus {
		if p.SchedStatus == nil || other.SchedStatus == nil {
			return false
		}
		if (*p.SchedStatus) != (*other.SchedStatus) {
			return false
		}
	}
	if p.Owner != other.Owner {
		if p.Owner == nil || other.Owner == nil {
			return false
		}
		if (*p.Owner) != (*other.Owner) {
			return false
		}
	}
	if p.ReplicationCount != other.ReplicationCount {
		if p.ReplicationCount == nil || other.ReplicationCount == nil {
			return false
		}
		if (*p.ReplicationCount) != (*other.ReplicationCount) {
			return false
		}
	}
	if p.RequestedMemonheap != other.RequestedMemonheap {
		if p.RequestedMemonheap == nil || other.RequestedMemonheap == nil {
			return false
		}
		if (*p.RequestedMemonheap) != (*other.RequestedMemonheap) {
			return false
		}
	}
	if p.RequestedMemoffheap != other.RequestedMemoffheap {
		if p.RequestedMemoffheap == nil || other.RequestedMemoffheap == nil {
			return false
		}
		if (*p.RequestedMemoffheap) != (*other.RequestedMemoffheap) {
			return false
		}
	}
	if p.RequestedCPU != other.RequestedCPU {
		if p.RequestedCPU == nil || other.RequestedCPU == nil {
			return false
		}
		if (*p.RequestedCPU) != (*other.RequestedCPU) {
			return false
		}
	}
	if p.AssignedMemonheap != other.AssignedMemonheap {
		if p.AssignedMemonheap == nil || other.AssignedMemonheap == nil {
			return false
		}
		if (*p.AssignedMemonheap) != (*other.AssignedMemonheap) {
			return false
		}
	}
	if p.AssignedMemoffheap != other.AssignedMemoffheap {
		if p.AssignedMemoffheap == nil || other.AssignedMemoffheap == nil {
			return false
		}
		if (*p.AssignedMemoffheap) != (*other.AssignedMemoffheap) {
			return false
		}
	}
	if p.AssignedCPU != other.AssignedCPU {
		if p.AssignedCPU == nil || other.AssignedCPU == nil {
			return false
		}
		if (*p.AssignedCPU) != (*other.AssignedCPU) {
			return false
		}
	}
	return true
}

func (p *TopologyInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopologyInfo(%+v)", *p)
}

func (p *TopologyInfo) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.TopologyInfo",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TopologyInfo)(nil)

func (p *TopologyInfo) Validate() error {
	return nil
}

// Attributes:
//   - NumExecutors
//   - NumTasks
//   - Emitted
//   - Transferred
//   - Acked
//   - Failed
//   - ResourcesMap
type CommonAggregateStats struct {
	NumExecutors *int32             `thrift:"num_executors,1" db:"num_executors" json:"num_executors,omitempty"`
	NumTasks     *int32             `thrift:"num_tasks,2" db:"num_tasks" json:"num_tasks,omitempty"`
	Emitted      *int64             `thrift:"emitted,3" db:"emitted" json:"emitted,omitempty"`
	Transferred  *int64             `thrift:"transferred,4" db:"transferred" json:"transferred,omitempty"`
	Acked        *int64             `thrift:"acked,5" db:"acked" json:"acked,omitempty"`
	Failed       *int64             `thrift:"failed,6" db:"failed" json:"failed,omitempty"`
	ResourcesMap map[string]float64 `thrift:"resources_map,7" db:"resources_map" json:"resources_map,omitempty"`
}

func NewCommonAggregateStats() *CommonAggregateStats {
	return &CommonAggregateStats{}
}

var CommonAggregateStats_NumExecutors_DEFAULT int32

func (p *CommonAggregateStats) GetNumExecutors() int32 {
	if !p.IsSetNumExecutors() {
		return CommonAggregateStats_NumExecutors_DEFAULT
	}
	return *p.NumExecutors
}

var CommonAggregateStats_NumTasks_DEFAULT int32

func (p *CommonAggregateStats) GetNumTasks() int32 {
	if !p.IsSetNumTasks() {
		return CommonAggregateStats_NumTasks_DEFAULT
	}
	return *p.NumTasks
}

var CommonAggregateStats_Emitted_DEFAULT int64

func (p *CommonAggregateStats) GetEmitted() int64 {
	if !p.IsSetEmitted() {
		return CommonAggregateStats_Emitted_DEFAULT
	}
	return *p.Emitted
}

var CommonAggregateStats_Transferred_DEFAULT int64

func (p *CommonAggregateStats) GetTransferred() int64 {
	if !p.IsSetTransferred() {
		return CommonAggregateStats_Transferred_DEFAULT
	}
	return *p.Transferred
}

var CommonAggregateStats_Acked_DEFAULT int64

func (p *CommonAggregateStats) GetAcked() int64 {
	if !p.IsSetAcked() {
		return CommonAggregateStats_Acked_DEFAULT
	}
	return *p.Acked
}

var CommonAggregateStats_Failed_DEFAULT int64

func (p *CommonAggregateStats) GetFailed() int64 {
	if !p.IsSetFailed() {
		return CommonAggregateStats_Failed_DEFAULT
	}
	return *p.Failed
}

var CommonAggregateStats_ResourcesMap_DEFAULT map[string]float64

func (p *CommonAggregateStats) GetResourcesMap() map[string]float64 {
	return p.ResourcesMap
}

func (p *CommonAggregateStats) IsSetNumExecutors() bool {
	return p.NumExecutors != nil
}

func (p *CommonAggregateStats) IsSetNumTasks() bool {
	return p.NumTasks != nil
}

func (p *CommonAggregateStats) IsSetEmitted() bool {
	return p.Emitted != nil
}

func (p *CommonAggregateStats) IsSetTransferred() bool {
	return p.Transferred != nil
}

func (p *CommonAggregateStats) IsSetAcked() bool {
	return p.Acked != nil
}

func (p *CommonAggregateStats) IsSetFailed() bool {
	return p.Failed != nil
}

func (p *CommonAggregateStats) IsSetResourcesMap() bool {
	return p.ResourcesMap != nil
}

func (p *CommonAggregateStats) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CommonAggregateStats) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NumExecutors = &v
	}
	return nil
}

func (p *CommonAggregateStats) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NumTasks = &v
	}
	return nil
}

func (p *CommonAggregateStats) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Emitted = &v
	}
	return nil
}

func (p *CommonAggregateStats) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Transferred = &v
	}
	return nil
}

func (p *CommonAggregateStats) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Acked = &v
	}
	return nil
}

func (p *CommonAggregateStats) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Failed = &v
	}
	return nil
}

func (p *CommonAggregateStats) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]float64, size)
	p.ResourcesMap = tMap
	for i := 0; i < size; i++ {
		var _key123 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key123 = v
		}
		var _val124 float64
		if v, err := iprot.ReadDouble(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val124 = v
		}
		p.ResourcesMap[_key123] = _val124
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *CommonAggregateStats) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CommonAggregateStats"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CommonAggregateStats) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNumExecutors() {
		if err := oprot.WriteFieldBegin(ctx, "num_executors", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num_executors: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.NumExecutors)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.num_executors (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num_executors: ", p), err)
		}
	}
	return err
}

func (p *CommonAggregateStats) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNumTasks() {
		if err := oprot.WriteFieldBegin(ctx, "num_tasks", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num_tasks: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.NumTasks)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.num_tasks (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num_tasks: ", p), err)
		}
	}
	return err
}

func (p *CommonAggregateStats) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetEmitted() {
		if err := oprot.WriteFieldBegin(ctx, "emitted", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:emitted: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Emitted)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.emitted (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:emitted: ", p), err)
		}
	}
	return err
}

func (p *CommonAggregateStats) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTransferred() {
		if err := oprot.WriteFieldBegin(ctx, "transferred", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:transferred: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Transferred)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.transferred (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:transferred: ", p), err)
		}
	}
	return err
}

func (p *CommonAggregateStats) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAcked() {
		if err := oprot.WriteFieldBegin(ctx, "acked", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:acked: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Acked)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.acked (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:acked: ", p), err)
		}
	}
	return err
}

func (p *CommonAggregateStats) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFailed() {
		if err := oprot.WriteFieldBegin(ctx, "failed", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:failed: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Failed)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.failed (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:failed: ", p), err)
		}
	}
	return err
}

func (p *CommonAggregateStats) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetResourcesMap() {
		if err := oprot.WriteFieldBegin(ctx, "resources_map", thrift.MAP, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:resources_map: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.DOUBLE, len(p.ResourcesMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ResourcesMap {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:resources_map: ", p), err)
		}
	}
	return err
}

func (p *CommonAggregateStats) Equals(other *CommonAggregateStats) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.NumExecutors != other.NumExecutors {
		if p.NumExecutors == nil || other.NumExecutors == nil {
			return false
		}
		if (*p.NumExecutors) != (*other.NumExecutors) {
			return false
		}
	}
	if p.NumTasks != other.NumTasks {
		if p.NumTasks == nil || other.NumTasks == nil {
			return false
		}
		if (*p.NumTasks) != (*other.NumTasks) {
			return false
		}
	}
	if p.Emitted != other.Emitted {
		if p.Emitted == nil || other.Emitted == nil {
			return false
		}
		if (*p.Emitted) != (*other.Emitted) {
			return false
		}
	}
	if p.Transferred != other.Transferred {
		if p.Transferred == nil || other.Transferred == nil {
			return false
		}
		if (*p.Transferred) != (*other.Transferred) {
			return false
		}
	}
	if p.Acked != other.Acked {
		if p.Acked == nil || other.Acked == nil {
			return false
		}
		if (*p.Acked) != (*other.Acked) {
			return false
		}
	}
	if p.Failed != other.Failed {
		if p.Failed == nil || other.Failed == nil {
			return false
		}
		if (*p.Failed) != (*other.Failed) {
			return false
		}
	}
	if len(p.ResourcesMap) != len(other.ResourcesMap) {
		return false
	}
	for k, _tgt := range p.ResourcesMap {
		_src125 := other.ResourcesMap[k]
		if _tgt != _src125 {
			return false
		}
	}
	return true
}

func (p *CommonAggregateStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonAggregateStats(%+v)", *p)
}

func (p *CommonAggregateStats) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.CommonAggregateStats",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*CommonAggregateStats)(nil)

func (p *CommonAggregateStats) Validate() error {
	return nil
}

// Attributes:
//   - CompleteLatencyMs
type SpoutAggregateStats struct {
	CompleteLatencyMs *float64 `thrift:"complete_latency_ms,1" db:"complete_latency_ms" json:"complete_latency_ms,omitempty"`
}

func NewSpoutAggregateStats() *SpoutAggregateStats {
	return &SpoutAggregateStats{}
}

var SpoutAggregateStats_CompleteLatencyMs_DEFAULT float64

func (p *SpoutAggregateStats) GetCompleteLatencyMs() float64 {
	if !p.IsSetCompleteLatencyMs() {
		return SpoutAggregateStats_CompleteLatencyMs_DEFAULT
	}
	return *p.CompleteLatencyMs
}

func (p *SpoutAggregateStats) IsSetCompleteLatencyMs() bool {
	return p.CompleteLatencyMs != nil
}

func (p *SpoutAggregateStats) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SpoutAggregateStats) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CompleteLatencyMs = &v
	}
	return nil
}

func (p *SpoutAggregateStats) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SpoutAggregateStats"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SpoutAggregateStats) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCompleteLatencyMs() {
		if err := oprot.WriteFieldBegin(ctx, "complete_latency_ms", thrift.DOUBLE, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:complete_latency_ms: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.CompleteLatencyMs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.complete_latency_ms (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:complete_latency_ms: ", p), err)
		}
	}
	return err
}

func (p *SpoutAggregateStats) Equals(other *SpoutAggregateStats) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.CompleteLatencyMs != other.CompleteLatencyMs {
		if p.CompleteLatencyMs == nil || other.CompleteLatencyMs == nil {
			return false
		}
		if (*p.CompleteLatencyMs) != (*other.CompleteLatencyMs) {
			return false
		}
	}
	return true
}

func (p *SpoutAggregateStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpoutAggregateStats(%+v)", *p)
}

func (p *SpoutAggregateStats) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SpoutAggregateStats",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SpoutAggregateStats)(nil)

func (p *SpoutAggregateStats) Validate() error {
	return nil
}

// Attributes:
//   - ExecuteLatencyMs
//   - ProcessLatencyMs
//   - Executed
//   - Capacity
type BoltAggregateStats struct {
	ExecuteLatencyMs *float64 `thrift:"execute_latency_ms,1" db:"execute_latency_ms" json:"execute_latency_ms,omitempty"`
	ProcessLatencyMs *float64 `thrift:"process_latency_ms,2" db:"process_latency_ms" json:"process_latency_ms,omitempty"`
	Executed         *int64   `thrift:"executed,3" db:"executed" json:"executed,omitempty"`
	Capacity         *float64 `thrift:"capacity,4" db:"capacity" json:"capacity,omitempty"`
}

func NewBoltAggregateStats() *BoltAggregateStats {
	return &BoltAggregateStats{}
}

var BoltAggregateStats_ExecuteLatencyMs_DEFAULT float64

func (p *BoltAggregateStats) GetExecuteLatencyMs() float64 {
	if !p.IsSetExecuteLatencyMs() {
		return BoltAggregateStats_ExecuteLatencyMs_DEFAULT
	}
	return *p.ExecuteLatencyMs
}

var BoltAggregateStats_ProcessLatencyMs_DEFAULT float64

func (p *BoltAggregateStats) GetProcessLatencyMs() float64 {
	if !p.IsSetProcessLatencyMs() {
		return BoltAggregateStats_ProcessLatencyMs_DEFAULT
	}
	return *p.ProcessLatencyMs
}

var BoltAggregateStats_Executed_DEFAULT int64

func (p *BoltAggregateStats) GetExecuted() int64 {
	if !p.IsSetExecuted() {
		return BoltAggregateStats_Executed_DEFAULT
	}
	return *p.Executed
}

var BoltAggregateStats_Capacity_DEFAULT float64

func (p *BoltAggregateStats) GetCapacity() float64 {
	if !p.IsSetCapacity() {
		return BoltAggregateStats_Capacity_DEFAULT
	}
	return *p.Capacity
}

func (p *BoltAggregateStats) IsSetExecuteLatencyMs() bool {
	return p.ExecuteLatencyMs != nil
}

func (p *BoltAggregateStats) IsSetProcessLatencyMs() bool {
	return p.ProcessLatencyMs != nil
}

func (p *BoltAggregateStats) IsSetExecuted() bool {
	return p.Executed != nil
}

func (p *BoltAggregateStats) IsSetCapacity() bool {
	return p.Capacity != nil
}

func (p *BoltAggregateStats) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BoltAggregateStats) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ExecuteLatencyMs = &v
	}
	return nil
}

func (p *BoltAggregateStats) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ProcessLatencyMs = &v
	}
	return nil
}

func (p *BoltAggregateStats) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Executed = &v
	}
	return nil
}

func (p *BoltAggregateStats) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Capacity = &v
	}
	return nil
}

func (p *BoltAggregateStats) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BoltAggregateStats"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BoltAggregateStats) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExecuteLatencyMs() {
		if err := oprot.WriteFieldBegin(ctx, "execute_latency_ms", thrift.DOUBLE, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:execute_latency_ms: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.ExecuteLatencyMs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.execute_latency_ms (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:execute_latency_ms: ", p), err)
		}
	}
	return err
}

func (p *BoltAggregateStats) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetProcessLatencyMs() {
		if err := oprot.WriteFieldBegin(ctx, "process_latency_ms", thrift.DOUBLE, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:process_latency_ms: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.ProcessLatencyMs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.process_latency_ms (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:process_latency_ms: ", p), err)
		}
	}
	return err
}

func (p *BoltAggregateStats) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExecuted() {
		if err := oprot.WriteFieldBegin(ctx, "executed", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:executed: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Executed)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.executed (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:executed: ", p), err)
		}
	}
	return err
}

func (p *BoltAggregateStats) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCapacity() {
		if err := oprot.WriteFieldBegin(ctx, "capacity", thrift.DOUBLE, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:capacity: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.Capacity)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.capacity (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:capacity: ", p), err)
		}
	}
	return err
}

func (p *BoltAggregateStats) Equals(other *BoltAggregateStats) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ExecuteLatencyMs != other.ExecuteLatencyMs {
		if p.ExecuteLatencyMs == nil || other.ExecuteLatencyMs == nil {
			return false
		}
		if (*p.ExecuteLatencyMs) != (*other.ExecuteLatencyMs) {
			return false
		}
	}
	if p.ProcessLatencyMs != other.ProcessLatencyMs {
		if p.ProcessLatencyMs == nil || other.ProcessLatencyMs == nil {
			return false
		}
		if (*p.ProcessLatencyMs) != (*other.ProcessLatencyMs) {
			return false
		}
	}
	if p.Executed != other.Executed {
		if p.Executed == nil || other.Executed == nil {
			return false
		}
		if (*p.Executed) != (*other.Executed) {
			return false
		}
	}
	if p.Capacity != other.Capacity {
		if p.Capacity == nil || other.Capacity == nil {
			return false
		}
		if (*p.Capacity) != (*other.Capacity) {
			return false
		}
	}
	return true
}

func (p *BoltAggregateStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BoltAggregateStats(%+v)", *p)
}

func (p *BoltAggregateStats) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.BoltAggregateStats",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*BoltAggregateStats)(nil)

func (p *BoltAggregateStats) Validate() error {
	return nil
}

// Attributes:
//   - Bolt
//   - Spout
type SpecificAggregateStats struct {
	Bolt  *BoltAggregateStats  `thrift:"bolt,1" db:"bolt" json:"bolt,omitempty"`
	Spout *SpoutAggregateStats `thrift:"spout,2" db:"spout" json:"spout,omitempty"`
}

func NewSpecificAggregateStats() *SpecificAggregateStats {
	return &SpecificAggregateStats{}
}

var SpecificAggregateStats_Bolt_DEFAULT *BoltAggregateStats

func (p *SpecificAggregateStats) GetBolt() *BoltAggregateStats {
	if !p.IsSetBolt() {
		return SpecificAggregateStats_Bolt_DEFAULT
	}
	return p.Bolt
}

var SpecificAggregateStats_Spout_DEFAULT *SpoutAggregateStats

func (p *SpecificAggregateStats) GetSpout() *SpoutAggregateStats {
	if !p.IsSetSpout() {
		return SpecificAggregateStats_Spout_DEFAULT
	}
	return p.Spout
}

func (p *SpecificAggregateStats) CountSetFieldsSpecificAggregateStats() int {
	count := 0
	if p.IsSetBolt() {
		count++
	}
	if p.IsSetSpout() {
		count++
	}
	return count

}

func (p *SpecificAggregateStats) IsSetBolt() bool {
	return p.Bolt != nil
}

func (p *SpecificAggregateStats) IsSetSpout() bool {
	return p.Spout != nil
}

func (p *SpecificAggregateStats) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SpecificAggregateStats) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Bolt = &BoltAggregateStats{}
	if err := p.Bolt.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Bolt), err)
	}
	return nil
}

func (p *SpecificAggregateStats) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Spout = &SpoutAggregateStats{}
	if err := p.Spout.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Spout), err)
	}
	return nil
}

func (p *SpecificAggregateStats) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsSpecificAggregateStats(); c != 1 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("%T write union: exactly one field must be set (%d set)", p, c))
	}
	if err := oprot.WriteStructBegin(ctx, "SpecificAggregateStats"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SpecificAggregateStats) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBolt() {
		if err := oprot.WriteFieldBegin(ctx, "bolt", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bolt: ", p), err)
		}
		if err := p.Bolt.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Bolt), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bolt: ", p), err)
		}
	}
	return err
}

func (p *SpecificAggregateStats) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSpout() {
		if err := oprot.WriteFieldBegin(ctx, "spout", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:spout: ", p), err)
		}
		if err := p.Spout.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Spout), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:spout: ", p), err)
		}
	}
	return err
}

func (p *SpecificAggregateStats) Equals(other *SpecificAggregateStats) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Bolt.Equals(other.Bolt) {
		return false
	}
	if !p.Spout.Equals(other.Spout) {
		return false
	}
	return true
}

func (p *SpecificAggregateStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpecificAggregateStats(%+v)", *p)
}

func (p *SpecificAggregateStats) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SpecificAggregateStats",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SpecificAggregateStats)(nil)

func (p *SpecificAggregateStats) Validate() error {
	return nil
}

// Attributes:
//   - Type
//   - CommonStats
//   - SpecificStats
//   - LastError
type ComponentAggregateStats struct {
	Type          *ComponentType          `thrift:"type,1" db:"type" json:"type,omitempty"`
	CommonStats   *CommonAggregateStats   `thrift:"common_stats,2" db:"common_stats" json:"common_stats,omitempty"`
	SpecificStats *SpecificAggregateStats `thrift:"specific_stats,3" db:"specific_stats" json:"specific_stats,omitempty"`
	LastError     *ErrorInfo              `thrift:"last_error,4" db:"last_error" json:"last_error,omitempty"`
}

func NewComponentAggregateStats() *ComponentAggregateStats {
	return &ComponentAggregateStats{}
}

var ComponentAggregateStats_Type_DEFAULT ComponentType

func (p *ComponentAggregateStats) GetType() ComponentType {
	if !p.IsSetType() {
		return ComponentAggregateStats_Type_DEFAULT
	}
	return *p.Type
}

var ComponentAggregateStats_CommonStats_DEFAULT *CommonAggregateStats

func (p *ComponentAggregateStats) GetCommonStats() *CommonAggregateStats {
	if !p.IsSetCommonStats() {
		return ComponentAggregateStats_CommonStats_DEFAULT
	}
	return p.CommonStats
}

var ComponentAggregateStats_SpecificStats_DEFAULT *SpecificAggregateStats

func (p *ComponentAggregateStats) GetSpecificStats() *SpecificAggregateStats {
	if !p.IsSetSpecificStats() {
		return ComponentAggregateStats_SpecificStats_DEFAULT
	}
	return p.SpecificStats
}

var ComponentAggregateStats_LastError_DEFAULT *ErrorInfo

func (p *ComponentAggregateStats) GetLastError() *ErrorInfo {
	if !p.IsSetLastError() {
		return ComponentAggregateStats_LastError_DEFAULT
	}
	return p.LastError
}

func (p *ComponentAggregateStats) IsSetType() bool {
	return p.Type != nil
}

func (p *ComponentAggregateStats) IsSetCommonStats() bool {
	return p.CommonStats != nil
}

func (p *ComponentAggregateStats) IsSetSpecificStats() bool {
	return p.SpecificStats != nil
}

func (p *ComponentAggregateStats) IsSetLastError() bool {
	return p.LastError != nil
}

func (p *ComponentAggregateStats) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ComponentAggregateStats) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ComponentType(v)
		p.Type = &temp
	}
	return nil
}

func (p *ComponentAggregateStats) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.CommonStats = &CommonAggregateStats{}
	if err := p.CommonStats.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CommonStats), err)
	}
	return nil
}

func (p *ComponentAggregateStats) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.SpecificStats = &SpecificAggregateStats{}
	if err := p.SpecificStats.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SpecificStats), err)
	}
	return nil
}

func (p *ComponentAggregateStats) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.LastError = &ErrorInfo{}
	if err := p.LastError.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LastError), err)
	}
	return nil
}

func (p *ComponentAggregateStats) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ComponentAggregateStats"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ComponentAggregateStats) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
		}
	}
	return err
}

func (p *ComponentAggregateStats) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCommonStats() {
		if err := oprot.WriteFieldBegin(ctx, "common_stats", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:common_stats: ", p), err)
		}
		if err := p.CommonStats.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CommonStats), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:common_stats: ", p), err)
		}
	}
	return err
}

func (p *ComponentAggregateStats) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSpecificStats() {
		if err := oprot.WriteFieldBegin(ctx, "specific_stats", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:specific_stats: ", p), err)
		}
		if err := p.SpecificStats.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SpecificStats), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:specific_stats: ", p), err)
		}
	}
	return err
}

func (p *ComponentAggregateStats) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetLastError() {
		if err := oprot.WriteFieldBegin(ctx, "last_error", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:last_error: ", p), err)
		}
		if err := p.LastError.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LastError), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:last_error: ", p), err)
		}
	}
	return err
}

func (p *ComponentAggregateStats) Equals(other *ComponentAggregateStats) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Type != other.Type {
		if p.Type == nil || other.Type == nil {
			return false
		}
		if (*p.Type) != (*other.Type) {
			return false
		}
	}
	if !p.CommonStats.Equals(other.CommonStats) {
		return false
	}
	if !p.SpecificStats.Equals(other.SpecificStats) {
		return false
	}
	if !p.LastError.Equals(other.LastError) {
		return false
	}
	return true
}

func (p *ComponentAggregateStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComponentAggregateStats(%+v)", *p)
}

func (p *ComponentAggregateStats) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.ComponentAggregateStats",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ComponentAggregateStats)(nil)

func (p *ComponentAggregateStats) Validate() error {
	return nil
}

// Attributes:
//   - WindowToEmitted
//   - WindowToTransferred
//   - WindowToCompleteLatenciesMs
//   - WindowToAcked
//   - WindowToFailed
type TopologyStats struct {
	WindowToEmitted             map[string]int64   `thrift:"window_to_emitted,1" db:"window_to_emitted" json:"window_to_emitted,omitempty"`
	WindowToTransferred         map[string]int64   `thrift:"window_to_transferred,2" db:"window_to_transferred" json:"window_to_transferred,omitempty"`
	WindowToCompleteLatenciesMs map[string]float64 `thrift:"window_to_complete_latencies_ms,3" db:"window_to_complete_latencies_ms" json:"window_to_complete_latencies_ms,omitempty"`
	WindowToAcked               map[string]int64   `thrift:"window_to_acked,4" db:"window_to_acked" json:"window_to_acked,omitempty"`
	WindowToFailed              map[string]int64   `thrift:"window_to_failed,5" db:"window_to_failed" json:"window_to_failed,omitempty"`
}

func NewTopologyStats() *TopologyStats {
	return &TopologyStats{}
}

var TopologyStats_WindowToEmitted_DEFAULT map[string]int64

func (p *TopologyStats) GetWindowToEmitted() map[string]int64 {
	return p.WindowToEmitted
}

var TopologyStats_WindowToTransferred_DEFAULT map[string]int64

func (p *TopologyStats) GetWindowToTransferred() map[string]int64 {
	return p.WindowToTransferred
}

var TopologyStats_WindowToCompleteLatenciesMs_DEFAULT map[string]float64

func (p *TopologyStats) GetWindowToCompleteLatenciesMs() map[string]float64 {
	return p.WindowToCompleteLatenciesMs
}

var TopologyStats_WindowToAcked_DEFAULT map[string]int64

func (p *TopologyStats) GetWindowToAcked() map[string]int64 {
	return p.WindowToAcked
}

var TopologyStats_WindowToFailed_DEFAULT map[string]int64

func (p *TopologyStats) GetWindowToFailed() map[string]int64 {
	return p.WindowToFailed
}

func (p *TopologyStats) IsSetWindowToEmitted() bool {
	return p.WindowToEmitted != nil
}

func (p *TopologyStats) IsSetWindowToTransferred() bool {
	return p.WindowToTransferred != nil
}

func (p *TopologyStats) IsSetWindowToCompleteLatenciesMs() bool {
	return p.WindowToCompleteLatenciesMs != nil
}

func (p *TopologyStats) IsSetWindowToAcked() bool {
	return p.WindowToAcked != nil
}

func (p *TopologyStats) IsSetWindowToFailed() bool {
	return p.WindowToFailed != nil
}

func (p *TopologyStats) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TopologyStats) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.WindowToEmitted = tMap
	for i := 0; i < size; i++ {
		var _key126 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key126 = v
		}
		var _val127 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val127 = v
		}
		p.WindowToEmitted[_key126] = _val127
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TopologyStats) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.WindowToTransferred = tMap
	for i := 0; i < size; i++ {
		var _key128 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key128 = v
		}
		var _val129 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val129 = v
		}
		p.WindowToTransferred[_key128] = _val129
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TopologyStats) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]float64, size)
	p.WindowToCompleteLatenciesMs = tMap
	for i := 0; i < size; i++ {
		var _key130 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key130 = v
		}
		var _val131 float64
		if v, err := iprot.ReadDouble(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val131 = v
		}
		p.WindowToCompleteLatenciesMs[_key130] = _val131
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TopologyStats) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.WindowToAcked = tMap
	for i := 0; i < size; i++ {
		var _key132 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key132 = v
		}
		var _val133 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val133 = v
		}
		p.WindowToAcked[_key132] = _val133
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TopologyStats) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.WindowToFailed = tMap
	for i := 0; i < size; i++ {
		var _key134 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key134 = v
		}
		var _val135 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val135 = v
		}
		p.WindowToFailed[_key134] = _val135
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TopologyStats) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TopologyStats"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TopologyStats) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetWindowToEmitted() {
		if err := oprot.WriteFieldBegin(ctx, "window_to_emitted", thrift.MAP, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:window_to_emitted: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.WindowToEmitted)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.WindowToEmitted {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:window_to_emitted: ", p), err)
		}
	}
	return err
}

func (p *TopologyStats) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetWindowToTransferred() {
		if err := oprot.WriteFieldBegin(ctx, "window_to_transferred", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:window_to_transferred: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.WindowToTransferred)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.WindowToTransferred {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:window_to_transferred: ", p), err)
		}
	}
	return err
}

func (p *TopologyStats) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetWindowToCompleteLatenciesMs() {
		if err := oprot.WriteFieldBegin(ctx, "window_to_complete_latencies_ms", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:window_to_complete_latencies_ms: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.DOUBLE, len(p.WindowToCompleteLatenciesMs)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.WindowToCompleteLatenciesMs {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:window_to_complete_latencies_ms: ", p), err)
		}
	}
	return err
}

func (p *TopologyStats) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetWindowToAcked() {
		if err := oprot.WriteFieldBegin(ctx, "window_to_acked", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:window_to_acked: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.WindowToAcked)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.WindowToAcked {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:window_to_acked: ", p), err)
		}
	}
	return err
}

func (p *TopologyStats) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetWindowToFailed() {
		if err := oprot.WriteFieldBegin(ctx, "window_to_failed", thrift.MAP, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:window_to_failed: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.WindowToFailed)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.WindowToFailed {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:window_to_failed: ", p), err)
		}
	}
	return err
}

func (p *TopologyStats) Equals(other *TopologyStats) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.WindowToEmitted) != len(other.WindowToEmitted) {
		return false
	}
	for k, _tgt := range p.WindowToEmitted {
		_src136 := other.WindowToEmitted[k]
		if _tgt != _src136 {
			return false
		}
	}
	if len(p.WindowToTransferred) != len(other.WindowToTransferred) {
		return false
	}
	for k, _tgt := range p.WindowToTransferred {
		_src137 := other.WindowToTransferred[k]
		if _tgt != _src137 {
			return false
		}
	}
	if len(p.WindowToCompleteLatenciesMs) != len(other.WindowToCompleteLatenciesMs) {
		return false
	}
	for k, _tgt := range p.WindowToCompleteLatenciesMs {
		_src138 := other.WindowToCompleteLatenciesMs[k]
		if _tgt != _src138 {
			return false
		}
	}
	if len(p.WindowToAcked) != len(other.WindowToAcked) {
		return false
	}
	for k, _tgt := range p.WindowToAcked {
		_src139 := other.WindowToAcked[k]
		if _tgt != _src139 {
			return false
		}
	}
	if len(p.WindowToFailed) != len(other.WindowToFailed) {
		return false
	}
	for k, _tgt := range p.WindowToFailed {
		_src140 := other.WindowToFailed[k]
		if _tgt != _src140 {
			return false
		}
	}
	return true
}

func (p *TopologyStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopologyStats(%+v)", *p)
}

func (p *TopologyStats) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.TopologyStats",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TopologyStats)(nil)

func (p *TopologyStats) Validate() error {
	return nil
}

// Attributes:
//   - SupervisorID
//   - Host
//   - Port
//   - TopologyID
//   - TopologyName
//   - NumExecutors
//   - ComponentToNumTasks
//   - TimeSecs
//   - UptimeSecs
//   - RequestedMemonheap
//   - RequestedMemoffheap
//   - RequestedCPU
//   - AssignedMemonheap
//   - AssignedMemoffheap
//   - AssignedCPU
//   - Owner
type WorkerSummary struct {
	SupervisorID        *string          `thrift:"supervisor_id,1" db:"supervisor_id" json:"supervisor_id,omitempty"`
	Host                *string          `thrift:"host,2" db:"host" json:"host,omitempty"`
	Port                *int32           `thrift:"port,3" db:"port" json:"port,omitempty"`
	TopologyID          *string          `thrift:"topology_id,4" db:"topology_id" json:"topology_id,omitempty"`
	TopologyName        *string          `thrift:"topology_name,5" db:"topology_name" json:"topology_name,omitempty"`
	NumExecutors        *int32           `thrift:"num_executors,6" db:"num_executors" json:"num_executors,omitempty"`
	ComponentToNumTasks map[string]int64 `thrift:"component_to_num_tasks,7" db:"component_to_num_tasks" json:"component_to_num_tasks,omitempty"`
	TimeSecs            *int32           `thrift:"time_secs,8" db:"time_secs" json:"time_secs,omitempty"`
	UptimeSecs          *int32           `thrift:"uptime_secs,9" db:"uptime_secs" json:"uptime_secs,omitempty"`
	// unused fields # 10 to 520
	RequestedMemonheap  *float64 `thrift:"requested_memonheap,521" db:"requested_memonheap" json:"requested_memonheap,omitempty"`
	RequestedMemoffheap *float64 `thrift:"requested_memoffheap,522" db:"requested_memoffheap" json:"requested_memoffheap,omitempty"`
	RequestedCPU        *float64 `thrift:"requested_cpu,523" db:"requested_cpu" json:"requested_cpu,omitempty"`
	AssignedMemonheap   *float64 `thrift:"assigned_memonheap,524" db:"assigned_memonheap" json:"assigned_memonheap,omitempty"`
	AssignedMemoffheap  *float64 `thrift:"assigned_memoffheap,525" db:"assigned_memoffheap" json:"assigned_memoffheap,omitempty"`
	AssignedCPU         *float64 `thrift:"assigned_cpu,526" db:"assigned_cpu" json:"assigned_cpu,omitempty"`
	Owner               *string  `thrift:"owner,527" db:"owner" json:"owner,omitempty"`
}

func NewWorkerSummary() *WorkerSummary {
	return &WorkerSummary{}
}

var WorkerSummary_SupervisorID_DEFAULT string

func (p *WorkerSummary) GetSupervisorID() string {
	if !p.IsSetSupervisorID() {
		return WorkerSummary_SupervisorID_DEFAULT
	}
	return *p.SupervisorID
}

var WorkerSummary_Host_DEFAULT string

func (p *WorkerSummary) GetHost() string {
	if !p.IsSetHost() {
		return WorkerSummary_Host_DEFAULT
	}
	return *p.Host
}

var WorkerSummary_Port_DEFAULT int32

func (p *WorkerSummary) GetPort() int32 {
	if !p.IsSetPort() {
		return WorkerSummary_Port_DEFAULT
	}
	return *p.Port
}

var WorkerSummary_TopologyID_DEFAULT string

func (p *WorkerSummary) GetTopologyID() string {
	if !p.IsSetTopologyID() {
		return WorkerSummary_TopologyID_DEFAULT
	}
	return *p.TopologyID
}

var WorkerSummary_TopologyName_DEFAULT string

func (p *WorkerSummary) GetTopologyName() string {
	if !p.IsSetTopologyName() {
		return WorkerSummary_TopologyName_DEFAULT
	}
	return *p.TopologyName
}

var WorkerSummary_NumExecutors_DEFAULT int32

func (p *WorkerSummary) GetNumExecutors() int32 {
	if !p.IsSetNumExecutors() {
		return WorkerSummary_NumExecutors_DEFAULT
	}
	return *p.NumExecutors
}

var WorkerSummary_ComponentToNumTasks_DEFAULT map[string]int64

func (p *WorkerSummary) GetComponentToNumTasks() map[string]int64 {
	return p.ComponentToNumTasks
}

var WorkerSummary_TimeSecs_DEFAULT int32

func (p *WorkerSummary) GetTimeSecs() int32 {
	if !p.IsSetTimeSecs() {
		return WorkerSummary_TimeSecs_DEFAULT
	}
	return *p.TimeSecs
}

var WorkerSummary_UptimeSecs_DEFAULT int32

func (p *WorkerSummary) GetUptimeSecs() int32 {
	if !p.IsSetUptimeSecs() {
		return WorkerSummary_UptimeSecs_DEFAULT
	}
	return *p.UptimeSecs
}

var WorkerSummary_RequestedMemonheap_DEFAULT float64

func (p *WorkerSummary) GetRequestedMemonheap() float64 {
	if !p.IsSetRequestedMemonheap() {
		return WorkerSummary_RequestedMemonheap_DEFAULT
	}
	return *p.RequestedMemonheap
}

var WorkerSummary_RequestedMemoffheap_DEFAULT float64

func (p *WorkerSummary) GetRequestedMemoffheap() float64 {
	if !p.IsSetRequestedMemoffheap() {
		return WorkerSummary_RequestedMemoffheap_DEFAULT
	}
	return *p.RequestedMemoffheap
}

var WorkerSummary_RequestedCPU_DEFAULT float64

func (p *WorkerSummary) GetRequestedCPU() float64 {
	if !p.IsSetRequestedCPU() {
		return WorkerSummary_RequestedCPU_DEFAULT
	}
	return *p.RequestedCPU
}

var WorkerSummary_AssignedMemonheap_DEFAULT float64

func (p *WorkerSummary) GetAssignedMemonheap() float64 {
	if !p.IsSetAssignedMemonheap() {
		return WorkerSummary_AssignedMemonheap_DEFAULT
	}
	return *p.AssignedMemonheap
}

var WorkerSummary_AssignedMemoffheap_DEFAULT float64

func (p *WorkerSummary) GetAssignedMemoffheap() float64 {
	if !p.IsSetAssignedMemoffheap() {
		return WorkerSummary_AssignedMemoffheap_DEFAULT
	}
	return *p.AssignedMemoffheap
}

var WorkerSummary_AssignedCPU_DEFAULT float64

func (p *WorkerSummary) GetAssignedCPU() float64 {
	if !p.IsSetAssignedCPU() {
		return WorkerSummary_AssignedCPU_DEFAULT
	}
	return *p.AssignedCPU
}

var WorkerSummary_Owner_DEFAULT string

func (p *WorkerSummary) GetOwner() string {
	if !p.IsSetOwner() {
		return WorkerSummary_Owner_DEFAULT
	}
	return *p.Owner
}

func (p *WorkerSummary) IsSetSupervisorID() bool {
	return p.SupervisorID != nil
}

func (p *WorkerSummary) IsSetHost() bool {
	return p.Host != nil
}

func (p *WorkerSummary) IsSetPort() bool {
	return p.Port != nil
}

func (p *WorkerSummary) IsSetTopologyID() bool {
	return p.TopologyID != nil
}

func (p *WorkerSummary) IsSetTopologyName() bool {
	return p.TopologyName != nil
}

func (p *WorkerSummary) IsSetNumExecutors() bool {
	return p.NumExecutors != nil
}

func (p *WorkerSummary) IsSetComponentToNumTasks() bool {
	return p.ComponentToNumTasks != nil
}

func (p *WorkerSummary) IsSetTimeSecs() bool {
	return p.TimeSecs != nil
}

func (p *WorkerSummary) IsSetUptimeSecs() bool {
	return p.UptimeSecs != nil
}

func (p *WorkerSummary) IsSetRequestedMemonheap() bool {
	return p.RequestedMemonheap != nil
}

func (p *WorkerSummary) IsSetRequestedMemoffheap() bool {
	return p.RequestedMemoffheap != nil
}

func (p *WorkerSummary) IsSetRequestedCPU() bool {
	return p.RequestedCPU != nil
}

func (p *WorkerSummary) IsSetAssignedMemonheap() bool {
	return p.AssignedMemonheap != nil
}

func (p *WorkerSummary) IsSetAssignedMemoffheap() bool {
	return p.AssignedMemoffheap != nil
}

func (p *WorkerSummary) IsSetAssignedCPU() bool {
	return p.AssignedCPU != nil
}

func (p *WorkerSummary) IsSetOwner() bool {
	return p.Owner != nil
}

func (p *WorkerSummary) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 521:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField521(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 522:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField522(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 523:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField523(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 524:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField524(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 525:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField525(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 526:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField526(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 527:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField527(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkerSummary) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SupervisorID = &v
	}
	return nil
}

func (p *WorkerSummary) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Host = &v
	}
	return nil
}

func (p *WorkerSummary) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Port = &v
	}
	return nil
}

func (p *WorkerSummary) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TopologyID = &v
	}
	return nil
}

func (p *WorkerSummary) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TopologyName = &v
	}
	return nil
}

func (p *WorkerSummary) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.NumExecutors = &v
	}
	return nil
}

func (p *WorkerSummary) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.ComponentToNumTasks = tMap
	for i := 0; i < size; i++ {
		var _key141 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key141 = v
		}
		var _val142 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val142 = v
		}
		p.ComponentToNumTasks[_key141] = _val142
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *WorkerSummary) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.TimeSecs = &v
	}
	return nil
}

func (p *WorkerSummary) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.UptimeSecs = &v
	}
	return nil
}

func (p *WorkerSummary) ReadField521(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 521: ", err)
	} else {
		p.RequestedMemonheap = &v
	}
	return nil
}

func (p *WorkerSummary) ReadField522(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 522: ", err)
	} else {
		p.RequestedMemoffheap = &v
	}
	return nil
}

func (p *WorkerSummary) ReadField523(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 523: ", err)
	} else {
		p.RequestedCPU = &v
	}
	return nil
}

func (p *WorkerSummary) ReadField524(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 524: ", err)
	} else {
		p.AssignedMemonheap = &v
	}
	return nil
}

func (p *WorkerSummary) ReadField525(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 525: ", err)
	} else {
		p.AssignedMemoffheap = &v
	}
	return nil
}

func (p *WorkerSummary) ReadField526(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 526: ", err)
	} else {
		p.AssignedCPU = &v
	}
	return nil
}

func (p *WorkerSummary) ReadField527(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 527: ", err)
	} else {
		p.Owner = &v
	}
	return nil
}

func (p *WorkerSummary) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "WorkerSummary"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField521(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField522(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField523(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField524(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField525(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField526(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField527(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkerSummary) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSupervisorID() {
		if err := oprot.WriteFieldBegin(ctx, "supervisor_id", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:supervisor_id: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.SupervisorID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.supervisor_id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:supervisor_id: ", p), err)
		}
	}
	return err
}

func (p *WorkerSummary) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetHost() {
		if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Host)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.host (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host: ", p), err)
		}
	}
	return err
}

func (p *WorkerSummary) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPort() {
		if err := oprot.WriteFieldBegin(ctx, "port", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:port: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.Port)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.port (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:port: ", p), err)
		}
	}
	return err
}

func (p *WorkerSummary) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTopologyID() {
		if err := oprot.WriteFieldBegin(ctx, "topology_id", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:topology_id: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.TopologyID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.topology_id (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:topology_id: ", p), err)
		}
	}
	return err
}

func (p *WorkerSummary) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTopologyName() {
		if err := oprot.WriteFieldBegin(ctx, "topology_name", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:topology_name: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.TopologyName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.topology_name (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:topology_name: ", p), err)
		}
	}
	return err
}

func (p *WorkerSummary) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNumExecutors() {
		if err := oprot.WriteFieldBegin(ctx, "num_executors", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:num_executors: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.NumExecutors)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.num_executors (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:num_executors: ", p), err)
		}
	}
	return err
}

func (p *WorkerSummary) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetComponentToNumTasks() {
		if err := oprot.WriteFieldBegin(ctx, "component_to_num_tasks", thrift.MAP, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:component_to_num_tasks: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.ComponentToNumTasks)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ComponentToNumTasks {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:component_to_num_tasks: ", p), err)
		}
	}
	return err
}

func (p *WorkerSummary) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeSecs() {
		if err := oprot.WriteFieldBegin(ctx, "time_secs", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:time_secs: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.TimeSecs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.time_secs (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:time_secs: ", p), err)
		}
	}
	return err
}

func (p *WorkerSummary) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUptimeSecs() {
		if err := oprot.WriteFieldBegin(ctx, "uptime_secs", thrift.I32, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:uptime_secs: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.UptimeSecs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.uptime_secs (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:uptime_secs: ", p), err)
		}
	}
	return err
}

func (p *WorkerSummary) writeField521(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedMemonheap() {
		if err := oprot.WriteFieldBegin(ctx, "requested_memonheap", thrift.DOUBLE, 521); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 521:requested_memonheap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedMemonheap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_memonheap (521) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 521:requested_memonheap: ", p), err)
		}
	}
	return err
}

func (p *WorkerSummary) writeField522(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedMemoffheap() {
		if err := oprot.WriteFieldBegin(ctx, "requested_memoffheap", thrift.DOUBLE, 522); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 522:requested_memoffheap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedMemoffheap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_memoffheap (522) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 522:requested_memoffheap: ", p), err)
		}
	}
	return err
}

func (p *WorkerSummary) writeField523(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedCPU() {
		if err := oprot.WriteFieldBegin(ctx, "requested_cpu", thrift.DOUBLE, 523); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 523:requested_cpu: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedCPU)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_cpu (523) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 523:requested_cpu: ", p), err)
		}
	}
	return err
}

func (p *WorkerSummary) writeField524(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedMemonheap() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_memonheap", thrift.DOUBLE, 524); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 524:assigned_memonheap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedMemonheap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_memonheap (524) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 524:assigned_memonheap: ", p), err)
		}
	}
	return err
}

func (p *WorkerSummary) writeField525(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedMemoffheap() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_memoffheap", thrift.DOUBLE, 525); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 525:assigned_memoffheap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedMemoffheap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_memoffheap (525) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 525:assigned_memoffheap: ", p), err)
		}
	}
	return err
}

func (p *WorkerSummary) writeField526(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedCPU() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_cpu", thrift.DOUBLE, 526); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 526:assigned_cpu: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedCPU)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_cpu (526) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 526:assigned_cpu: ", p), err)
		}
	}
	return err
}

func (p *WorkerSummary) writeField527(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOwner() {
		if err := oprot.WriteFieldBegin(ctx, "owner", thrift.STRING, 527); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 527:owner: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Owner)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.owner (527) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 527:owner: ", p), err)
		}
	}
	return err
}

func (p *WorkerSummary) Equals(other *WorkerSummary) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SupervisorID != other.SupervisorID {
		if p.SupervisorID == nil || other.SupervisorID == nil {
			return false
		}
		if (*p.SupervisorID) != (*other.SupervisorID) {
			return false
		}
	}
	if p.Host != other.Host {
		if p.Host == nil || other.Host == nil {
			return false
		}
		if (*p.Host) != (*other.Host) {
			return false
		}
	}
	if p.Port != other.Port {
		if p.Port == nil || other.Port == nil {
			return false
		}
		if (*p.Port) != (*other.Port) {
			return false
		}
	}
	if p.TopologyID != other.TopologyID {
		if p.TopologyID == nil || other.TopologyID == nil {
			return false
		}
		if (*p.TopologyID) != (*other.TopologyID) {
			return false
		}
	}
	if p.TopologyName != other.TopologyName {
		if p.TopologyName == nil || other.TopologyName == nil {
			return false
		}
		if (*p.TopologyName) != (*other.TopologyName) {
			return false
		}
	}
	if p.NumExecutors != other.NumExecutors {
		if p.NumExecutors == nil || other.NumExecutors == nil {
			return false
		}
		if (*p.NumExecutors) != (*other.NumExecutors) {
			return false
		}
	}
	if len(p.ComponentToNumTasks) != len(other.ComponentToNumTasks) {
		return false
	}
	for k, _tgt := range p.ComponentToNumTasks {
		_src143 := other.ComponentToNumTasks[k]
		if _tgt != _src143 {
			return false
		}
	}
	if p.TimeSecs != other.TimeSecs {
		if p.TimeSecs == nil || other.TimeSecs == nil {
			return false
		}
		if (*p.TimeSecs) != (*other.TimeSecs) {
			return false
		}
	}
	if p.UptimeSecs != other.UptimeSecs {
		if p.UptimeSecs == nil || other.UptimeSecs == nil {
			return false
		}
		if (*p.UptimeSecs) != (*other.UptimeSecs) {
			return false
		}
	}
	if p.RequestedMemonheap != other.RequestedMemonheap {
		if p.RequestedMemonheap == nil || other.RequestedMemonheap == nil {
			return false
		}
		if (*p.RequestedMemonheap) != (*other.RequestedMemonheap) {
			return false
		}
	}
	if p.RequestedMemoffheap != other.RequestedMemoffheap {
		if p.RequestedMemoffheap == nil || other.RequestedMemoffheap == nil {
			return false
		}
		if (*p.RequestedMemoffheap) != (*other.RequestedMemoffheap) {
			return false
		}
	}
	if p.RequestedCPU != other.RequestedCPU {
		if p.RequestedCPU == nil || other.RequestedCPU == nil {
			return false
		}
		if (*p.RequestedCPU) != (*other.RequestedCPU) {
			return false
		}
	}
	if p.AssignedMemonheap != other.AssignedMemonheap {
		if p.AssignedMemonheap == nil || other.AssignedMemonheap == nil {
			return false
		}
		if (*p.AssignedMemonheap) != (*other.AssignedMemonheap) {
			return false
		}
	}
	if p.AssignedMemoffheap != other.AssignedMemoffheap {
		if p.AssignedMemoffheap == nil || other.AssignedMemoffheap == nil {
			return false
		}
		if (*p.AssignedMemoffheap) != (*other.AssignedMemoffheap) {
			return false
		}
	}
	if p.AssignedCPU != other.AssignedCPU {
		if p.AssignedCPU == nil || other.AssignedCPU == nil {
			return false
		}
		if (*p.AssignedCPU) != (*other.AssignedCPU) {
			return false
		}
	}
	if p.Owner != other.Owner {
		if p.Owner == nil || other.Owner == nil {
			return false
		}
		if (*p.Owner) != (*other.Owner) {
			return false
		}
	}
	return true
}

func (p *WorkerSummary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerSummary(%+v)", *p)
}

func (p *WorkerSummary) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.WorkerSummary",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*WorkerSummary)(nil)

func (p *WorkerSummary) Validate() error {
	return nil
}

// Attributes:
//   - SupervisorSummaries
//   - WorkerSummaries
type SupervisorPageInfo struct {
	SupervisorSummaries []*SupervisorSummary `thrift:"supervisor_summaries,1" db:"supervisor_summaries" json:"supervisor_summaries,omitempty"`
	WorkerSummaries     []*WorkerSummary     `thrift:"worker_summaries,2" db:"worker_summaries" json:"worker_summaries,omitempty"`
}

func NewSupervisorPageInfo() *SupervisorPageInfo {
	return &SupervisorPageInfo{}
}

var SupervisorPageInfo_SupervisorSummaries_DEFAULT []*SupervisorSummary

func (p *SupervisorPageInfo) GetSupervisorSummaries() []*SupervisorSummary {
	return p.SupervisorSummaries
}

var SupervisorPageInfo_WorkerSummaries_DEFAULT []*WorkerSummary

func (p *SupervisorPageInfo) GetWorkerSummaries() []*WorkerSummary {
	return p.WorkerSummaries
}

func (p *SupervisorPageInfo) IsSetSupervisorSummaries() bool {
	return p.SupervisorSummaries != nil
}

func (p *SupervisorPageInfo) IsSetWorkerSummaries() bool {
	return p.WorkerSummaries != nil
}

func (p *SupervisorPageInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SupervisorPageInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SupervisorSummary, 0, size)
	p.SupervisorSummaries = tSlice
	for i := 0; i < size; i++ {
		_elem144 := &SupervisorSummary{
			Version: "VERSION_NOT_PROVIDED",
		}
		if err := _elem144.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem144), err)
		}
		p.SupervisorSummaries = append(p.SupervisorSummaries, _elem144)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SupervisorPageInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*WorkerSummary, 0, size)
	p.WorkerSummaries = tSlice
	for i := 0; i < size; i++ {
		_elem145 := &WorkerSummary{}
		if err := _elem145.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem145), err)
		}
		p.WorkerSummaries = append(p.WorkerSummaries, _elem145)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SupervisorPageInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SupervisorPageInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SupervisorPageInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSupervisorSummaries() {
		if err := oprot.WriteFieldBegin(ctx, "supervisor_summaries", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:supervisor_summaries: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.SupervisorSummaries)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.SupervisorSummaries {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:supervisor_summaries: ", p), err)
		}
	}
	return err
}

func (p *SupervisorPageInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkerSummaries() {
		if err := oprot.WriteFieldBegin(ctx, "worker_summaries", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:worker_summaries: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.WorkerSummaries)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.WorkerSummaries {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:worker_summaries: ", p), err)
		}
	}
	return err
}

func (p *SupervisorPageInfo) Equals(other *SupervisorPageInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.SupervisorSummaries) != len(other.SupervisorSummaries) {
		return false
	}
	for i, _tgt := range p.SupervisorSummaries {
		_src146 := other.SupervisorSummaries[i]
		if !_tgt.Equals(_src146) {
			return false
		}
	}
	if len(p.WorkerSummaries) != len(other.WorkerSummaries) {
		return false
	}
	for i, _tgt := range p.WorkerSummaries {
		_src147 := other.WorkerSummaries[i]
		if !_tgt.Equals(_src147) {
			return false
		}
	}
	return true
}

func (p *SupervisorPageInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SupervisorPageInfo(%+v)", *p)
}

func (p *SupervisorPageInfo) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SupervisorPageInfo",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SupervisorPageInfo)(nil)

func (p *SupervisorPageInfo) Validate() error {
	return nil
}

// Attributes:
//   - ID
//   - Name
//   - UptimeSecs
//   - Status
//   - NumTasks
//   - NumWorkers
//   - NumExecutors
//   - TopologyConf
//   - IDToSpoutAggStats
//   - IDToBoltAggStats
//   - SchedStatus
//   - TopologyStats
//   - Owner
//   - DebugOptions
//   - ReplicationCount
//   - Workers
//   - StormVersion
//   - TopologyVersion
//   - RequestedMemonheap
//   - RequestedMemoffheap
//   - RequestedCPU
//   - AssignedMemonheap
//   - AssignedMemoffheap
//   - AssignedCPU
//   - RequestedRegularOnHeapMemory
//   - RequestedSharedOnHeapMemory
//   - RequestedRegularOffHeapMemory
//   - RequestedSharedOffHeapMemory
//   - AssignedRegularOnHeapMemory
//   - AssignedSharedOnHeapMemory
//   - AssignedRegularOffHeapMemory
//   - AssignedSharedOffHeapMemory
//   - RequestedGenericResources
//   - AssignedGenericResources
type TopologyPageInfo struct {
	ID                string                              `thrift:"id,1,required" db:"id" json:"id"`
	Name              *string                             `thrift:"name,2" db:"name" json:"name,omitempty"`
	UptimeSecs        *int32                              `thrift:"uptime_secs,3" db:"uptime_secs" json:"uptime_secs,omitempty"`
	Status            *string                             `thrift:"status,4" db:"status" json:"status,omitempty"`
	NumTasks          *int32                              `thrift:"num_tasks,5" db:"num_tasks" json:"num_tasks,omitempty"`
	NumWorkers        *int32                              `thrift:"num_workers,6" db:"num_workers" json:"num_workers,omitempty"`
	NumExecutors      *int32                              `thrift:"num_executors,7" db:"num_executors" json:"num_executors,omitempty"`
	TopologyConf      *string                             `thrift:"topology_conf,8" db:"topology_conf" json:"topology_conf,omitempty"`
	IDToSpoutAggStats map[string]*ComponentAggregateStats `thrift:"id_to_spout_agg_stats,9" db:"id_to_spout_agg_stats" json:"id_to_spout_agg_stats,omitempty"`
	IDToBoltAggStats  map[string]*ComponentAggregateStats `thrift:"id_to_bolt_agg_stats,10" db:"id_to_bolt_agg_stats" json:"id_to_bolt_agg_stats,omitempty"`
	SchedStatus       *string                             `thrift:"sched_status,11" db:"sched_status" json:"sched_status,omitempty"`
	TopologyStats     *TopologyStats                      `thrift:"topology_stats,12" db:"topology_stats" json:"topology_stats,omitempty"`
	Owner             *string                             `thrift:"owner,13" db:"owner" json:"owner,omitempty"`
	DebugOptions      *DebugOptions                       `thrift:"debug_options,14" db:"debug_options" json:"debug_options,omitempty"`
	ReplicationCount  *int32                              `thrift:"replication_count,15" db:"replication_count" json:"replication_count,omitempty"`
	Workers           []*WorkerSummary                    `thrift:"workers,16" db:"workers" json:"workers,omitempty"`
	StormVersion      *string                             `thrift:"storm_version,17" db:"storm_version" json:"storm_version,omitempty"`
	TopologyVersion   *string                             `thrift:"topology_version,18" db:"topology_version" json:"topology_version,omitempty"`
	// unused fields # 19 to 520
	RequestedMemonheap            *float64           `thrift:"requested_memonheap,521" db:"requested_memonheap" json:"requested_memonheap,omitempty"`
	RequestedMemoffheap           *float64           `thrift:"requested_memoffheap,522" db:"requested_memoffheap" json:"requested_memoffheap,omitempty"`
	RequestedCPU                  *float64           `thrift:"requested_cpu,523" db:"requested_cpu" json:"requested_cpu,omitempty"`
	AssignedMemonheap             *float64           `thrift:"assigned_memonheap,524" db:"assigned_memonheap" json:"assigned_memonheap,omitempty"`
	AssignedMemoffheap            *float64           `thrift:"assigned_memoffheap,525" db:"assigned_memoffheap" json:"assigned_memoffheap,omitempty"`
	AssignedCPU                   *float64           `thrift:"assigned_cpu,526" db:"assigned_cpu" json:"assigned_cpu,omitempty"`
	RequestedRegularOnHeapMemory  *float64           `thrift:"requested_regular_on_heap_memory,527" db:"requested_regular_on_heap_memory" json:"requested_regular_on_heap_memory,omitempty"`
	RequestedSharedOnHeapMemory   *float64           `thrift:"requested_shared_on_heap_memory,528" db:"requested_shared_on_heap_memory" json:"requested_shared_on_heap_memory,omitempty"`
	RequestedRegularOffHeapMemory *float64           `thrift:"requested_regular_off_heap_memory,529" db:"requested_regular_off_heap_memory" json:"requested_regular_off_heap_memory,omitempty"`
	RequestedSharedOffHeapMemory  *float64           `thrift:"requested_shared_off_heap_memory,530" db:"requested_shared_off_heap_memory" json:"requested_shared_off_heap_memory,omitempty"`
	AssignedRegularOnHeapMemory   *float64           `thrift:"assigned_regular_on_heap_memory,531" db:"assigned_regular_on_heap_memory" json:"assigned_regular_on_heap_memory,omitempty"`
	AssignedSharedOnHeapMemory    *float64           `thrift:"assigned_shared_on_heap_memory,532" db:"assigned_shared_on_heap_memory" json:"assigned_shared_on_heap_memory,omitempty"`
	AssignedRegularOffHeapMemory  *float64           `thrift:"assigned_regular_off_heap_memory,533" db:"assigned_regular_off_heap_memory" json:"assigned_regular_off_heap_memory,omitempty"`
	AssignedSharedOffHeapMemory   *float64           `thrift:"assigned_shared_off_heap_memory,534" db:"assigned_shared_off_heap_memory" json:"assigned_shared_off_heap_memory,omitempty"`
	RequestedGenericResources     map[string]float64 `thrift:"requested_generic_resources,535" db:"requested_generic_resources" json:"requested_generic_resources,omitempty"`
	AssignedGenericResources      map[string]float64 `thrift:"assigned_generic_resources,536" db:"assigned_generic_resources" json:"assigned_generic_resources,omitempty"`
}

func NewTopologyPageInfo() *TopologyPageInfo {
	return &TopologyPageInfo{}
}

func (p *TopologyPageInfo) GetID() string {
	return p.ID
}

var TopologyPageInfo_Name_DEFAULT string

func (p *TopologyPageInfo) GetName() string {
	if !p.IsSetName() {
		return TopologyPageInfo_Name_DEFAULT
	}
	return *p.Name
}

var TopologyPageInfo_UptimeSecs_DEFAULT int32

func (p *TopologyPageInfo) GetUptimeSecs() int32 {
	if !p.IsSetUptimeSecs() {
		return TopologyPageInfo_UptimeSecs_DEFAULT
	}
	return *p.UptimeSecs
}

var TopologyPageInfo_Status_DEFAULT string

func (p *TopologyPageInfo) GetStatus() string {
	if !p.IsSetStatus() {
		return TopologyPageInfo_Status_DEFAULT
	}
	return *p.Status
}

var TopologyPageInfo_NumTasks_DEFAULT int32

func (p *TopologyPageInfo) GetNumTasks() int32 {
	if !p.IsSetNumTasks() {
		return TopologyPageInfo_NumTasks_DEFAULT
	}
	return *p.NumTasks
}

var TopologyPageInfo_NumWorkers_DEFAULT int32

func (p *TopologyPageInfo) GetNumWorkers() int32 {
	if !p.IsSetNumWorkers() {
		return TopologyPageInfo_NumWorkers_DEFAULT
	}
	return *p.NumWorkers
}

var TopologyPageInfo_NumExecutors_DEFAULT int32

func (p *TopologyPageInfo) GetNumExecutors() int32 {
	if !p.IsSetNumExecutors() {
		return TopologyPageInfo_NumExecutors_DEFAULT
	}
	return *p.NumExecutors
}

var TopologyPageInfo_TopologyConf_DEFAULT string

func (p *TopologyPageInfo) GetTopologyConf() string {
	if !p.IsSetTopologyConf() {
		return TopologyPageInfo_TopologyConf_DEFAULT
	}
	return *p.TopologyConf
}

var TopologyPageInfo_IDToSpoutAggStats_DEFAULT map[string]*ComponentAggregateStats

func (p *TopologyPageInfo) GetIDToSpoutAggStats() map[string]*ComponentAggregateStats {
	return p.IDToSpoutAggStats
}

var TopologyPageInfo_IDToBoltAggStats_DEFAULT map[string]*ComponentAggregateStats

func (p *TopologyPageInfo) GetIDToBoltAggStats() map[string]*ComponentAggregateStats {
	return p.IDToBoltAggStats
}

var TopologyPageInfo_SchedStatus_DEFAULT string

func (p *TopologyPageInfo) GetSchedStatus() string {
	if !p.IsSetSchedStatus() {
		return TopologyPageInfo_SchedStatus_DEFAULT
	}
	return *p.SchedStatus
}

var TopologyPageInfo_TopologyStats_DEFAULT *TopologyStats

func (p *TopologyPageInfo) GetTopologyStats() *TopologyStats {
	if !p.IsSetTopologyStats() {
		return TopologyPageInfo_TopologyStats_DEFAULT
	}
	return p.TopologyStats
}

var TopologyPageInfo_Owner_DEFAULT string

func (p *TopologyPageInfo) GetOwner() string {
	if !p.IsSetOwner() {
		return TopologyPageInfo_Owner_DEFAULT
	}
	return *p.Owner
}

var TopologyPageInfo_DebugOptions_DEFAULT *DebugOptions

func (p *TopologyPageInfo) GetDebugOptions() *DebugOptions {
	if !p.IsSetDebugOptions() {
		return TopologyPageInfo_DebugOptions_DEFAULT
	}
	return p.DebugOptions
}

var TopologyPageInfo_ReplicationCount_DEFAULT int32

func (p *TopologyPageInfo) GetReplicationCount() int32 {
	if !p.IsSetReplicationCount() {
		return TopologyPageInfo_ReplicationCount_DEFAULT
	}
	return *p.ReplicationCount
}

var TopologyPageInfo_Workers_DEFAULT []*WorkerSummary

func (p *TopologyPageInfo) GetWorkers() []*WorkerSummary {
	return p.Workers
}

var TopologyPageInfo_StormVersion_DEFAULT string

func (p *TopologyPageInfo) GetStormVersion() string {
	if !p.IsSetStormVersion() {
		return TopologyPageInfo_StormVersion_DEFAULT
	}
	return *p.StormVersion
}

var TopologyPageInfo_TopologyVersion_DEFAULT string

func (p *TopologyPageInfo) GetTopologyVersion() string {
	if !p.IsSetTopologyVersion() {
		return TopologyPageInfo_TopologyVersion_DEFAULT
	}
	return *p.TopologyVersion
}

var TopologyPageInfo_RequestedMemonheap_DEFAULT float64

func (p *TopologyPageInfo) GetRequestedMemonheap() float64 {
	if !p.IsSetRequestedMemonheap() {
		return TopologyPageInfo_RequestedMemonheap_DEFAULT
	}
	return *p.RequestedMemonheap
}

var TopologyPageInfo_RequestedMemoffheap_DEFAULT float64

func (p *TopologyPageInfo) GetRequestedMemoffheap() float64 {
	if !p.IsSetRequestedMemoffheap() {
		return TopologyPageInfo_RequestedMemoffheap_DEFAULT
	}
	return *p.RequestedMemoffheap
}

var TopologyPageInfo_RequestedCPU_DEFAULT float64

func (p *TopologyPageInfo) GetRequestedCPU() float64 {
	if !p.IsSetRequestedCPU() {
		return TopologyPageInfo_RequestedCPU_DEFAULT
	}
	return *p.RequestedCPU
}

var TopologyPageInfo_AssignedMemonheap_DEFAULT float64

func (p *TopologyPageInfo) GetAssignedMemonheap() float64 {
	if !p.IsSetAssignedMemonheap() {
		return TopologyPageInfo_AssignedMemonheap_DEFAULT
	}
	return *p.AssignedMemonheap
}

var TopologyPageInfo_AssignedMemoffheap_DEFAULT float64

func (p *TopologyPageInfo) GetAssignedMemoffheap() float64 {
	if !p.IsSetAssignedMemoffheap() {
		return TopologyPageInfo_AssignedMemoffheap_DEFAULT
	}
	return *p.AssignedMemoffheap
}

var TopologyPageInfo_AssignedCPU_DEFAULT float64

func (p *TopologyPageInfo) GetAssignedCPU() float64 {
	if !p.IsSetAssignedCPU() {
		return TopologyPageInfo_AssignedCPU_DEFAULT
	}
	return *p.AssignedCPU
}

var TopologyPageInfo_RequestedRegularOnHeapMemory_DEFAULT float64

func (p *TopologyPageInfo) GetRequestedRegularOnHeapMemory() float64 {
	if !p.IsSetRequestedRegularOnHeapMemory() {
		return TopologyPageInfo_RequestedRegularOnHeapMemory_DEFAULT
	}
	return *p.RequestedRegularOnHeapMemory
}

var TopologyPageInfo_RequestedSharedOnHeapMemory_DEFAULT float64

func (p *TopologyPageInfo) GetRequestedSharedOnHeapMemory() float64 {
	if !p.IsSetRequestedSharedOnHeapMemory() {
		return TopologyPageInfo_RequestedSharedOnHeapMemory_DEFAULT
	}
	return *p.RequestedSharedOnHeapMemory
}

var TopologyPageInfo_RequestedRegularOffHeapMemory_DEFAULT float64

func (p *TopologyPageInfo) GetRequestedRegularOffHeapMemory() float64 {
	if !p.IsSetRequestedRegularOffHeapMemory() {
		return TopologyPageInfo_RequestedRegularOffHeapMemory_DEFAULT
	}
	return *p.RequestedRegularOffHeapMemory
}

var TopologyPageInfo_RequestedSharedOffHeapMemory_DEFAULT float64

func (p *TopologyPageInfo) GetRequestedSharedOffHeapMemory() float64 {
	if !p.IsSetRequestedSharedOffHeapMemory() {
		return TopologyPageInfo_RequestedSharedOffHeapMemory_DEFAULT
	}
	return *p.RequestedSharedOffHeapMemory
}

var TopologyPageInfo_AssignedRegularOnHeapMemory_DEFAULT float64

func (p *TopologyPageInfo) GetAssignedRegularOnHeapMemory() float64 {
	if !p.IsSetAssignedRegularOnHeapMemory() {
		return TopologyPageInfo_AssignedRegularOnHeapMemory_DEFAULT
	}
	return *p.AssignedRegularOnHeapMemory
}

var TopologyPageInfo_AssignedSharedOnHeapMemory_DEFAULT float64

func (p *TopologyPageInfo) GetAssignedSharedOnHeapMemory() float64 {
	if !p.IsSetAssignedSharedOnHeapMemory() {
		return TopologyPageInfo_AssignedSharedOnHeapMemory_DEFAULT
	}
	return *p.AssignedSharedOnHeapMemory
}

var TopologyPageInfo_AssignedRegularOffHeapMemory_DEFAULT float64

func (p *TopologyPageInfo) GetAssignedRegularOffHeapMemory() float64 {
	if !p.IsSetAssignedRegularOffHeapMemory() {
		return TopologyPageInfo_AssignedRegularOffHeapMemory_DEFAULT
	}
	return *p.AssignedRegularOffHeapMemory
}

var TopologyPageInfo_AssignedSharedOffHeapMemory_DEFAULT float64

func (p *TopologyPageInfo) GetAssignedSharedOffHeapMemory() float64 {
	if !p.IsSetAssignedSharedOffHeapMemory() {
		return TopologyPageInfo_AssignedSharedOffHeapMemory_DEFAULT
	}
	return *p.AssignedSharedOffHeapMemory
}

var TopologyPageInfo_RequestedGenericResources_DEFAULT map[string]float64

func (p *TopologyPageInfo) GetRequestedGenericResources() map[string]float64 {
	return p.RequestedGenericResources
}

var TopologyPageInfo_AssignedGenericResources_DEFAULT map[string]float64

func (p *TopologyPageInfo) GetAssignedGenericResources() map[string]float64 {
	return p.AssignedGenericResources
}

func (p *TopologyPageInfo) IsSetName() bool {
	return p.Name != nil
}

func (p *TopologyPageInfo) IsSetUptimeSecs() bool {
	return p.UptimeSecs != nil
}

func (p *TopologyPageInfo) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TopologyPageInfo) IsSetNumTasks() bool {
	return p.NumTasks != nil
}

func (p *TopologyPageInfo) IsSetNumWorkers() bool {
	return p.NumWorkers != nil
}

func (p *TopologyPageInfo) IsSetNumExecutors() bool {
	return p.NumExecutors != nil
}

func (p *TopologyPageInfo) IsSetTopologyConf() bool {
	return p.TopologyConf != nil
}

func (p *TopologyPageInfo) IsSetIDToSpoutAggStats() bool {
	return p.IDToSpoutAggStats != nil
}

func (p *TopologyPageInfo) IsSetIDToBoltAggStats() bool {
	return p.IDToBoltAggStats != nil
}

func (p *TopologyPageInfo) IsSetSchedStatus() bool {
	return p.SchedStatus != nil
}

func (p *TopologyPageInfo) IsSetTopologyStats() bool {
	return p.TopologyStats != nil
}

func (p *TopologyPageInfo) IsSetOwner() bool {
	return p.Owner != nil
}

func (p *TopologyPageInfo) IsSetDebugOptions() bool {
	return p.DebugOptions != nil
}

func (p *TopologyPageInfo) IsSetReplicationCount() bool {
	return p.ReplicationCount != nil
}

func (p *TopologyPageInfo) IsSetWorkers() bool {
	return p.Workers != nil
}

func (p *TopologyPageInfo) IsSetStormVersion() bool {
	return p.StormVersion != nil
}

func (p *TopologyPageInfo) IsSetTopologyVersion() bool {
	return p.TopologyVersion != nil
}

func (p *TopologyPageInfo) IsSetRequestedMemonheap() bool {
	return p.RequestedMemonheap != nil
}

func (p *TopologyPageInfo) IsSetRequestedMemoffheap() bool {
	return p.RequestedMemoffheap != nil
}

func (p *TopologyPageInfo) IsSetRequestedCPU() bool {
	return p.RequestedCPU != nil
}

func (p *TopologyPageInfo) IsSetAssignedMemonheap() bool {
	return p.AssignedMemonheap != nil
}

func (p *TopologyPageInfo) IsSetAssignedMemoffheap() bool {
	return p.AssignedMemoffheap != nil
}

func (p *TopologyPageInfo) IsSetAssignedCPU() bool {
	return p.AssignedCPU != nil
}

func (p *TopologyPageInfo) IsSetRequestedRegularOnHeapMemory() bool {
	return p.RequestedRegularOnHeapMemory != nil
}

func (p *TopologyPageInfo) IsSetRequestedSharedOnHeapMemory() bool {
	return p.RequestedSharedOnHeapMemory != nil
}

func (p *TopologyPageInfo) IsSetRequestedRegularOffHeapMemory() bool {
	return p.RequestedRegularOffHeapMemory != nil
}

func (p *TopologyPageInfo) IsSetRequestedSharedOffHeapMemory() bool {
	return p.RequestedSharedOffHeapMemory != nil
}

func (p *TopologyPageInfo) IsSetAssignedRegularOnHeapMemory() bool {
	return p.AssignedRegularOnHeapMemory != nil
}

func (p *TopologyPageInfo) IsSetAssignedSharedOnHeapMemory() bool {
	return p.AssignedSharedOnHeapMemory != nil
}

func (p *TopologyPageInfo) IsSetAssignedRegularOffHeapMemory() bool {
	return p.AssignedRegularOffHeapMemory != nil
}

func (p *TopologyPageInfo) IsSetAssignedSharedOffHeapMemory() bool {
	return p.AssignedSharedOffHeapMemory != nil
}

func (p *TopologyPageInfo) IsSetRequestedGenericResources() bool {
	return p.RequestedGenericResources != nil
}

func (p *TopologyPageInfo) IsSetAssignedGenericResources() bool {
	return p.AssignedGenericResources != nil
}

func (p *TopologyPageInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField12(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField13(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField14(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField15(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField16(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField17(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField18(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 521:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField521(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 522:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField522(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 523:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField523(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 524:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField524(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 525:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField525(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 526:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField526(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 527:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField527(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 528:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField528(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 529:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField529(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 530:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField530(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 531:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField531(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 532:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField532(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 533:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField533(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 534:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField534(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 535:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField535(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 536:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField536(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	return nil
}

func (p *TopologyPageInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UptimeSecs = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Status = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.NumTasks = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.NumWorkers = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.NumExecutors = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.TopologyConf = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*ComponentAggregateStats, size)
	p.IDToSpoutAggStats = tMap
	for i := 0; i < size; i++ {
		var _key148 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key148 = v
		}
		_val149 := &ComponentAggregateStats{}
		if err := _val149.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val149), err)
		}
		p.IDToSpoutAggStats[_key148] = _val149
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TopologyPageInfo) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*ComponentAggregateStats, size)
	p.IDToBoltAggStats = tMap
	for i := 0; i < size; i++ {
		var _key150 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key150 = v
		}
		_val151 := &ComponentAggregateStats{}
		if err := _val151.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val151), err)
		}
		p.IDToBoltAggStats[_key150] = _val151
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TopologyPageInfo) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.SchedStatus = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
	p.TopologyStats = &TopologyStats{}
	if err := p.TopologyStats.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TopologyStats), err)
	}
	return nil
}

func (p *TopologyPageInfo) ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Owner = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
	p.DebugOptions = &DebugOptions{}
	if err := p.DebugOptions.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DebugOptions), err)
	}
	return nil
}

func (p *TopologyPageInfo) ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.ReplicationCount = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*WorkerSummary, 0, size)
	p.Workers = tSlice
	for i := 0; i < size; i++ {
		_elem152 := &WorkerSummary{}
		if err := _elem152.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem152), err)
		}
		p.Workers = append(p.Workers, _elem152)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TopologyPageInfo) ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.StormVersion = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.TopologyVersion = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField521(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 521: ", err)
	} else {
		p.RequestedMemonheap = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField522(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 522: ", err)
	} else {
		p.RequestedMemoffheap = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField523(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 523: ", err)
	} else {
		p.RequestedCPU = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField524(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 524: ", err)
	} else {
		p.AssignedMemonheap = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField525(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 525: ", err)
	} else {
		p.AssignedMemoffheap = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField526(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 526: ", err)
	} else {
		p.AssignedCPU = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField527(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 527: ", err)
	} else {
		p.RequestedRegularOnHeapMemory = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField528(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 528: ", err)
	} else {
		p.RequestedSharedOnHeapMemory = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField529(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 529: ", err)
	} else {
		p.RequestedRegularOffHeapMemory = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField530(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 530: ", err)
	} else {
		p.RequestedSharedOffHeapMemory = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField531(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 531: ", err)
	} else {
		p.AssignedRegularOnHeapMemory = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField532(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 532: ", err)
	} else {
		p.AssignedSharedOnHeapMemory = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField533(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 533: ", err)
	} else {
		p.AssignedRegularOffHeapMemory = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField534(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 534: ", err)
	} else {
		p.AssignedSharedOffHeapMemory = &v
	}
	return nil
}

func (p *TopologyPageInfo) ReadField535(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]float64, size)
	p.RequestedGenericResources = tMap
	for i := 0; i < size; i++ {
		var _key153 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key153 = v
		}
		var _val154 float64
		if v, err := iprot.ReadDouble(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val154 = v
		}
		p.RequestedGenericResources[_key153] = _val154
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TopologyPageInfo) ReadField536(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]float64, size)
	p.AssignedGenericResources = tMap
	for i := 0; i < size; i++ {
		var _key155 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key155 = v
		}
		var _val156 float64
		if v, err := iprot.ReadDouble(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val156 = v
		}
		p.AssignedGenericResources[_key155] = _val156
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TopologyPageInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TopologyPageInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField11(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField12(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField13(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField14(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField15(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField16(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField17(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField18(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField521(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField522(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField523(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField524(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField525(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField526(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField527(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField528(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField529(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField530(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField531(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField532(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField533(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField534(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField535(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField536(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TopologyPageInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *TopologyPageInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUptimeSecs() {
		if err := oprot.WriteFieldBegin(ctx, "uptime_secs", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:uptime_secs: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.UptimeSecs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.uptime_secs (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:uptime_secs: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNumTasks() {
		if err := oprot.WriteFieldBegin(ctx, "num_tasks", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:num_tasks: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.NumTasks)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.num_tasks (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:num_tasks: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNumWorkers() {
		if err := oprot.WriteFieldBegin(ctx, "num_workers", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:num_workers: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.NumWorkers)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.num_workers (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:num_workers: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNumExecutors() {
		if err := oprot.WriteFieldBegin(ctx, "num_executors", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:num_executors: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.NumExecutors)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.num_executors (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:num_executors: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTopologyConf() {
		if err := oprot.WriteFieldBegin(ctx, "topology_conf", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:topology_conf: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.TopologyConf)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.topology_conf (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:topology_conf: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIDToSpoutAggStats() {
		if err := oprot.WriteFieldBegin(ctx, "id_to_spout_agg_stats", thrift.MAP, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:id_to_spout_agg_stats: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.IDToSpoutAggStats)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.IDToSpoutAggStats {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:id_to_spout_agg_stats: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIDToBoltAggStats() {
		if err := oprot.WriteFieldBegin(ctx, "id_to_bolt_agg_stats", thrift.MAP, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:id_to_bolt_agg_stats: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.IDToBoltAggStats)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.IDToBoltAggStats {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:id_to_bolt_agg_stats: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSchedStatus() {
		if err := oprot.WriteFieldBegin(ctx, "sched_status", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:sched_status: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.SchedStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sched_status (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:sched_status: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTopologyStats() {
		if err := oprot.WriteFieldBegin(ctx, "topology_stats", thrift.STRUCT, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:topology_stats: ", p), err)
		}
		if err := p.TopologyStats.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TopologyStats), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:topology_stats: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOwner() {
		if err := oprot.WriteFieldBegin(ctx, "owner", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:owner: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Owner)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.owner (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:owner: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDebugOptions() {
		if err := oprot.WriteFieldBegin(ctx, "debug_options", thrift.STRUCT, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:debug_options: ", p), err)
		}
		if err := p.DebugOptions.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DebugOptions), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:debug_options: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicationCount() {
		if err := oprot.WriteFieldBegin(ctx, "replication_count", thrift.I32, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:replication_count: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.ReplicationCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.replication_count (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:replication_count: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkers() {
		if err := oprot.WriteFieldBegin(ctx, "workers", thrift.LIST, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:workers: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Workers)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Workers {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:workers: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetStormVersion() {
		if err := oprot.WriteFieldBegin(ctx, "storm_version", thrift.STRING, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:storm_version: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.StormVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.storm_version (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:storm_version: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTopologyVersion() {
		if err := oprot.WriteFieldBegin(ctx, "topology_version", thrift.STRING, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:topology_version: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.TopologyVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.topology_version (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:topology_version: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField521(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedMemonheap() {
		if err := oprot.WriteFieldBegin(ctx, "requested_memonheap", thrift.DOUBLE, 521); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 521:requested_memonheap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedMemonheap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_memonheap (521) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 521:requested_memonheap: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField522(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedMemoffheap() {
		if err := oprot.WriteFieldBegin(ctx, "requested_memoffheap", thrift.DOUBLE, 522); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 522:requested_memoffheap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedMemoffheap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_memoffheap (522) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 522:requested_memoffheap: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField523(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedCPU() {
		if err := oprot.WriteFieldBegin(ctx, "requested_cpu", thrift.DOUBLE, 523); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 523:requested_cpu: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedCPU)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_cpu (523) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 523:requested_cpu: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField524(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedMemonheap() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_memonheap", thrift.DOUBLE, 524); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 524:assigned_memonheap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedMemonheap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_memonheap (524) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 524:assigned_memonheap: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField525(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedMemoffheap() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_memoffheap", thrift.DOUBLE, 525); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 525:assigned_memoffheap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedMemoffheap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_memoffheap (525) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 525:assigned_memoffheap: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField526(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedCPU() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_cpu", thrift.DOUBLE, 526); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 526:assigned_cpu: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedCPU)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_cpu (526) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 526:assigned_cpu: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField527(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedRegularOnHeapMemory() {
		if err := oprot.WriteFieldBegin(ctx, "requested_regular_on_heap_memory", thrift.DOUBLE, 527); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 527:requested_regular_on_heap_memory: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedRegularOnHeapMemory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_regular_on_heap_memory (527) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 527:requested_regular_on_heap_memory: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField528(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedSharedOnHeapMemory() {
		if err := oprot.WriteFieldBegin(ctx, "requested_shared_on_heap_memory", thrift.DOUBLE, 528); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 528:requested_shared_on_heap_memory: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedSharedOnHeapMemory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_shared_on_heap_memory (528) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 528:requested_shared_on_heap_memory: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField529(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedRegularOffHeapMemory() {
		if err := oprot.WriteFieldBegin(ctx, "requested_regular_off_heap_memory", thrift.DOUBLE, 529); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 529:requested_regular_off_heap_memory: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedRegularOffHeapMemory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_regular_off_heap_memory (529) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 529:requested_regular_off_heap_memory: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField530(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedSharedOffHeapMemory() {
		if err := oprot.WriteFieldBegin(ctx, "requested_shared_off_heap_memory", thrift.DOUBLE, 530); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 530:requested_shared_off_heap_memory: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedSharedOffHeapMemory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_shared_off_heap_memory (530) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 530:requested_shared_off_heap_memory: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField531(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedRegularOnHeapMemory() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_regular_on_heap_memory", thrift.DOUBLE, 531); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 531:assigned_regular_on_heap_memory: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedRegularOnHeapMemory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_regular_on_heap_memory (531) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 531:assigned_regular_on_heap_memory: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField532(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedSharedOnHeapMemory() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_shared_on_heap_memory", thrift.DOUBLE, 532); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 532:assigned_shared_on_heap_memory: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedSharedOnHeapMemory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_shared_on_heap_memory (532) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 532:assigned_shared_on_heap_memory: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField533(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedRegularOffHeapMemory() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_regular_off_heap_memory", thrift.DOUBLE, 533); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 533:assigned_regular_off_heap_memory: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedRegularOffHeapMemory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_regular_off_heap_memory (533) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 533:assigned_regular_off_heap_memory: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField534(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedSharedOffHeapMemory() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_shared_off_heap_memory", thrift.DOUBLE, 534); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 534:assigned_shared_off_heap_memory: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedSharedOffHeapMemory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_shared_off_heap_memory (534) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 534:assigned_shared_off_heap_memory: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField535(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedGenericResources() {
		if err := oprot.WriteFieldBegin(ctx, "requested_generic_resources", thrift.MAP, 535); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 535:requested_generic_resources: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.DOUBLE, len(p.RequestedGenericResources)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.RequestedGenericResources {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 535:requested_generic_resources: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) writeField536(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedGenericResources() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_generic_resources", thrift.MAP, 536); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 536:assigned_generic_resources: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.DOUBLE, len(p.AssignedGenericResources)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.AssignedGenericResources {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 536:assigned_generic_resources: ", p), err)
		}
	}
	return err
}

func (p *TopologyPageInfo) Equals(other *TopologyPageInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ID != other.ID {
		return false
	}
	if p.Name != other.Name {
		if p.Name == nil || other.Name == nil {
			return false
		}
		if (*p.Name) != (*other.Name) {
			return false
		}
	}
	if p.UptimeSecs != other.UptimeSecs {
		if p.UptimeSecs == nil || other.UptimeSecs == nil {
			return false
		}
		if (*p.UptimeSecs) != (*other.UptimeSecs) {
			return false
		}
	}
	if p.Status != other.Status {
		if p.Status == nil || other.Status == nil {
			return false
		}
		if (*p.Status) != (*other.Status) {
			return false
		}
	}
	if p.NumTasks != other.NumTasks {
		if p.NumTasks == nil || other.NumTasks == nil {
			return false
		}
		if (*p.NumTasks) != (*other.NumTasks) {
			return false
		}
	}
	if p.NumWorkers != other.NumWorkers {
		if p.NumWorkers == nil || other.NumWorkers == nil {
			return false
		}
		if (*p.NumWorkers) != (*other.NumWorkers) {
			return false
		}
	}
	if p.NumExecutors != other.NumExecutors {
		if p.NumExecutors == nil || other.NumExecutors == nil {
			return false
		}
		if (*p.NumExecutors) != (*other.NumExecutors) {
			return false
		}
	}
	if p.TopologyConf != other.TopologyConf {
		if p.TopologyConf == nil || other.TopologyConf == nil {
			return false
		}
		if (*p.TopologyConf) != (*other.TopologyConf) {
			return false
		}
	}
	if len(p.IDToSpoutAggStats) != len(other.IDToSpoutAggStats) {
		return false
	}
	for k, _tgt := range p.IDToSpoutAggStats {
		_src157 := other.IDToSpoutAggStats[k]
		if !_tgt.Equals(_src157) {
			return false
		}
	}
	if len(p.IDToBoltAggStats) != len(other.IDToBoltAggStats) {
		return false
	}
	for k, _tgt := range p.IDToBoltAggStats {
		_src158 := other.IDToBoltAggStats[k]
		if !_tgt.Equals(_src158) {
			return false
		}
	}
	if p.SchedStatus != other.SchedStatus {
		if p.SchedStatus == nil || other.SchedStatus == nil {
			return false
		}
		if (*p.SchedStatus) != (*other.SchedStatus) {
			return false
		}
	}
	if !p.TopologyStats.Equals(other.TopologyStats) {
		return false
	}
	if p.Owner != other.Owner {
		if p.Owner == nil || other.Owner == nil {
			return false
		}
		if (*p.Owner) != (*other.Owner) {
			return false
		}
	}
	if !p.DebugOptions.Equals(other.DebugOptions) {
		return false
	}
	if p.ReplicationCount != other.ReplicationCount {
		if p.ReplicationCount == nil || other.ReplicationCount == nil {
			return false
		}
		if (*p.ReplicationCount) != (*other.ReplicationCount) {
			return false
		}
	}
	if len(p.Workers) != len(other.Workers) {
		return false
	}
	for i, _tgt := range p.Workers {
		_src159 := other.Workers[i]
		if !_tgt.Equals(_src159) {
			return false
		}
	}
	if p.StormVersion != other.StormVersion {
		if p.StormVersion == nil || other.StormVersion == nil {
			return false
		}
		if (*p.StormVersion) != (*other.StormVersion) {
			return false
		}
	}
	if p.TopologyVersion != other.TopologyVersion {
		if p.TopologyVersion == nil || other.TopologyVersion == nil {
			return false
		}
		if (*p.TopologyVersion) != (*other.TopologyVersion) {
			return false
		}
	}
	if p.RequestedMemonheap != other.RequestedMemonheap {
		if p.RequestedMemonheap == nil || other.RequestedMemonheap == nil {
			return false
		}
		if (*p.RequestedMemonheap) != (*other.RequestedMemonheap) {
			return false
		}
	}
	if p.RequestedMemoffheap != other.RequestedMemoffheap {
		if p.RequestedMemoffheap == nil || other.RequestedMemoffheap == nil {
			return false
		}
		if (*p.RequestedMemoffheap) != (*other.RequestedMemoffheap) {
			return false
		}
	}
	if p.RequestedCPU != other.RequestedCPU {
		if p.RequestedCPU == nil || other.RequestedCPU == nil {
			return false
		}
		if (*p.RequestedCPU) != (*other.RequestedCPU) {
			return false
		}
	}
	if p.AssignedMemonheap != other.AssignedMemonheap {
		if p.AssignedMemonheap == nil || other.AssignedMemonheap == nil {
			return false
		}
		if (*p.AssignedMemonheap) != (*other.AssignedMemonheap) {
			return false
		}
	}
	if p.AssignedMemoffheap != other.AssignedMemoffheap {
		if p.AssignedMemoffheap == nil || other.AssignedMemoffheap == nil {
			return false
		}
		if (*p.AssignedMemoffheap) != (*other.AssignedMemoffheap) {
			return false
		}
	}
	if p.AssignedCPU != other.AssignedCPU {
		if p.AssignedCPU == nil || other.AssignedCPU == nil {
			return false
		}
		if (*p.AssignedCPU) != (*other.AssignedCPU) {
			return false
		}
	}
	if p.RequestedRegularOnHeapMemory != other.RequestedRegularOnHeapMemory {
		if p.RequestedRegularOnHeapMemory == nil || other.RequestedRegularOnHeapMemory == nil {
			return false
		}
		if (*p.RequestedRegularOnHeapMemory) != (*other.RequestedRegularOnHeapMemory) {
			return false
		}
	}
	if p.RequestedSharedOnHeapMemory != other.RequestedSharedOnHeapMemory {
		if p.RequestedSharedOnHeapMemory == nil || other.RequestedSharedOnHeapMemory == nil {
			return false
		}
		if (*p.RequestedSharedOnHeapMemory) != (*other.RequestedSharedOnHeapMemory) {
			return false
		}
	}
	if p.RequestedRegularOffHeapMemory != other.RequestedRegularOffHeapMemory {
		if p.RequestedRegularOffHeapMemory == nil || other.RequestedRegularOffHeapMemory == nil {
			return false
		}
		if (*p.RequestedRegularOffHeapMemory) != (*other.RequestedRegularOffHeapMemory) {
			return false
		}
	}
	if p.RequestedSharedOffHeapMemory != other.RequestedSharedOffHeapMemory {
		if p.RequestedSharedOffHeapMemory == nil || other.RequestedSharedOffHeapMemory == nil {
			return false
		}
		if (*p.RequestedSharedOffHeapMemory) != (*other.RequestedSharedOffHeapMemory) {
			return false
		}
	}
	if p.AssignedRegularOnHeapMemory != other.AssignedRegularOnHeapMemory {
		if p.AssignedRegularOnHeapMemory == nil || other.AssignedRegularOnHeapMemory == nil {
			return false
		}
		if (*p.AssignedRegularOnHeapMemory) != (*other.AssignedRegularOnHeapMemory) {
			return false
		}
	}
	if p.AssignedSharedOnHeapMemory != other.AssignedSharedOnHeapMemory {
		if p.AssignedSharedOnHeapMemory == nil || other.AssignedSharedOnHeapMemory == nil {
			return false
		}
		if (*p.AssignedSharedOnHeapMemory) != (*other.AssignedSharedOnHeapMemory) {
			return false
		}
	}
	if p.AssignedRegularOffHeapMemory != other.AssignedRegularOffHeapMemory {
		if p.AssignedRegularOffHeapMemory == nil || other.AssignedRegularOffHeapMemory == nil {
			return false
		}
		if (*p.AssignedRegularOffHeapMemory) != (*other.AssignedRegularOffHeapMemory) {
			return false
		}
	}
	if p.AssignedSharedOffHeapMemory != other.AssignedSharedOffHeapMemory {
		if p.AssignedSharedOffHeapMemory == nil || other.AssignedSharedOffHeapMemory == nil {
			return false
		}
		if (*p.AssignedSharedOffHeapMemory) != (*other.AssignedSharedOffHeapMemory) {
			return false
		}
	}
	if len(p.RequestedGenericResources) != len(other.RequestedGenericResources) {
		return false
	}
	for k, _tgt := range p.RequestedGenericResources {
		_src160 := other.RequestedGenericResources[k]
		if _tgt != _src160 {
			return false
		}
	}
	if len(p.AssignedGenericResources) != len(other.AssignedGenericResources) {
		return false
	}
	for k, _tgt := range p.AssignedGenericResources {
		_src161 := other.AssignedGenericResources[k]
		if _tgt != _src161 {
			return false
		}
	}
	return true
}

func (p *TopologyPageInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopologyPageInfo(%+v)", *p)
}

func (p *TopologyPageInfo) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.TopologyPageInfo",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TopologyPageInfo)(nil)

func (p *TopologyPageInfo) Validate() error {
	return nil
}

// Attributes:
//   - ExecSummary
//   - Stats
type ExecutorAggregateStats struct {
	ExecSummary *ExecutorSummary         `thrift:"exec_summary,1" db:"exec_summary" json:"exec_summary,omitempty"`
	Stats       *ComponentAggregateStats `thrift:"stats,2" db:"stats" json:"stats,omitempty"`
}

func NewExecutorAggregateStats() *ExecutorAggregateStats {
	return &ExecutorAggregateStats{}
}

var ExecutorAggregateStats_ExecSummary_DEFAULT *ExecutorSummary

func (p *ExecutorAggregateStats) GetExecSummary() *ExecutorSummary {
	if !p.IsSetExecSummary() {
		return ExecutorAggregateStats_ExecSummary_DEFAULT
	}
	return p.ExecSummary
}

var ExecutorAggregateStats_Stats_DEFAULT *ComponentAggregateStats

func (p *ExecutorAggregateStats) GetStats() *ComponentAggregateStats {
	if !p.IsSetStats() {
		return ExecutorAggregateStats_Stats_DEFAULT
	}
	return p.Stats
}

func (p *ExecutorAggregateStats) IsSetExecSummary() bool {
	return p.ExecSummary != nil
}

func (p *ExecutorAggregateStats) IsSetStats() bool {
	return p.Stats != nil
}

func (p *ExecutorAggregateStats) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExecutorAggregateStats) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.ExecSummary = &ExecutorSummary{}
	if err := p.ExecSummary.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExecSummary), err)
	}
	return nil
}

func (p *ExecutorAggregateStats) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Stats = &ComponentAggregateStats{}
	if err := p.Stats.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Stats), err)
	}
	return nil
}

func (p *ExecutorAggregateStats) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ExecutorAggregateStats"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExecutorAggregateStats) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExecSummary() {
		if err := oprot.WriteFieldBegin(ctx, "exec_summary", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:exec_summary: ", p), err)
		}
		if err := p.ExecSummary.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExecSummary), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:exec_summary: ", p), err)
		}
	}
	return err
}

func (p *ExecutorAggregateStats) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetStats() {
		if err := oprot.WriteFieldBegin(ctx, "stats", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stats: ", p), err)
		}
		if err := p.Stats.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Stats), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stats: ", p), err)
		}
	}
	return err
}

func (p *ExecutorAggregateStats) Equals(other *ExecutorAggregateStats) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.ExecSummary.Equals(other.ExecSummary) {
		return false
	}
	if !p.Stats.Equals(other.Stats) {
		return false
	}
	return true
}

func (p *ExecutorAggregateStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecutorAggregateStats(%+v)", *p)
}

func (p *ExecutorAggregateStats) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.ExecutorAggregateStats",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ExecutorAggregateStats)(nil)

func (p *ExecutorAggregateStats) Validate() error {
	return nil
}

// Attributes:
//   - ComponentID
//   - ComponentType
//   - TopologyID
//   - TopologyName
//   - NumExecutors
//   - NumTasks
//   - WindowToStats
//   - GsidToInputStats
//   - SidToOutputStats
//   - ExecStats
//   - Errors
//   - EventlogHost
//   - EventlogPort
//   - DebugOptions
//   - TopologyStatus
//   - ResourcesMap
type ComponentPageInfo struct {
	ComponentID      string                                       `thrift:"component_id,1,required" db:"component_id" json:"component_id"`
	ComponentType    ComponentType                                `thrift:"component_type,2,required" db:"component_type" json:"component_type"`
	TopologyID       *string                                      `thrift:"topology_id,3" db:"topology_id" json:"topology_id,omitempty"`
	TopologyName     *string                                      `thrift:"topology_name,4" db:"topology_name" json:"topology_name,omitempty"`
	NumExecutors     *int32                                       `thrift:"num_executors,5" db:"num_executors" json:"num_executors,omitempty"`
	NumTasks         *int32                                       `thrift:"num_tasks,6" db:"num_tasks" json:"num_tasks,omitempty"`
	WindowToStats    map[string]*ComponentAggregateStats          `thrift:"window_to_stats,7" db:"window_to_stats" json:"window_to_stats,omitempty"`
	GsidToInputStats map[*GlobalStreamId]*ComponentAggregateStats `thrift:"gsid_to_input_stats,8" db:"gsid_to_input_stats" json:"gsid_to_input_stats,omitempty"`
	SidToOutputStats map[string]*ComponentAggregateStats          `thrift:"sid_to_output_stats,9" db:"sid_to_output_stats" json:"sid_to_output_stats,omitempty"`
	ExecStats        []*ExecutorAggregateStats                    `thrift:"exec_stats,10" db:"exec_stats" json:"exec_stats,omitempty"`
	Errors           []*ErrorInfo                                 `thrift:"errors,11" db:"errors" json:"errors,omitempty"`
	EventlogHost     *string                                      `thrift:"eventlog_host,12" db:"eventlog_host" json:"eventlog_host,omitempty"`
	EventlogPort     *int32                                       `thrift:"eventlog_port,13" db:"eventlog_port" json:"eventlog_port,omitempty"`
	DebugOptions     *DebugOptions                                `thrift:"debug_options,14" db:"debug_options" json:"debug_options,omitempty"`
	TopologyStatus   *string                                      `thrift:"topology_status,15" db:"topology_status" json:"topology_status,omitempty"`
	ResourcesMap     map[string]float64                           `thrift:"resources_map,16" db:"resources_map" json:"resources_map,omitempty"`
}

func NewComponentPageInfo() *ComponentPageInfo {
	return &ComponentPageInfo{}
}

func (p *ComponentPageInfo) GetComponentID() string {
	return p.ComponentID
}

func (p *ComponentPageInfo) GetComponentType() ComponentType {
	return p.ComponentType
}

var ComponentPageInfo_TopologyID_DEFAULT string

func (p *ComponentPageInfo) GetTopologyID() string {
	if !p.IsSetTopologyID() {
		return ComponentPageInfo_TopologyID_DEFAULT
	}
	return *p.TopologyID
}

var ComponentPageInfo_TopologyName_DEFAULT string

func (p *ComponentPageInfo) GetTopologyName() string {
	if !p.IsSetTopologyName() {
		return ComponentPageInfo_TopologyName_DEFAULT
	}
	return *p.TopologyName
}

var ComponentPageInfo_NumExecutors_DEFAULT int32

func (p *ComponentPageInfo) GetNumExecutors() int32 {
	if !p.IsSetNumExecutors() {
		return ComponentPageInfo_NumExecutors_DEFAULT
	}
	return *p.NumExecutors
}

var ComponentPageInfo_NumTasks_DEFAULT int32

func (p *ComponentPageInfo) GetNumTasks() int32 {
	if !p.IsSetNumTasks() {
		return ComponentPageInfo_NumTasks_DEFAULT
	}
	return *p.NumTasks
}

var ComponentPageInfo_WindowToStats_DEFAULT map[string]*ComponentAggregateStats

func (p *ComponentPageInfo) GetWindowToStats() map[string]*ComponentAggregateStats {
	return p.WindowToStats
}

var ComponentPageInfo_GsidToInputStats_DEFAULT map[*GlobalStreamId]*ComponentAggregateStats

func (p *ComponentPageInfo) GetGsidToInputStats() map[*GlobalStreamId]*ComponentAggregateStats {
	return p.GsidToInputStats
}

var ComponentPageInfo_SidToOutputStats_DEFAULT map[string]*ComponentAggregateStats

func (p *ComponentPageInfo) GetSidToOutputStats() map[string]*ComponentAggregateStats {
	return p.SidToOutputStats
}

var ComponentPageInfo_ExecStats_DEFAULT []*ExecutorAggregateStats

func (p *ComponentPageInfo) GetExecStats() []*ExecutorAggregateStats {
	return p.ExecStats
}

var ComponentPageInfo_Errors_DEFAULT []*ErrorInfo

func (p *ComponentPageInfo) GetErrors() []*ErrorInfo {
	return p.Errors
}

var ComponentPageInfo_EventlogHost_DEFAULT string

func (p *ComponentPageInfo) GetEventlogHost() string {
	if !p.IsSetEventlogHost() {
		return ComponentPageInfo_EventlogHost_DEFAULT
	}
	return *p.EventlogHost
}

var ComponentPageInfo_EventlogPort_DEFAULT int32

func (p *ComponentPageInfo) GetEventlogPort() int32 {
	if !p.IsSetEventlogPort() {
		return ComponentPageInfo_EventlogPort_DEFAULT
	}
	return *p.EventlogPort
}

var ComponentPageInfo_DebugOptions_DEFAULT *DebugOptions

func (p *ComponentPageInfo) GetDebugOptions() *DebugOptions {
	if !p.IsSetDebugOptions() {
		return ComponentPageInfo_DebugOptions_DEFAULT
	}
	return p.DebugOptions
}

var ComponentPageInfo_TopologyStatus_DEFAULT string

func (p *ComponentPageInfo) GetTopologyStatus() string {
	if !p.IsSetTopologyStatus() {
		return ComponentPageInfo_TopologyStatus_DEFAULT
	}
	return *p.TopologyStatus
}

var ComponentPageInfo_ResourcesMap_DEFAULT map[string]float64

func (p *ComponentPageInfo) GetResourcesMap() map[string]float64 {
	return p.ResourcesMap
}

func (p *ComponentPageInfo) IsSetTopologyID() bool {
	return p.TopologyID != nil
}

func (p *ComponentPageInfo) IsSetTopologyName() bool {
	return p.TopologyName != nil
}

func (p *ComponentPageInfo) IsSetNumExecutors() bool {
	return p.NumExecutors != nil
}

func (p *ComponentPageInfo) IsSetNumTasks() bool {
	return p.NumTasks != nil
}

func (p *ComponentPageInfo) IsSetWindowToStats() bool {
	return p.WindowToStats != nil
}

func (p *ComponentPageInfo) IsSetGsidToInputStats() bool {
	return p.GsidToInputStats != nil
}

func (p *ComponentPageInfo) IsSetSidToOutputStats() bool {
	return p.SidToOutputStats != nil
}

func (p *ComponentPageInfo) IsSetExecStats() bool {
	return p.ExecStats != nil
}

func (p *ComponentPageInfo) IsSetErrors() bool {
	return p.Errors != nil
}

func (p *ComponentPageInfo) IsSetEventlogHost() bool {
	return p.EventlogHost != nil
}

func (p *ComponentPageInfo) IsSetEventlogPort() bool {
	return p.EventlogPort != nil
}

func (p *ComponentPageInfo) IsSetDebugOptions() bool {
	return p.DebugOptions != nil
}

func (p *ComponentPageInfo) IsSetTopologyStatus() bool {
	return p.TopologyStatus != nil
}

func (p *ComponentPageInfo) IsSetResourcesMap() bool {
	return p.ResourcesMap != nil
}

func (p *ComponentPageInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetComponentID bool = false
	var issetComponentType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetComponentID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetComponentType = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField12(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField13(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField14(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField15(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField16(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetComponentID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComponentID is not set"))
	}
	if !issetComponentType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComponentType is not set"))
	}
	return nil
}

func (p *ComponentPageInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ComponentID = v
	}
	return nil
}

func (p *ComponentPageInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := ComponentType(v)
		p.ComponentType = temp
	}
	return nil
}

func (p *ComponentPageInfo) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TopologyID = &v
	}
	return nil
}

func (p *ComponentPageInfo) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TopologyName = &v
	}
	return nil
}

func (p *ComponentPageInfo) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.NumExecutors = &v
	}
	return nil
}

func (p *ComponentPageInfo) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.NumTasks = &v
	}
	return nil
}

func (p *ComponentPageInfo) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*ComponentAggregateStats, size)
	p.WindowToStats = tMap
	for i := 0; i < size; i++ {
		var _key162 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key162 = v
		}
		_val163 := &ComponentAggregateStats{}
		if err := _val163.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val163), err)
		}
		p.WindowToStats[_key162] = _val163
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ComponentPageInfo) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[*GlobalStreamId]*ComponentAggregateStats, size)
	p.GsidToInputStats = tMap
	for i := 0; i < size; i++ {
		_key164 := &GlobalStreamId{}
		if err := _key164.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _key164), err)
		}
		_val165 := &ComponentAggregateStats{}
		if err := _val165.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val165), err)
		}
		p.GsidToInputStats[_key164] = _val165
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ComponentPageInfo) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*ComponentAggregateStats, size)
	p.SidToOutputStats = tMap
	for i := 0; i < size; i++ {
		var _key166 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key166 = v
		}
		_val167 := &ComponentAggregateStats{}
		if err := _val167.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val167), err)
		}
		p.SidToOutputStats[_key166] = _val167
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ComponentPageInfo) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ExecutorAggregateStats, 0, size)
	p.ExecStats = tSlice
	for i := 0; i < size; i++ {
		_elem168 := &ExecutorAggregateStats{}
		if err := _elem168.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem168), err)
		}
		p.ExecStats = append(p.ExecStats, _elem168)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ComponentPageInfo) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ErrorInfo, 0, size)
	p.Errors = tSlice
	for i := 0; i < size; i++ {
		_elem169 := &ErrorInfo{}
		if err := _elem169.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem169), err)
		}
		p.Errors = append(p.Errors, _elem169)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ComponentPageInfo) ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.EventlogHost = &v
	}
	return nil
}

func (p *ComponentPageInfo) ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.EventlogPort = &v
	}
	return nil
}

func (p *ComponentPageInfo) ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
	p.DebugOptions = &DebugOptions{}
	if err := p.DebugOptions.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DebugOptions), err)
	}
	return nil
}

func (p *ComponentPageInfo) ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.TopologyStatus = &v
	}
	return nil
}

func (p *ComponentPageInfo) ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]float64, size)
	p.ResourcesMap = tMap
	for i := 0; i < size; i++ {
		var _key170 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key170 = v
		}
		var _val171 float64
		if v, err := iprot.ReadDouble(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val171 = v
		}
		p.ResourcesMap[_key170] = _val171
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ComponentPageInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ComponentPageInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField11(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField12(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField13(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField14(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField15(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField16(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ComponentPageInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "component_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:component_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ComponentID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:component_id: ", p), err)
	}
	return err
}

func (p *ComponentPageInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "component_type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:component_type: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ComponentType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component_type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:component_type: ", p), err)
	}
	return err
}

func (p *ComponentPageInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTopologyID() {
		if err := oprot.WriteFieldBegin(ctx, "topology_id", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:topology_id: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.TopologyID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.topology_id (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:topology_id: ", p), err)
		}
	}
	return err
}

func (p *ComponentPageInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTopologyName() {
		if err := oprot.WriteFieldBegin(ctx, "topology_name", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:topology_name: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.TopologyName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.topology_name (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:topology_name: ", p), err)
		}
	}
	return err
}

func (p *ComponentPageInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNumExecutors() {
		if err := oprot.WriteFieldBegin(ctx, "num_executors", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:num_executors: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.NumExecutors)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.num_executors (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:num_executors: ", p), err)
		}
	}
	return err
}

func (p *ComponentPageInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNumTasks() {
		if err := oprot.WriteFieldBegin(ctx, "num_tasks", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:num_tasks: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.NumTasks)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.num_tasks (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:num_tasks: ", p), err)
		}
	}
	return err
}

func (p *ComponentPageInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetWindowToStats() {
		if err := oprot.WriteFieldBegin(ctx, "window_to_stats", thrift.MAP, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:window_to_stats: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.WindowToStats)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.WindowToStats {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:window_to_stats: ", p), err)
		}
	}
	return err
}

func (p *ComponentPageInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetGsidToInputStats() {
		if err := oprot.WriteFieldBegin(ctx, "gsid_to_input_stats", thrift.MAP, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:gsid_to_input_stats: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRUCT, thrift.STRUCT, len(p.GsidToInputStats)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.GsidToInputStats {
			if err := k.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", k), err)
			}
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:gsid_to_input_stats: ", p), err)
		}
	}
	return err
}

func (p *ComponentPageInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSidToOutputStats() {
		if err := oprot.WriteFieldBegin(ctx, "sid_to_output_stats", thrift.MAP, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:sid_to_output_stats: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.SidToOutputStats)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.SidToOutputStats {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:sid_to_output_stats: ", p), err)
		}
	}
	return err
}

func (p *ComponentPageInfo) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExecStats() {
		if err := oprot.WriteFieldBegin(ctx, "exec_stats", thrift.LIST, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:exec_stats: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ExecStats)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ExecStats {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:exec_stats: ", p), err)
		}
	}
	return err
}

func (p *ComponentPageInfo) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetErrors() {
		if err := oprot.WriteFieldBegin(ctx, "errors", thrift.LIST, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:errors: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Errors)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Errors {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:errors: ", p), err)
		}
	}
	return err
}

func (p *ComponentPageInfo) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetEventlogHost() {
		if err := oprot.WriteFieldBegin(ctx, "eventlog_host", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:eventlog_host: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.EventlogHost)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.eventlog_host (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:eventlog_host: ", p), err)
		}
	}
	return err
}

func (p *ComponentPageInfo) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetEventlogPort() {
		if err := oprot.WriteFieldBegin(ctx, "eventlog_port", thrift.I32, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:eventlog_port: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.EventlogPort)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.eventlog_port (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:eventlog_port: ", p), err)
		}
	}
	return err
}

func (p *ComponentPageInfo) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDebugOptions() {
		if err := oprot.WriteFieldBegin(ctx, "debug_options", thrift.STRUCT, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:debug_options: ", p), err)
		}
		if err := p.DebugOptions.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DebugOptions), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:debug_options: ", p), err)
		}
	}
	return err
}

func (p *ComponentPageInfo) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTopologyStatus() {
		if err := oprot.WriteFieldBegin(ctx, "topology_status", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:topology_status: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.TopologyStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.topology_status (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:topology_status: ", p), err)
		}
	}
	return err
}

func (p *ComponentPageInfo) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetResourcesMap() {
		if err := oprot.WriteFieldBegin(ctx, "resources_map", thrift.MAP, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:resources_map: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.DOUBLE, len(p.ResourcesMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ResourcesMap {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:resources_map: ", p), err)
		}
	}
	return err
}

func (p *ComponentPageInfo) Equals(other *ComponentPageInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ComponentID != other.ComponentID {
		return false
	}
	if p.ComponentType != other.ComponentType {
		return false
	}
	if p.TopologyID != other.TopologyID {
		if p.TopologyID == nil || other.TopologyID == nil {
			return false
		}
		if (*p.TopologyID) != (*other.TopologyID) {
			return false
		}
	}
	if p.TopologyName != other.TopologyName {
		if p.TopologyName == nil || other.TopologyName == nil {
			return false
		}
		if (*p.TopologyName) != (*other.TopologyName) {
			return false
		}
	}
	if p.NumExecutors != other.NumExecutors {
		if p.NumExecutors == nil || other.NumExecutors == nil {
			return false
		}
		if (*p.NumExecutors) != (*other.NumExecutors) {
			return false
		}
	}
	if p.NumTasks != other.NumTasks {
		if p.NumTasks == nil || other.NumTasks == nil {
			return false
		}
		if (*p.NumTasks) != (*other.NumTasks) {
			return false
		}
	}
	if len(p.WindowToStats) != len(other.WindowToStats) {
		return false
	}
	for k, _tgt := range p.WindowToStats {
		_src172 := other.WindowToStats[k]
		if !_tgt.Equals(_src172) {
			return false
		}
	}
	if len(p.GsidToInputStats) != len(other.GsidToInputStats) {
		return false
	}
	for k, _tgt := range p.GsidToInputStats {
		_src173 := other.GsidToInputStats[k]
		if !_tgt.Equals(_src173) {
			return false
		}
	}
	if len(p.SidToOutputStats) != len(other.SidToOutputStats) {
		return false
	}
	for k, _tgt := range p.SidToOutputStats {
		_src174 := other.SidToOutputStats[k]
		if !_tgt.Equals(_src174) {
			return false
		}
	}
	if len(p.ExecStats) != len(other.ExecStats) {
		return false
	}
	for i, _tgt := range p.ExecStats {
		_src175 := other.ExecStats[i]
		if !_tgt.Equals(_src175) {
			return false
		}
	}
	if len(p.Errors) != len(other.Errors) {
		return false
	}
	for i, _tgt := range p.Errors {
		_src176 := other.Errors[i]
		if !_tgt.Equals(_src176) {
			return false
		}
	}
	if p.EventlogHost != other.EventlogHost {
		if p.EventlogHost == nil || other.EventlogHost == nil {
			return false
		}
		if (*p.EventlogHost) != (*other.EventlogHost) {
			return false
		}
	}
	if p.EventlogPort != other.EventlogPort {
		if p.EventlogPort == nil || other.EventlogPort == nil {
			return false
		}
		if (*p.EventlogPort) != (*other.EventlogPort) {
			return false
		}
	}
	if !p.DebugOptions.Equals(other.DebugOptions) {
		return false
	}
	if p.TopologyStatus != other.TopologyStatus {
		if p.TopologyStatus == nil || other.TopologyStatus == nil {
			return false
		}
		if (*p.TopologyStatus) != (*other.TopologyStatus) {
			return false
		}
	}
	if len(p.ResourcesMap) != len(other.ResourcesMap) {
		return false
	}
	for k, _tgt := range p.ResourcesMap {
		_src177 := other.ResourcesMap[k]
		if _tgt != _src177 {
			return false
		}
	}
	return true
}

func (p *ComponentPageInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComponentPageInfo(%+v)", *p)
}

func (p *ComponentPageInfo) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.ComponentPageInfo",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ComponentPageInfo)(nil)

func (p *ComponentPageInfo) Validate() error {
	return nil
}

// Attributes:
//   - WaitSecs
type KillOptions struct {
	WaitSecs *int32 `thrift:"wait_secs,1" db:"wait_secs" json:"wait_secs,omitempty"`
}

func NewKillOptions() *KillOptions {
	return &KillOptions{}
}

var KillOptions_WaitSecs_DEFAULT int32

func (p *KillOptions) GetWaitSecs() int32 {
	if !p.IsSetWaitSecs() {
		return KillOptions_WaitSecs_DEFAULT
	}
	return *p.WaitSecs
}

func (p *KillOptions) IsSetWaitSecs() bool {
	return p.WaitSecs != nil
}

func (p *KillOptions) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KillOptions) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.WaitSecs = &v
	}
	return nil
}

func (p *KillOptions) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "KillOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KillOptions) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetWaitSecs() {
		if err := oprot.WriteFieldBegin(ctx, "wait_secs", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:wait_secs: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.WaitSecs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.wait_secs (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:wait_secs: ", p), err)
		}
	}
	return err
}

func (p *KillOptions) Equals(other *KillOptions) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.WaitSecs != other.WaitSecs {
		if p.WaitSecs == nil || other.WaitSecs == nil {
			return false
		}
		if (*p.WaitSecs) != (*other.WaitSecs) {
			return false
		}
	}
	return true
}

func (p *KillOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KillOptions(%+v)", *p)
}

func (p *KillOptions) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.KillOptions",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*KillOptions)(nil)

func (p *KillOptions) Validate() error {
	return nil
}

// Attributes:
//   - WaitSecs
//   - NumWorkers
//   - NumExecutors
//   - TopologyResourcesOverrides
//   - TopologyConfOverrides
//   - Principal
type RebalanceOptions struct {
	WaitSecs                   *int32                        `thrift:"wait_secs,1" db:"wait_secs" json:"wait_secs,omitempty"`
	NumWorkers                 *int32                        `thrift:"num_workers,2" db:"num_workers" json:"num_workers,omitempty"`
	NumExecutors               map[string]int32              `thrift:"num_executors,3" db:"num_executors" json:"num_executors,omitempty"`
	TopologyResourcesOverrides map[string]map[string]float64 `thrift:"topology_resources_overrides,4" db:"topology_resources_overrides" json:"topology_resources_overrides,omitempty"`
	TopologyConfOverrides      *string                       `thrift:"topology_conf_overrides,5" db:"topology_conf_overrides" json:"topology_conf_overrides,omitempty"`
	Principal                  *string                       `thrift:"principal,6" db:"principal" json:"principal,omitempty"`
}

func NewRebalanceOptions() *RebalanceOptions {
	return &RebalanceOptions{}
}

var RebalanceOptions_WaitSecs_DEFAULT int32

func (p *RebalanceOptions) GetWaitSecs() int32 {
	if !p.IsSetWaitSecs() {
		return RebalanceOptions_WaitSecs_DEFAULT
	}
	return *p.WaitSecs
}

var RebalanceOptions_NumWorkers_DEFAULT int32

func (p *RebalanceOptions) GetNumWorkers() int32 {
	if !p.IsSetNumWorkers() {
		return RebalanceOptions_NumWorkers_DEFAULT
	}
	return *p.NumWorkers
}

var RebalanceOptions_NumExecutors_DEFAULT map[string]int32

func (p *RebalanceOptions) GetNumExecutors() map[string]int32 {
	return p.NumExecutors
}

var RebalanceOptions_TopologyResourcesOverrides_DEFAULT map[string]map[string]float64

func (p *RebalanceOptions) GetTopologyResourcesOverrides() map[string]map[string]float64 {
	return p.TopologyResourcesOverrides
}

var RebalanceOptions_TopologyConfOverrides_DEFAULT string

func (p *RebalanceOptions) GetTopologyConfOverrides() string {
	if !p.IsSetTopologyConfOverrides() {
		return RebalanceOptions_TopologyConfOverrides_DEFAULT
	}
	return *p.TopologyConfOverrides
}

var RebalanceOptions_Principal_DEFAULT string

func (p *RebalanceOptions) GetPrincipal() string {
	if !p.IsSetPrincipal() {
		return RebalanceOptions_Principal_DEFAULT
	}
	return *p.Principal
}

func (p *RebalanceOptions) IsSetWaitSecs() bool {
	return p.WaitSecs != nil
}

func (p *RebalanceOptions) IsSetNumWorkers() bool {
	return p.NumWorkers != nil
}

func (p *RebalanceOptions) IsSetNumExecutors() bool {
	return p.NumExecutors != nil
}

func (p *RebalanceOptions) IsSetTopologyResourcesOverrides() bool {
	return p.TopologyResourcesOverrides != nil
}

func (p *RebalanceOptions) IsSetTopologyConfOverrides() bool {
	return p.TopologyConfOverrides != nil
}

func (p *RebalanceOptions) IsSetPrincipal() bool {
	return p.Principal != nil
}

func (p *RebalanceOptions) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RebalanceOptions) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.WaitSecs = &v
	}
	return nil
}

func (p *RebalanceOptions) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NumWorkers = &v
	}
	return nil
}

func (p *RebalanceOptions) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int32, size)
	p.NumExecutors = tMap
	for i := 0; i < size; i++ {
		var _key178 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key178 = v
		}
		var _val179 int32
		if v, err := iprot.ReadI32(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val179 = v
		}
		p.NumExecutors[_key178] = _val179
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RebalanceOptions) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[string]float64, size)
	p.TopologyResourcesOverrides = tMap
	for i := 0; i < size; i++ {
		var _key180 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key180 = v
		}
		_, _, size, err := iprot.ReadMapBegin(ctx)
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]float64, size)
		_val181 := tMap
		for i := 0; i < size; i++ {
			var _key182 string
			if v, err := iprot.ReadString(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key182 = v
			}
			var _val183 float64
			if v, err := iprot.ReadDouble(ctx); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val183 = v
			}
			_val181[_key182] = _val183
		}
		if err := iprot.ReadMapEnd(ctx); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.TopologyResourcesOverrides[_key180] = _val181
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *RebalanceOptions) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TopologyConfOverrides = &v
	}
	return nil
}

func (p *RebalanceOptions) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Principal = &v
	}
	return nil
}

func (p *RebalanceOptions) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RebalanceOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RebalanceOptions) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetWaitSecs() {
		if err := oprot.WriteFieldBegin(ctx, "wait_secs", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:wait_secs: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.WaitSecs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.wait_secs (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:wait_secs: ", p), err)
		}
	}
	return err
}

func (p *RebalanceOptions) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNumWorkers() {
		if err := oprot.WriteFieldBegin(ctx, "num_workers", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num_workers: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.NumWorkers)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.num_workers (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num_workers: ", p), err)
		}
	}
	return err
}

func (p *RebalanceOptions) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNumExecutors() {
		if err := oprot.WriteFieldBegin(ctx, "num_executors", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:num_executors: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I32, len(p.NumExecutors)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.NumExecutors {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI32(ctx, int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:num_executors: ", p), err)
		}
	}
	return err
}

func (p *RebalanceOptions) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTopologyResourcesOverrides() {
		if err := oprot.WriteFieldBegin(ctx, "topology_resources_overrides", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:topology_resources_overrides: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.MAP, len(p.TopologyResourcesOverrides)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.TopologyResourcesOverrides {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.DOUBLE, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(ctx, string(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteMapEnd(ctx); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:topology_resources_overrides: ", p), err)
		}
	}
	return err
}

func (p *RebalanceOptions) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTopologyConfOverrides() {
		if err := oprot.WriteFieldBegin(ctx, "topology_conf_overrides", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:topology_conf_overrides: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.TopologyConfOverrides)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.topology_conf_overrides (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:topology_conf_overrides: ", p), err)
		}
	}
	return err
}

func (p *RebalanceOptions) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPrincipal() {
		if err := oprot.WriteFieldBegin(ctx, "principal", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:principal: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Principal)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.principal (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:principal: ", p), err)
		}
	}
	return err
}

func (p *RebalanceOptions) Equals(other *RebalanceOptions) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.WaitSecs != other.WaitSecs {
		if p.WaitSecs == nil || other.WaitSecs == nil {
			return false
		}
		if (*p.WaitSecs) != (*other.WaitSecs) {
			return false
		}
	}
	if p.NumWorkers != other.NumWorkers {
		if p.NumWorkers == nil || other.NumWorkers == nil {
			return false
		}
		if (*p.NumWorkers) != (*other.NumWorkers) {
			return false
		}
	}
	if len(p.NumExecutors) != len(other.NumExecutors) {
		return false
	}
	for k, _tgt := range p.NumExecutors {
		_src184 := other.NumExecutors[k]
		if _tgt != _src184 {
			return false
		}
	}
	if len(p.TopologyResourcesOverrides) != len(other.TopologyResourcesOverrides) {
		return false
	}
	for k, _tgt := range p.TopologyResourcesOverrides {
		_src185 := other.TopologyResourcesOverrides[k]
		if len(_tgt) != len(_src185) {
			return false
		}
		for k, _tgt := range _tgt {
			_src186 := _src185[k]
			if _tgt != _src186 {
				return false
			}
		}
	}
	if p.TopologyConfOverrides != other.TopologyConfOverrides {
		if p.TopologyConfOverrides == nil || other.TopologyConfOverrides == nil {
			return false
		}
		if (*p.TopologyConfOverrides) != (*other.TopologyConfOverrides) {
			return false
		}
	}
	if p.Principal != other.Principal {
		if p.Principal == nil || other.Principal == nil {
			return false
		}
		if (*p.Principal) != (*other.Principal) {
			return false
		}
	}
	return true
}

func (p *RebalanceOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RebalanceOptions(%+v)", *p)
}

func (p *RebalanceOptions) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.RebalanceOptions",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*RebalanceOptions)(nil)

func (p *RebalanceOptions) Validate() error {
	return nil
}

// Attributes:
//   - Creds
//   - TopoOwner
type Credentials struct {
	Creds     map[string]string `thrift:"creds,1,required" db:"creds" json:"creds"`
	TopoOwner *string           `thrift:"topoOwner,2" db:"topoOwner" json:"topoOwner,omitempty"`
}

func NewCredentials() *Credentials {
	return &Credentials{}
}

func (p *Credentials) GetCreds() map[string]string {
	return p.Creds
}

var Credentials_TopoOwner_DEFAULT string

func (p *Credentials) GetTopoOwner() string {
	if !p.IsSetTopoOwner() {
		return Credentials_TopoOwner_DEFAULT
	}
	return *p.TopoOwner
}

func (p *Credentials) IsSetTopoOwner() bool {
	return p.TopoOwner != nil
}

func (p *Credentials) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCreds bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetCreds = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCreds {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Creds is not set"))
	}
	return nil
}

func (p *Credentials) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Creds = tMap
	for i := 0; i < size; i++ {
		var _key187 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key187 = v
		}
		var _val188 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val188 = v
		}
		p.Creds[_key187] = _val188
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Credentials) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TopoOwner = &v
	}
	return nil
}

func (p *Credentials) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Credentials"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Credentials) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "creds", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:creds: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Creds)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Creds {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:creds: ", p), err)
	}
	return err
}

func (p *Credentials) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTopoOwner() {
		if err := oprot.WriteFieldBegin(ctx, "topoOwner", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:topoOwner: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.TopoOwner)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.topoOwner (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:topoOwner: ", p), err)
		}
	}
	return err
}

func (p *Credentials) Equals(other *Credentials) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Creds) != len(other.Creds) {
		return false
	}
	for k, _tgt := range p.Creds {
		_src189 := other.Creds[k]
		if _tgt != _src189 {
			return false
		}
	}
	if p.TopoOwner != other.TopoOwner {
		if p.TopoOwner == nil || other.TopoOwner == nil {
			return false
		}
		if (*p.TopoOwner) != (*other.TopoOwner) {
			return false
		}
	}
	return true
}

func (p *Credentials) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Credentials(%+v)", *p)
}

func (p *Credentials) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.Credentials",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*Credentials)(nil)

func (p *Credentials) Validate() error {
	return nil
}

// Attributes:
//   - InitialStatus
//   - Creds
type SubmitOptions struct {
	InitialStatus TopologyInitialStatus `thrift:"initial_status,1,required" db:"initial_status" json:"initial_status"`
	Creds         *Credentials          `thrift:"creds,2" db:"creds" json:"creds,omitempty"`
}

func NewSubmitOptions() *SubmitOptions {
	return &SubmitOptions{}
}

func (p *SubmitOptions) GetInitialStatus() TopologyInitialStatus {
	return p.InitialStatus
}

var SubmitOptions_Creds_DEFAULT *Credentials

func (p *SubmitOptions) GetCreds() *Credentials {
	if !p.IsSetCreds() {
		return SubmitOptions_Creds_DEFAULT
	}
	return p.Creds
}

func (p *SubmitOptions) IsSetCreds() bool {
	return p.Creds != nil
}

func (p *SubmitOptions) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetInitialStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetInitialStatus = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetInitialStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field InitialStatus is not set"))
	}
	return nil
}

func (p *SubmitOptions) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TopologyInitialStatus(v)
		p.InitialStatus = temp
	}
	return nil
}

func (p *SubmitOptions) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Creds = &Credentials{}
	if err := p.Creds.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Creds), err)
	}
	return nil
}

func (p *SubmitOptions) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SubmitOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SubmitOptions) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "initial_status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:initial_status: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.InitialStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.initial_status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:initial_status: ", p), err)
	}
	return err
}

func (p *SubmitOptions) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCreds() {
		if err := oprot.WriteFieldBegin(ctx, "creds", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:creds: ", p), err)
		}
		if err := p.Creds.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Creds), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:creds: ", p), err)
		}
	}
	return err
}

func (p *SubmitOptions) Equals(other *SubmitOptions) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.InitialStatus != other.InitialStatus {
		return false
	}
	if !p.Creds.Equals(other.Creds) {
		return false
	}
	return true
}

func (p *SubmitOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitOptions(%+v)", *p)
}

func (p *SubmitOptions) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SubmitOptions",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SubmitOptions)(nil)

func (p *SubmitOptions) Validate() error {
	return nil
}

// Attributes:
//   - Type
//   - Name
//   - Access
type AccessControl struct {
	Type   AccessControlType `thrift:"type,1,required" db:"type" json:"type"`
	Name   *string           `thrift:"name,2" db:"name" json:"name,omitempty"`
	Access int32             `thrift:"access,3,required" db:"access" json:"access"`
}

func NewAccessControl() *AccessControl {
	return &AccessControl{}
}

func (p *AccessControl) GetType() AccessControlType {
	return p.Type
}

var AccessControl_Name_DEFAULT string

func (p *AccessControl) GetName() string {
	if !p.IsSetName() {
		return AccessControl_Name_DEFAULT
	}
	return *p.Name
}

func (p *AccessControl) GetAccess() int32 {
	return p.Access
}

func (p *AccessControl) IsSetName() bool {
	return p.Name != nil
}

func (p *AccessControl) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetType bool = false
	var issetAccess bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetType = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetAccess = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	if !issetAccess {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Access is not set"))
	}
	return nil
}

func (p *AccessControl) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := AccessControlType(v)
		p.Type = temp
	}
	return nil
}

func (p *AccessControl) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *AccessControl) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Access = v
	}
	return nil
}

func (p *AccessControl) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AccessControl"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccessControl) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *AccessControl) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
		}
	}
	return err
}

func (p *AccessControl) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "access", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:access: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Access)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.access (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:access: ", p), err)
	}
	return err
}

func (p *AccessControl) Equals(other *AccessControl) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Type != other.Type {
		return false
	}
	if p.Name != other.Name {
		if p.Name == nil || other.Name == nil {
			return false
		}
		if (*p.Name) != (*other.Name) {
			return false
		}
	}
	if p.Access != other.Access {
		return false
	}
	return true
}

func (p *AccessControl) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccessControl(%+v)", *p)
}

func (p *AccessControl) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.AccessControl",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AccessControl)(nil)

func (p *AccessControl) Validate() error {
	return nil
}

// Attributes:
//   - Acl
//   - ReplicationFactor
type SettableBlobMeta struct {
	Acl               []*AccessControl `thrift:"acl,1,required" db:"acl" json:"acl"`
	ReplicationFactor *int32           `thrift:"replication_factor,2" db:"replication_factor" json:"replication_factor,omitempty"`
}

func NewSettableBlobMeta() *SettableBlobMeta {
	return &SettableBlobMeta{}
}

func (p *SettableBlobMeta) GetAcl() []*AccessControl {
	return p.Acl
}

var SettableBlobMeta_ReplicationFactor_DEFAULT int32

func (p *SettableBlobMeta) GetReplicationFactor() int32 {
	if !p.IsSetReplicationFactor() {
		return SettableBlobMeta_ReplicationFactor_DEFAULT
	}
	return *p.ReplicationFactor
}

func (p *SettableBlobMeta) IsSetReplicationFactor() bool {
	return p.ReplicationFactor != nil
}

func (p *SettableBlobMeta) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetAcl bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetAcl = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetAcl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Acl is not set"))
	}
	return nil
}

func (p *SettableBlobMeta) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AccessControl, 0, size)
	p.Acl = tSlice
	for i := 0; i < size; i++ {
		_elem190 := &AccessControl{}
		if err := _elem190.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem190), err)
		}
		p.Acl = append(p.Acl, _elem190)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SettableBlobMeta) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ReplicationFactor = &v
	}
	return nil
}

func (p *SettableBlobMeta) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SettableBlobMeta"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SettableBlobMeta) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "acl", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:acl: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Acl)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Acl {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:acl: ", p), err)
	}
	return err
}

func (p *SettableBlobMeta) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicationFactor() {
		if err := oprot.WriteFieldBegin(ctx, "replication_factor", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:replication_factor: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.ReplicationFactor)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.replication_factor (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:replication_factor: ", p), err)
		}
	}
	return err
}

func (p *SettableBlobMeta) Equals(other *SettableBlobMeta) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Acl) != len(other.Acl) {
		return false
	}
	for i, _tgt := range p.Acl {
		_src191 := other.Acl[i]
		if !_tgt.Equals(_src191) {
			return false
		}
	}
	if p.ReplicationFactor != other.ReplicationFactor {
		if p.ReplicationFactor == nil || other.ReplicationFactor == nil {
			return false
		}
		if (*p.ReplicationFactor) != (*other.ReplicationFactor) {
			return false
		}
	}
	return true
}

func (p *SettableBlobMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SettableBlobMeta(%+v)", *p)
}

func (p *SettableBlobMeta) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SettableBlobMeta",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SettableBlobMeta)(nil)

func (p *SettableBlobMeta) Validate() error {
	return nil
}

// Attributes:
//   - Settable
//   - Version
type ReadableBlobMeta struct {
	Settable *SettableBlobMeta `thrift:"settable,1,required" db:"settable" json:"settable"`
	Version  int64             `thrift:"version,2,required" db:"version" json:"version"`
}

func NewReadableBlobMeta() *ReadableBlobMeta {
	return &ReadableBlobMeta{}
}

var ReadableBlobMeta_Settable_DEFAULT *SettableBlobMeta

func (p *ReadableBlobMeta) GetSettable() *SettableBlobMeta {
	if !p.IsSetSettable() {
		return ReadableBlobMeta_Settable_DEFAULT
	}
	return p.Settable
}

func (p *ReadableBlobMeta) GetVersion() int64 {
	return p.Version
}

func (p *ReadableBlobMeta) IsSetSettable() bool {
	return p.Settable != nil
}

func (p *ReadableBlobMeta) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSettable bool = false
	var issetVersion bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSettable = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetVersion = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSettable {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Settable is not set"))
	}
	if !issetVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"))
	}
	return nil
}

func (p *ReadableBlobMeta) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Settable = &SettableBlobMeta{}
	if err := p.Settable.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Settable), err)
	}
	return nil
}

func (p *ReadableBlobMeta) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *ReadableBlobMeta) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ReadableBlobMeta"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadableBlobMeta) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "settable", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:settable: ", p), err)
	}
	if err := p.Settable.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Settable), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:settable: ", p), err)
	}
	return err
}

func (p *ReadableBlobMeta) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "version", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err)
	}
	return err
}

func (p *ReadableBlobMeta) Equals(other *ReadableBlobMeta) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Settable.Equals(other.Settable) {
		return false
	}
	if p.Version != other.Version {
		return false
	}
	return true
}

func (p *ReadableBlobMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadableBlobMeta(%+v)", *p)
}

func (p *ReadableBlobMeta) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.ReadableBlobMeta",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ReadableBlobMeta)(nil)

func (p *ReadableBlobMeta) Validate() error {
	return nil
}

// Attributes:
//   - Keys
//   - Session
type ListBlobsResult_ struct {
	Keys    []string `thrift:"keys,1,required" db:"keys" json:"keys"`
	Session string   `thrift:"session,2,required" db:"session" json:"session"`
}

func NewListBlobsResult_() *ListBlobsResult_ {
	return &ListBlobsResult_{}
}

func (p *ListBlobsResult_) GetKeys() []string {
	return p.Keys
}

func (p *ListBlobsResult_) GetSession() string {
	return p.Session
}

func (p *ListBlobsResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetKeys bool = false
	var issetSession bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetKeys = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetSession = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetKeys {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Keys is not set"))
	}
	if !issetSession {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Session is not set"))
	}
	return nil
}

func (p *ListBlobsResult_) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Keys = tSlice
	for i := 0; i < size; i++ {
		var _elem192 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem192 = v
		}
		p.Keys = append(p.Keys, _elem192)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ListBlobsResult_) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Session = v
	}
	return nil
}

func (p *ListBlobsResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ListBlobsResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListBlobsResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keys: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Keys {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keys: ", p), err)
	}
	return err
}

func (p *ListBlobsResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "session", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:session: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:session: ", p), err)
	}
	return err
}

func (p *ListBlobsResult_) Equals(other *ListBlobsResult_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Keys) != len(other.Keys) {
		return false
	}
	for i, _tgt := range p.Keys {
		_src193 := other.Keys[i]
		if _tgt != _src193 {
			return false
		}
	}
	if p.Session != other.Session {
		return false
	}
	return true
}

func (p *ListBlobsResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListBlobsResult_(%+v)", *p)
}

func (p *ListBlobsResult_) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.ListBlobsResult_",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ListBlobsResult_)(nil)

func (p *ListBlobsResult_) Validate() error {
	return nil
}

// Attributes:
//   - Version
//   - Session
//   - DataSize
type BeginDownloadResult_ struct {
	Version  int64  `thrift:"version,1,required" db:"version" json:"version"`
	Session  string `thrift:"session,2,required" db:"session" json:"session"`
	DataSize *int64 `thrift:"data_size,3" db:"data_size" json:"data_size,omitempty"`
}

func NewBeginDownloadResult_() *BeginDownloadResult_ {
	return &BeginDownloadResult_{}
}

func (p *BeginDownloadResult_) GetVersion() int64 {
	return p.Version
}

func (p *BeginDownloadResult_) GetSession() string {
	return p.Session
}

var BeginDownloadResult__DataSize_DEFAULT int64

func (p *BeginDownloadResult_) GetDataSize() int64 {
	if !p.IsSetDataSize() {
		return BeginDownloadResult__DataSize_DEFAULT
	}
	return *p.DataSize
}

func (p *BeginDownloadResult_) IsSetDataSize() bool {
	return p.DataSize != nil
}

func (p *BeginDownloadResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetVersion bool = false
	var issetSession bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetVersion = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetSession = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"))
	}
	if !issetSession {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Session is not set"))
	}
	return nil
}

func (p *BeginDownloadResult_) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *BeginDownloadResult_) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Session = v
	}
	return nil
}

func (p *BeginDownloadResult_) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DataSize = &v
	}
	return nil
}

func (p *BeginDownloadResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BeginDownloadResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BeginDownloadResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "version", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err)
	}
	return err
}

func (p *BeginDownloadResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "session", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:session: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:session: ", p), err)
	}
	return err
}

func (p *BeginDownloadResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDataSize() {
		if err := oprot.WriteFieldBegin(ctx, "data_size", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data_size: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.DataSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.data_size (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data_size: ", p), err)
		}
	}
	return err
}

func (p *BeginDownloadResult_) Equals(other *BeginDownloadResult_) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Version != other.Version {
		return false
	}
	if p.Session != other.Session {
		return false
	}
	if p.DataSize != other.DataSize {
		if p.DataSize == nil || other.DataSize == nil {
			return false
		}
		if (*p.DataSize) != (*other.DataSize) {
			return false
		}
	}
	return true
}

func (p *BeginDownloadResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BeginDownloadResult_(%+v)", *p)
}

func (p *BeginDownloadResult_) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.BeginDownloadResult_",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*BeginDownloadResult_)(nil)

func (p *BeginDownloadResult_) Validate() error {
	return nil
}

// Attributes:
//   - TimeSecs
//   - Hostname
//   - AssignmentID
//   - UsedPorts
//   - Meta
//   - SchedulerMeta
//   - UptimeSecs
//   - Version
//   - ResourcesMap
//   - ServerPort
type SupervisorInfo struct {
	TimeSecs      int64              `thrift:"time_secs,1,required" db:"time_secs" json:"time_secs"`
	Hostname      string             `thrift:"hostname,2,required" db:"hostname" json:"hostname"`
	AssignmentID  *string            `thrift:"assignment_id,3" db:"assignment_id" json:"assignment_id,omitempty"`
	UsedPorts     []int64            `thrift:"used_ports,4" db:"used_ports" json:"used_ports,omitempty"`
	Meta          []int64            `thrift:"meta,5" db:"meta" json:"meta,omitempty"`
	SchedulerMeta map[string]string  `thrift:"scheduler_meta,6" db:"scheduler_meta" json:"scheduler_meta,omitempty"`
	UptimeSecs    *int64             `thrift:"uptime_secs,7" db:"uptime_secs" json:"uptime_secs,omitempty"`
	Version       *string            `thrift:"version,8" db:"version" json:"version,omitempty"`
	ResourcesMap  map[string]float64 `thrift:"resources_map,9" db:"resources_map" json:"resources_map,omitempty"`
	ServerPort    *int32             `thrift:"server_port,10" db:"server_port" json:"server_port,omitempty"`
}

func NewSupervisorInfo() *SupervisorInfo {
	return &SupervisorInfo{}
}

func (p *SupervisorInfo) GetTimeSecs() int64 {
	return p.TimeSecs
}

func (p *SupervisorInfo) GetHostname() string {
	return p.Hostname
}

var SupervisorInfo_AssignmentID_DEFAULT string

func (p *SupervisorInfo) GetAssignmentID() string {
	if !p.IsSetAssignmentID() {
		return SupervisorInfo_AssignmentID_DEFAULT
	}
	return *p.AssignmentID
}

var SupervisorInfo_UsedPorts_DEFAULT []int64

func (p *SupervisorInfo) GetUsedPorts() []int64 {
	return p.UsedPorts
}

var SupervisorInfo_Meta_DEFAULT []int64

func (p *SupervisorInfo) GetMeta() []int64 {
	return p.Meta
}

var SupervisorInfo_SchedulerMeta_DEFAULT map[string]string

func (p *SupervisorInfo) GetSchedulerMeta() map[string]string {
	return p.SchedulerMeta
}

var SupervisorInfo_UptimeSecs_DEFAULT int64

func (p *SupervisorInfo) GetUptimeSecs() int64 {
	if !p.IsSetUptimeSecs() {
		return SupervisorInfo_UptimeSecs_DEFAULT
	}
	return *p.UptimeSecs
}

var SupervisorInfo_Version_DEFAULT string

func (p *SupervisorInfo) GetVersion() string {
	if !p.IsSetVersion() {
		return SupervisorInfo_Version_DEFAULT
	}
	return *p.Version
}

var SupervisorInfo_ResourcesMap_DEFAULT map[string]float64

func (p *SupervisorInfo) GetResourcesMap() map[string]float64 {
	return p.ResourcesMap
}

var SupervisorInfo_ServerPort_DEFAULT int32

func (p *SupervisorInfo) GetServerPort() int32 {
	if !p.IsSetServerPort() {
		return SupervisorInfo_ServerPort_DEFAULT
	}
	return *p.ServerPort
}

func (p *SupervisorInfo) IsSetAssignmentID() bool {
	return p.AssignmentID != nil
}

func (p *SupervisorInfo) IsSetUsedPorts() bool {
	return p.UsedPorts != nil
}

func (p *SupervisorInfo) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *SupervisorInfo) IsSetSchedulerMeta() bool {
	return p.SchedulerMeta != nil
}

func (p *SupervisorInfo) IsSetUptimeSecs() bool {
	return p.UptimeSecs != nil
}

func (p *SupervisorInfo) IsSetVersion() bool {
	return p.Version != nil
}

func (p *SupervisorInfo) IsSetResourcesMap() bool {
	return p.ResourcesMap != nil
}

func (p *SupervisorInfo) IsSetServerPort() bool {
	return p.ServerPort != nil
}

func (p *SupervisorInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTimeSecs bool = false
	var issetHostname bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetTimeSecs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetHostname = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTimeSecs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TimeSecs is not set"))
	}
	if !issetHostname {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Hostname is not set"))
	}
	return nil
}

func (p *SupervisorInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TimeSecs = v
	}
	return nil
}

func (p *SupervisorInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Hostname = v
	}
	return nil
}

func (p *SupervisorInfo) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AssignmentID = &v
	}
	return nil
}

func (p *SupervisorInfo) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.UsedPorts = tSlice
	for i := 0; i < size; i++ {
		var _elem194 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem194 = v
		}
		p.UsedPorts = append(p.UsedPorts, _elem194)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SupervisorInfo) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Meta = tSlice
	for i := 0; i < size; i++ {
		var _elem195 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem195 = v
		}
		p.Meta = append(p.Meta, _elem195)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SupervisorInfo) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.SchedulerMeta = tMap
	for i := 0; i < size; i++ {
		var _key196 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key196 = v
		}
		var _val197 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val197 = v
		}
		p.SchedulerMeta[_key196] = _val197
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SupervisorInfo) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.UptimeSecs = &v
	}
	return nil
}

func (p *SupervisorInfo) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Version = &v
	}
	return nil
}

func (p *SupervisorInfo) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]float64, size)
	p.ResourcesMap = tMap
	for i := 0; i < size; i++ {
		var _key198 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key198 = v
		}
		var _val199 float64
		if v, err := iprot.ReadDouble(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val199 = v
		}
		p.ResourcesMap[_key198] = _val199
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SupervisorInfo) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.ServerPort = &v
	}
	return nil
}

func (p *SupervisorInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SupervisorInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SupervisorInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "time_secs", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:time_secs: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.TimeSecs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.time_secs (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:time_secs: ", p), err)
	}
	return err
}

func (p *SupervisorInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "hostname", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostname: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Hostname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hostname (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostname: ", p), err)
	}
	return err
}

func (p *SupervisorInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignmentID() {
		if err := oprot.WriteFieldBegin(ctx, "assignment_id", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:assignment_id: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.AssignmentID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assignment_id (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:assignment_id: ", p), err)
		}
	}
	return err
}

func (p *SupervisorInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUsedPorts() {
		if err := oprot.WriteFieldBegin(ctx, "used_ports", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:used_ports: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.UsedPorts)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.UsedPorts {
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:used_ports: ", p), err)
		}
	}
	return err
}

func (p *SupervisorInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMeta() {
		if err := oprot.WriteFieldBegin(ctx, "meta", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:meta: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Meta)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Meta {
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:meta: ", p), err)
		}
	}
	return err
}

func (p *SupervisorInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSchedulerMeta() {
		if err := oprot.WriteFieldBegin(ctx, "scheduler_meta", thrift.MAP, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:scheduler_meta: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.SchedulerMeta)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.SchedulerMeta {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:scheduler_meta: ", p), err)
		}
	}
	return err
}

func (p *SupervisorInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUptimeSecs() {
		if err := oprot.WriteFieldBegin(ctx, "uptime_secs", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:uptime_secs: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.UptimeSecs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.uptime_secs (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:uptime_secs: ", p), err)
		}
	}
	return err
}

func (p *SupervisorInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin(ctx, "version", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:version: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Version)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.version (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:version: ", p), err)
		}
	}
	return err
}

func (p *SupervisorInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetResourcesMap() {
		if err := oprot.WriteFieldBegin(ctx, "resources_map", thrift.MAP, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:resources_map: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.DOUBLE, len(p.ResourcesMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ResourcesMap {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:resources_map: ", p), err)
		}
	}
	return err
}

func (p *SupervisorInfo) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetServerPort() {
		if err := oprot.WriteFieldBegin(ctx, "server_port", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:server_port: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.ServerPort)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.server_port (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:server_port: ", p), err)
		}
	}
	return err
}

func (p *SupervisorInfo) Equals(other *SupervisorInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.TimeSecs != other.TimeSecs {
		return false
	}
	if p.Hostname != other.Hostname {
		return false
	}
	if p.AssignmentID != other.AssignmentID {
		if p.AssignmentID == nil || other.AssignmentID == nil {
			return false
		}
		if (*p.AssignmentID) != (*other.AssignmentID) {
			return false
		}
	}
	if len(p.UsedPorts) != len(other.UsedPorts) {
		return false
	}
	for i, _tgt := range p.UsedPorts {
		_src200 := other.UsedPorts[i]
		if _tgt != _src200 {
			return false
		}
	}
	if len(p.Meta) != len(other.Meta) {
		return false
	}
	for i, _tgt := range p.Meta {
		_src201 := other.Meta[i]
		if _tgt != _src201 {
			return false
		}
	}
	if len(p.SchedulerMeta) != len(other.SchedulerMeta) {
		return false
	}
	for k, _tgt := range p.SchedulerMeta {
		_src202 := other.SchedulerMeta[k]
		if _tgt != _src202 {
			return false
		}
	}
	if p.UptimeSecs != other.UptimeSecs {
		if p.UptimeSecs == nil || other.UptimeSecs == nil {
			return false
		}
		if (*p.UptimeSecs) != (*other.UptimeSecs) {
			return false
		}
	}
	if p.Version != other.Version {
		if p.Version == nil || other.Version == nil {
			return false
		}
		if (*p.Version) != (*other.Version) {
			return false
		}
	}
	if len(p.ResourcesMap) != len(other.ResourcesMap) {
		return false
	}
	for k, _tgt := range p.ResourcesMap {
		_src203 := other.ResourcesMap[k]
		if _tgt != _src203 {
			return false
		}
	}
	if p.ServerPort != other.ServerPort {
		if p.ServerPort == nil || other.ServerPort == nil {
			return false
		}
		if (*p.ServerPort) != (*other.ServerPort) {
			return false
		}
	}
	return true
}

func (p *SupervisorInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SupervisorInfo(%+v)", *p)
}

func (p *SupervisorInfo) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SupervisorInfo",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SupervisorInfo)(nil)

func (p *SupervisorInfo) Validate() error {
	return nil
}

// Attributes:
//   - Node
//   - Port
type NodeInfo struct {
	Node string  `thrift:"node,1,required" db:"node" json:"node"`
	Port []int64 `thrift:"port,2,required" db:"port" json:"port"`
}

func NewNodeInfo() *NodeInfo {
	return &NodeInfo{}
}

func (p *NodeInfo) GetNode() string {
	return p.Node
}

func (p *NodeInfo) GetPort() []int64 {
	return p.Port
}

func (p *NodeInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNode bool = false
	var issetPort bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetNode = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetPort = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNode {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Node is not set"))
	}
	if !issetPort {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Port is not set"))
	}
	return nil
}

func (p *NodeInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Node = v
	}
	return nil
}

func (p *NodeInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]int64, 0, size)
	p.Port = tSet
	for i := 0; i < size; i++ {
		var _elem204 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem204 = v
		}
		p.Port = append(p.Port, _elem204)
	}
	if err := iprot.ReadSetEnd(ctx); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *NodeInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "NodeInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NodeInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Node)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.node (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err)
	}
	return err
}

func (p *NodeInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "port", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err)
	}
	if err := oprot.WriteSetBegin(ctx, thrift.I64, len(p.Port)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.Port); i++ {
		for j := i + 1; j < len(p.Port); j++ {
			if func(tgt, src int64) bool {
				if tgt != src {
					return false
				}
				return true
			}(p.Port[i], p.Port[j]) {
				return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("%T error writing set field: slice is not unique", p.Port))
			}
		}
	}
	for _, v := range p.Port {
		if err := oprot.WriteI64(ctx, int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(ctx); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err)
	}
	return err
}

func (p *NodeInfo) Equals(other *NodeInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Node != other.Node {
		return false
	}
	if len(p.Port) != len(other.Port) {
		return false
	}
	for i, _tgt := range p.Port {
		_src205 := other.Port[i]
		if _tgt != _src205 {
			return false
		}
	}
	return true
}

func (p *NodeInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NodeInfo(%+v)", *p)
}

func (p *NodeInfo) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NodeInfo",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NodeInfo)(nil)

func (p *NodeInfo) Validate() error {
	return nil
}

// Attributes:
//   - MemOnHeap
//   - MemOffHeap
//   - CPU
//   - SharedMemOnHeap
//   - SharedMemOffHeap
//   - Resources
//   - SharedResources
type WorkerResources struct {
	MemOnHeap        *float64           `thrift:"mem_on_heap,1" db:"mem_on_heap" json:"mem_on_heap,omitempty"`
	MemOffHeap       *float64           `thrift:"mem_off_heap,2" db:"mem_off_heap" json:"mem_off_heap,omitempty"`
	CPU              *float64           `thrift:"cpu,3" db:"cpu" json:"cpu,omitempty"`
	SharedMemOnHeap  *float64           `thrift:"shared_mem_on_heap,4" db:"shared_mem_on_heap" json:"shared_mem_on_heap,omitempty"`
	SharedMemOffHeap *float64           `thrift:"shared_mem_off_heap,5" db:"shared_mem_off_heap" json:"shared_mem_off_heap,omitempty"`
	Resources        map[string]float64 `thrift:"resources,6" db:"resources" json:"resources,omitempty"`
	SharedResources  map[string]float64 `thrift:"shared_resources,7" db:"shared_resources" json:"shared_resources,omitempty"`
}

func NewWorkerResources() *WorkerResources {
	return &WorkerResources{}
}

var WorkerResources_MemOnHeap_DEFAULT float64

func (p *WorkerResources) GetMemOnHeap() float64 {
	if !p.IsSetMemOnHeap() {
		return WorkerResources_MemOnHeap_DEFAULT
	}
	return *p.MemOnHeap
}

var WorkerResources_MemOffHeap_DEFAULT float64

func (p *WorkerResources) GetMemOffHeap() float64 {
	if !p.IsSetMemOffHeap() {
		return WorkerResources_MemOffHeap_DEFAULT
	}
	return *p.MemOffHeap
}

var WorkerResources_CPU_DEFAULT float64

func (p *WorkerResources) GetCPU() float64 {
	if !p.IsSetCPU() {
		return WorkerResources_CPU_DEFAULT
	}
	return *p.CPU
}

var WorkerResources_SharedMemOnHeap_DEFAULT float64

func (p *WorkerResources) GetSharedMemOnHeap() float64 {
	if !p.IsSetSharedMemOnHeap() {
		return WorkerResources_SharedMemOnHeap_DEFAULT
	}
	return *p.SharedMemOnHeap
}

var WorkerResources_SharedMemOffHeap_DEFAULT float64

func (p *WorkerResources) GetSharedMemOffHeap() float64 {
	if !p.IsSetSharedMemOffHeap() {
		return WorkerResources_SharedMemOffHeap_DEFAULT
	}
	return *p.SharedMemOffHeap
}

var WorkerResources_Resources_DEFAULT map[string]float64

func (p *WorkerResources) GetResources() map[string]float64 {
	return p.Resources
}

var WorkerResources_SharedResources_DEFAULT map[string]float64

func (p *WorkerResources) GetSharedResources() map[string]float64 {
	return p.SharedResources
}

func (p *WorkerResources) IsSetMemOnHeap() bool {
	return p.MemOnHeap != nil
}

func (p *WorkerResources) IsSetMemOffHeap() bool {
	return p.MemOffHeap != nil
}

func (p *WorkerResources) IsSetCPU() bool {
	return p.CPU != nil
}

func (p *WorkerResources) IsSetSharedMemOnHeap() bool {
	return p.SharedMemOnHeap != nil
}

func (p *WorkerResources) IsSetSharedMemOffHeap() bool {
	return p.SharedMemOffHeap != nil
}

func (p *WorkerResources) IsSetResources() bool {
	return p.Resources != nil
}

func (p *WorkerResources) IsSetSharedResources() bool {
	return p.SharedResources != nil
}

func (p *WorkerResources) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkerResources) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MemOnHeap = &v
	}
	return nil
}

func (p *WorkerResources) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MemOffHeap = &v
	}
	return nil
}

func (p *WorkerResources) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CPU = &v
	}
	return nil
}

func (p *WorkerResources) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SharedMemOnHeap = &v
	}
	return nil
}

func (p *WorkerResources) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SharedMemOffHeap = &v
	}
	return nil
}

func (p *WorkerResources) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]float64, size)
	p.Resources = tMap
	for i := 0; i < size; i++ {
		var _key206 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key206 = v
		}
		var _val207 float64
		if v, err := iprot.ReadDouble(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val207 = v
		}
		p.Resources[_key206] = _val207
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *WorkerResources) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]float64, size)
	p.SharedResources = tMap
	for i := 0; i < size; i++ {
		var _key208 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key208 = v
		}
		var _val209 float64
		if v, err := iprot.ReadDouble(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val209 = v
		}
		p.SharedResources[_key208] = _val209
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *WorkerResources) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "WorkerResources"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkerResources) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMemOnHeap() {
		if err := oprot.WriteFieldBegin(ctx, "mem_on_heap", thrift.DOUBLE, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mem_on_heap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.MemOnHeap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mem_on_heap (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mem_on_heap: ", p), err)
		}
	}
	return err
}

func (p *WorkerResources) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMemOffHeap() {
		if err := oprot.WriteFieldBegin(ctx, "mem_off_heap", thrift.DOUBLE, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mem_off_heap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.MemOffHeap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mem_off_heap (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mem_off_heap: ", p), err)
		}
	}
	return err
}

func (p *WorkerResources) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCPU() {
		if err := oprot.WriteFieldBegin(ctx, "cpu", thrift.DOUBLE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cpu: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.CPU)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cpu (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cpu: ", p), err)
		}
	}
	return err
}

func (p *WorkerResources) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSharedMemOnHeap() {
		if err := oprot.WriteFieldBegin(ctx, "shared_mem_on_heap", thrift.DOUBLE, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:shared_mem_on_heap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.SharedMemOnHeap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.shared_mem_on_heap (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:shared_mem_on_heap: ", p), err)
		}
	}
	return err
}

func (p *WorkerResources) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSharedMemOffHeap() {
		if err := oprot.WriteFieldBegin(ctx, "shared_mem_off_heap", thrift.DOUBLE, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:shared_mem_off_heap: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.SharedMemOffHeap)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.shared_mem_off_heap (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:shared_mem_off_heap: ", p), err)
		}
	}
	return err
}

func (p *WorkerResources) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetResources() {
		if err := oprot.WriteFieldBegin(ctx, "resources", thrift.MAP, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:resources: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.DOUBLE, len(p.Resources)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Resources {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:resources: ", p), err)
		}
	}
	return err
}

func (p *WorkerResources) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSharedResources() {
		if err := oprot.WriteFieldBegin(ctx, "shared_resources", thrift.MAP, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:shared_resources: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.DOUBLE, len(p.SharedResources)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.SharedResources {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:shared_resources: ", p), err)
		}
	}
	return err
}

func (p *WorkerResources) Equals(other *WorkerResources) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.MemOnHeap != other.MemOnHeap {
		if p.MemOnHeap == nil || other.MemOnHeap == nil {
			return false
		}
		if (*p.MemOnHeap) != (*other.MemOnHeap) {
			return false
		}
	}
	if p.MemOffHeap != other.MemOffHeap {
		if p.MemOffHeap == nil || other.MemOffHeap == nil {
			return false
		}
		if (*p.MemOffHeap) != (*other.MemOffHeap) {
			return false
		}
	}
	if p.CPU != other.CPU {
		if p.CPU == nil || other.CPU == nil {
			return false
		}
		if (*p.CPU) != (*other.CPU) {
			return false
		}
	}
	if p.SharedMemOnHeap != other.SharedMemOnHeap {
		if p.SharedMemOnHeap == nil || other.SharedMemOnHeap == nil {
			return false
		}
		if (*p.SharedMemOnHeap) != (*other.SharedMemOnHeap) {
			return false
		}
	}
	if p.SharedMemOffHeap != other.SharedMemOffHeap {
		if p.SharedMemOffHeap == nil || other.SharedMemOffHeap == nil {
			return false
		}
		if (*p.SharedMemOffHeap) != (*other.SharedMemOffHeap) {
			return false
		}
	}
	if len(p.Resources) != len(other.Resources) {
		return false
	}
	for k, _tgt := range p.Resources {
		_src210 := other.Resources[k]
		if _tgt != _src210 {
			return false
		}
	}
	if len(p.SharedResources) != len(other.SharedResources) {
		return false
	}
	for k, _tgt := range p.SharedResources {
		_src211 := other.SharedResources[k]
		if _tgt != _src211 {
			return false
		}
	}
	return true
}

func (p *WorkerResources) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerResources(%+v)", *p)
}

func (p *WorkerResources) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.WorkerResources",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*WorkerResources)(nil)

func (p *WorkerResources) Validate() error {
	return nil
}

// Attributes:
//   - MasterCodeDir
//   - NodeHost
//   - WorkerResources
//   - TotalSharedOffHeap
//   - Owner
type Assignment struct {
	MasterCodeDir string             `thrift:"master_code_dir,1,required" db:"master_code_dir" json:"master_code_dir"`
	NodeHost      *map[string]string `thrift:"node_host,2" db:"node_host" json:"node_host"`
	// unused fields # 3 to 4
	WorkerResources    *map[*NodeInfo]*WorkerResources `thrift:"worker_resources,5" db:"worker_resources" json:"worker_resources"`
	TotalSharedOffHeap *map[string]float64             `thrift:"total_shared_off_heap,6" db:"total_shared_off_heap" json:"total_shared_off_heap"`
	Owner              *string                         `thrift:"owner,7" db:"owner" json:"owner,omitempty"`
}

func NewAssignment() *Assignment {
	return &Assignment{}
}

func (p *Assignment) GetMasterCodeDir() string {
	return p.MasterCodeDir
}

var Assignment_NodeHost_DEFAULT map[string]string = map[string]string{}

func (p *Assignment) GetNodeHost() map[string]string {
	if !p.IsSetNodeHost() {
		return Assignment_NodeHost_DEFAULT
	}
	return *p.NodeHost
}

var Assignment_WorkerResources_DEFAULT map[*NodeInfo]*WorkerResources = map[*NodeInfo]*WorkerResources{}

func (p *Assignment) GetWorkerResources() map[*NodeInfo]*WorkerResources {
	if !p.IsSetWorkerResources() {
		return Assignment_WorkerResources_DEFAULT
	}
	return *p.WorkerResources
}

var Assignment_TotalSharedOffHeap_DEFAULT map[string]float64 = map[string]float64{}

func (p *Assignment) GetTotalSharedOffHeap() map[string]float64 {
	if !p.IsSetTotalSharedOffHeap() {
		return Assignment_TotalSharedOffHeap_DEFAULT
	}
	return *p.TotalSharedOffHeap
}

var Assignment_Owner_DEFAULT string

func (p *Assignment) GetOwner() string {
	if !p.IsSetOwner() {
		return Assignment_Owner_DEFAULT
	}
	return *p.Owner
}

func (p *Assignment) IsSetNodeHost() bool {
	return p.NodeHost != nil
}

func (p *Assignment) IsSetWorkerResources() bool {
	return p.WorkerResources != nil
}

func (p *Assignment) IsSetTotalSharedOffHeap() bool {
	return p.TotalSharedOffHeap != nil
}

func (p *Assignment) IsSetOwner() bool {
	return p.Owner != nil
}

func (p *Assignment) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMasterCodeDir bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMasterCodeDir = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMasterCodeDir {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MasterCodeDir is not set"))
	}
	return nil
}

func (p *Assignment) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MasterCodeDir = v
	}
	return nil
}

func (p *Assignment) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.NodeHost = &tMap
	for i := 0; i < size; i++ {
		var _key212 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key212 = v
		}
		var _val213 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val213 = v
		}
		(*p.NodeHost)[_key212] = _val213
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Assignment) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[*NodeInfo]*WorkerResources, size)
	p.WorkerResources = &tMap
	for i := 0; i < size; i++ {
		_key214 := &NodeInfo{}
		if err := _key214.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _key214), err)
		}
		_val215 := &WorkerResources{}
		if err := _val215.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val215), err)
		}
		(*p.WorkerResources)[_key214] = _val215
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Assignment) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]float64, size)
	p.TotalSharedOffHeap = &tMap
	for i := 0; i < size; i++ {
		var _key216 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key216 = v
		}
		var _val217 float64
		if v, err := iprot.ReadDouble(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val217 = v
		}
		(*p.TotalSharedOffHeap)[_key216] = _val217
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Assignment) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Owner = &v
	}
	return nil
}

func (p *Assignment) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Assignment"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Assignment) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "master_code_dir", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:master_code_dir: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MasterCodeDir)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.master_code_dir (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:master_code_dir: ", p), err)
	}
	return err
}

func (p *Assignment) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeHost() {
		if err := oprot.WriteFieldBegin(ctx, "node_host", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:node_host: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(*p.NodeHost)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range *p.NodeHost {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:node_host: ", p), err)
		}
	}
	return err
}

func (p *Assignment) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkerResources() {
		if err := oprot.WriteFieldBegin(ctx, "worker_resources", thrift.MAP, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:worker_resources: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRUCT, thrift.STRUCT, len(*p.WorkerResources)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range *p.WorkerResources {
			if err := k.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", k), err)
			}
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:worker_resources: ", p), err)
		}
	}
	return err
}

func (p *Assignment) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalSharedOffHeap() {
		if err := oprot.WriteFieldBegin(ctx, "total_shared_off_heap", thrift.MAP, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:total_shared_off_heap: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.DOUBLE, len(*p.TotalSharedOffHeap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range *p.TotalSharedOffHeap {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:total_shared_off_heap: ", p), err)
		}
	}
	return err
}

func (p *Assignment) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOwner() {
		if err := oprot.WriteFieldBegin(ctx, "owner", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:owner: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Owner)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.owner (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:owner: ", p), err)
		}
	}
	return err
}

func (p *Assignment) Equals(other *Assignment) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.MasterCodeDir != other.MasterCodeDir {
		return false
	}
	if p.NodeHost != other.NodeHost {
		if p.NodeHost == nil || other.NodeHost == nil {
			return false
		}
		if len((*p.NodeHost)) != len((*other.NodeHost)) {
			return false
		}
		for k, _tgt := range *p.NodeHost {
			_src218 := (*other.NodeHost)[k]
			if _tgt != _src218 {
				return false
			}
		}
	}
	if p.WorkerResources != other.WorkerResources {
		if p.WorkerResources == nil || other.WorkerResources == nil {
			return false
		}
		if len((*p.WorkerResources)) != len((*other.WorkerResources)) {
			return false
		}
		for k, _tgt := range *p.WorkerResources {
			_src219 := (*other.WorkerResources)[k]
			if !_tgt.Equals(_src219) {
				return false
			}
		}
	}
	if p.TotalSharedOffHeap != other.TotalSharedOffHeap {
		if p.TotalSharedOffHeap == nil || other.TotalSharedOffHeap == nil {
			return false
		}
		if len((*p.TotalSharedOffHeap)) != len((*other.TotalSharedOffHeap)) {
			return false
		}
		for k, _tgt := range *p.TotalSharedOffHeap {
			_src220 := (*other.TotalSharedOffHeap)[k]
			if _tgt != _src220 {
				return false
			}
		}
	}
	if p.Owner != other.Owner {
		if p.Owner == nil || other.Owner == nil {
			return false
		}
		if (*p.Owner) != (*other.Owner) {
			return false
		}
	}
	return true
}

func (p *Assignment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Assignment(%+v)", *p)
}

func (p *Assignment) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.Assignment",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*Assignment)(nil)

func (p *Assignment) Validate() error {
	return nil
}

// Attributes:
//   - KillOptions
//   - RebalanceOptions
type TopologyActionOptions struct {
	KillOptions      *KillOptions      `thrift:"kill_options,1" db:"kill_options" json:"kill_options,omitempty"`
	RebalanceOptions *RebalanceOptions `thrift:"rebalance_options,2" db:"rebalance_options" json:"rebalance_options,omitempty"`
}

func NewTopologyActionOptions() *TopologyActionOptions {
	return &TopologyActionOptions{}
}

var TopologyActionOptions_KillOptions_DEFAULT *KillOptions

func (p *TopologyActionOptions) GetKillOptions() *KillOptions {
	if !p.IsSetKillOptions() {
		return TopologyActionOptions_KillOptions_DEFAULT
	}
	return p.KillOptions
}

var TopologyActionOptions_RebalanceOptions_DEFAULT *RebalanceOptions

func (p *TopologyActionOptions) GetRebalanceOptions() *RebalanceOptions {
	if !p.IsSetRebalanceOptions() {
		return TopologyActionOptions_RebalanceOptions_DEFAULT
	}
	return p.RebalanceOptions
}

func (p *TopologyActionOptions) CountSetFieldsTopologyActionOptions() int {
	count := 0
	if p.IsSetKillOptions() {
		count++
	}
	if p.IsSetRebalanceOptions() {
		count++
	}
	return count

}

func (p *TopologyActionOptions) IsSetKillOptions() bool {
	return p.KillOptions != nil
}

func (p *TopologyActionOptions) IsSetRebalanceOptions() bool {
	return p.RebalanceOptions != nil
}

func (p *TopologyActionOptions) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TopologyActionOptions) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.KillOptions = &KillOptions{}
	if err := p.KillOptions.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.KillOptions), err)
	}
	return nil
}

func (p *TopologyActionOptions) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.RebalanceOptions = &RebalanceOptions{}
	if err := p.RebalanceOptions.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RebalanceOptions), err)
	}
	return nil
}

func (p *TopologyActionOptions) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsTopologyActionOptions(); c != 1 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("%T write union: exactly one field must be set (%d set)", p, c))
	}
	if err := oprot.WriteStructBegin(ctx, "TopologyActionOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TopologyActionOptions) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetKillOptions() {
		if err := oprot.WriteFieldBegin(ctx, "kill_options", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:kill_options: ", p), err)
		}
		if err := p.KillOptions.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.KillOptions), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:kill_options: ", p), err)
		}
	}
	return err
}

func (p *TopologyActionOptions) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRebalanceOptions() {
		if err := oprot.WriteFieldBegin(ctx, "rebalance_options", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rebalance_options: ", p), err)
		}
		if err := p.RebalanceOptions.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RebalanceOptions), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rebalance_options: ", p), err)
		}
	}
	return err
}

func (p *TopologyActionOptions) Equals(other *TopologyActionOptions) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.KillOptions.Equals(other.KillOptions) {
		return false
	}
	if !p.RebalanceOptions.Equals(other.RebalanceOptions) {
		return false
	}
	return true
}

func (p *TopologyActionOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopologyActionOptions(%+v)", *p)
}

func (p *TopologyActionOptions) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.TopologyActionOptions",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TopologyActionOptions)(nil)

func (p *TopologyActionOptions) Validate() error {
	return nil
}

// Attributes:
//   - Name
//   - Status
//   - NumWorkers
//   - ComponentExecutors
//   - LaunchTimeSecs
//   - Owner
//   - TopologyActionOptions
//   - PrevStatus
//   - ComponentDebug
//   - Principal
//   - TopologyVersion
type StormBase struct {
	Name                  string                   `thrift:"name,1,required" db:"name" json:"name"`
	Status                TopologyStatus           `thrift:"status,2,required" db:"status" json:"status"`
	NumWorkers            int32                    `thrift:"num_workers,3,required" db:"num_workers" json:"num_workers"`
	ComponentExecutors    map[string]int32         `thrift:"component_executors,4" db:"component_executors" json:"component_executors,omitempty"`
	LaunchTimeSecs        *int32                   `thrift:"launch_time_secs,5" db:"launch_time_secs" json:"launch_time_secs,omitempty"`
	Owner                 *string                  `thrift:"owner,6" db:"owner" json:"owner,omitempty"`
	TopologyActionOptions *TopologyActionOptions   `thrift:"topology_action_options,7" db:"topology_action_options" json:"topology_action_options,omitempty"`
	PrevStatus            *TopologyStatus          `thrift:"prev_status,8" db:"prev_status" json:"prev_status,omitempty"`
	ComponentDebug        map[string]*DebugOptions `thrift:"component_debug,9" db:"component_debug" json:"component_debug,omitempty"`
	Principal             *string                  `thrift:"principal,10" db:"principal" json:"principal,omitempty"`
	TopologyVersion       *string                  `thrift:"topology_version,11" db:"topology_version" json:"topology_version,omitempty"`
}

func NewStormBase() *StormBase {
	return &StormBase{}
}

func (p *StormBase) GetName() string {
	return p.Name
}

func (p *StormBase) GetStatus() TopologyStatus {
	return p.Status
}

func (p *StormBase) GetNumWorkers() int32 {
	return p.NumWorkers
}

var StormBase_ComponentExecutors_DEFAULT map[string]int32

func (p *StormBase) GetComponentExecutors() map[string]int32 {
	return p.ComponentExecutors
}

var StormBase_LaunchTimeSecs_DEFAULT int32

func (p *StormBase) GetLaunchTimeSecs() int32 {
	if !p.IsSetLaunchTimeSecs() {
		return StormBase_LaunchTimeSecs_DEFAULT
	}
	return *p.LaunchTimeSecs
}

var StormBase_Owner_DEFAULT string

func (p *StormBase) GetOwner() string {
	if !p.IsSetOwner() {
		return StormBase_Owner_DEFAULT
	}
	return *p.Owner
}

var StormBase_TopologyActionOptions_DEFAULT *TopologyActionOptions

func (p *StormBase) GetTopologyActionOptions() *TopologyActionOptions {
	if !p.IsSetTopologyActionOptions() {
		return StormBase_TopologyActionOptions_DEFAULT
	}
	return p.TopologyActionOptions
}

var StormBase_PrevStatus_DEFAULT TopologyStatus

func (p *StormBase) GetPrevStatus() TopologyStatus {
	if !p.IsSetPrevStatus() {
		return StormBase_PrevStatus_DEFAULT
	}
	return *p.PrevStatus
}

var StormBase_ComponentDebug_DEFAULT map[string]*DebugOptions

func (p *StormBase) GetComponentDebug() map[string]*DebugOptions {
	return p.ComponentDebug
}

var StormBase_Principal_DEFAULT string

func (p *StormBase) GetPrincipal() string {
	if !p.IsSetPrincipal() {
		return StormBase_Principal_DEFAULT
	}
	return *p.Principal
}

var StormBase_TopologyVersion_DEFAULT string

func (p *StormBase) GetTopologyVersion() string {
	if !p.IsSetTopologyVersion() {
		return StormBase_TopologyVersion_DEFAULT
	}
	return *p.TopologyVersion
}

func (p *StormBase) IsSetComponentExecutors() bool {
	return p.ComponentExecutors != nil
}

func (p *StormBase) IsSetLaunchTimeSecs() bool {
	return p.LaunchTimeSecs != nil
}

func (p *StormBase) IsSetOwner() bool {
	return p.Owner != nil
}

func (p *StormBase) IsSetTopologyActionOptions() bool {
	return p.TopologyActionOptions != nil
}

func (p *StormBase) IsSetPrevStatus() bool {
	return p.PrevStatus != nil
}

func (p *StormBase) IsSetComponentDebug() bool {
	return p.ComponentDebug != nil
}

func (p *StormBase) IsSetPrincipal() bool {
	return p.Principal != nil
}

func (p *StormBase) IsSetTopologyVersion() bool {
	return p.TopologyVersion != nil
}

func (p *StormBase) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false
	var issetStatus bool = false
	var issetNumWorkers bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetNumWorkers = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetNumWorkers {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumWorkers is not set"))
	}
	return nil
}

func (p *StormBase) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *StormBase) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := TopologyStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *StormBase) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NumWorkers = v
	}
	return nil
}

func (p *StormBase) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int32, size)
	p.ComponentExecutors = tMap
	for i := 0; i < size; i++ {
		var _key221 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key221 = v
		}
		var _val222 int32
		if v, err := iprot.ReadI32(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val222 = v
		}
		p.ComponentExecutors[_key221] = _val222
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *StormBase) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.LaunchTimeSecs = &v
	}
	return nil
}

func (p *StormBase) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Owner = &v
	}
	return nil
}

func (p *StormBase) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	p.TopologyActionOptions = &TopologyActionOptions{}
	if err := p.TopologyActionOptions.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TopologyActionOptions), err)
	}
	return nil
}

func (p *StormBase) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := TopologyStatus(v)
		p.PrevStatus = &temp
	}
	return nil
}

func (p *StormBase) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*DebugOptions, size)
	p.ComponentDebug = tMap
	for i := 0; i < size; i++ {
		var _key223 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key223 = v
		}
		_val224 := &DebugOptions{}
		if err := _val224.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val224), err)
		}
		p.ComponentDebug[_key223] = _val224
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *StormBase) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Principal = &v
	}
	return nil
}

func (p *StormBase) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.TopologyVersion = &v
	}
	return nil
}

func (p *StormBase) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "StormBase"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField11(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StormBase) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *StormBase) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err)
	}
	return err
}

func (p *StormBase) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "num_workers", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:num_workers: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.NumWorkers)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_workers (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:num_workers: ", p), err)
	}
	return err
}

func (p *StormBase) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetComponentExecutors() {
		if err := oprot.WriteFieldBegin(ctx, "component_executors", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:component_executors: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I32, len(p.ComponentExecutors)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ComponentExecutors {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI32(ctx, int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:component_executors: ", p), err)
		}
	}
	return err
}

func (p *StormBase) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetLaunchTimeSecs() {
		if err := oprot.WriteFieldBegin(ctx, "launch_time_secs", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:launch_time_secs: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.LaunchTimeSecs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.launch_time_secs (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:launch_time_secs: ", p), err)
		}
	}
	return err
}

func (p *StormBase) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOwner() {
		if err := oprot.WriteFieldBegin(ctx, "owner", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:owner: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Owner)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.owner (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:owner: ", p), err)
		}
	}
	return err
}

func (p *StormBase) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTopologyActionOptions() {
		if err := oprot.WriteFieldBegin(ctx, "topology_action_options", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:topology_action_options: ", p), err)
		}
		if err := p.TopologyActionOptions.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TopologyActionOptions), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:topology_action_options: ", p), err)
		}
	}
	return err
}

func (p *StormBase) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPrevStatus() {
		if err := oprot.WriteFieldBegin(ctx, "prev_status", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:prev_status: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.PrevStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.prev_status (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:prev_status: ", p), err)
		}
	}
	return err
}

func (p *StormBase) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetComponentDebug() {
		if err := oprot.WriteFieldBegin(ctx, "component_debug", thrift.MAP, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:component_debug: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.ComponentDebug)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ComponentDebug {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:component_debug: ", p), err)
		}
	}
	return err
}

func (p *StormBase) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPrincipal() {
		if err := oprot.WriteFieldBegin(ctx, "principal", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:principal: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Principal)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.principal (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:principal: ", p), err)
		}
	}
	return err
}

func (p *StormBase) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTopologyVersion() {
		if err := oprot.WriteFieldBegin(ctx, "topology_version", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:topology_version: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.TopologyVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.topology_version (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:topology_version: ", p), err)
		}
	}
	return err
}

func (p *StormBase) Equals(other *StormBase) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Name != other.Name {
		return false
	}
	if p.Status != other.Status {
		return false
	}
	if p.NumWorkers != other.NumWorkers {
		return false
	}
	if len(p.ComponentExecutors) != len(other.ComponentExecutors) {
		return false
	}
	for k, _tgt := range p.ComponentExecutors {
		_src225 := other.ComponentExecutors[k]
		if _tgt != _src225 {
			return false
		}
	}
	if p.LaunchTimeSecs != other.LaunchTimeSecs {
		if p.LaunchTimeSecs == nil || other.LaunchTimeSecs == nil {
			return false
		}
		if (*p.LaunchTimeSecs) != (*other.LaunchTimeSecs) {
			return false
		}
	}
	if p.Owner != other.Owner {
		if p.Owner == nil || other.Owner == nil {
			return false
		}
		if (*p.Owner) != (*other.Owner) {
			return false
		}
	}
	if !p.TopologyActionOptions.Equals(other.TopologyActionOptions) {
		return false
	}
	if p.PrevStatus != other.PrevStatus {
		if p.PrevStatus == nil || other.PrevStatus == nil {
			return false
		}
		if (*p.PrevStatus) != (*other.PrevStatus) {
			return false
		}
	}
	if len(p.ComponentDebug) != len(other.ComponentDebug) {
		return false
	}
	for k, _tgt := range p.ComponentDebug {
		_src226 := other.ComponentDebug[k]
		if !_tgt.Equals(_src226) {
			return false
		}
	}
	if p.Principal != other.Principal {
		if p.Principal == nil || other.Principal == nil {
			return false
		}
		if (*p.Principal) != (*other.Principal) {
			return false
		}
	}
	if p.TopologyVersion != other.TopologyVersion {
		if p.TopologyVersion == nil || other.TopologyVersion == nil {
			return false
		}
		if (*p.TopologyVersion) != (*other.TopologyVersion) {
			return false
		}
	}
	return true
}

func (p *StormBase) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StormBase(%+v)", *p)
}

func (p *StormBase) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.StormBase",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*StormBase)(nil)

func (p *StormBase) Validate() error {
	return nil
}

// Attributes:
//   - StormID
//   - ExecutorStats
//   - TimeSecs
//   - UptimeSecs
type ClusterWorkerHeartbeat struct {
	StormID       string                           `thrift:"storm_id,1,required" db:"storm_id" json:"storm_id"`
	ExecutorStats map[*ExecutorInfo]*ExecutorStats `thrift:"executor_stats,2,required" db:"executor_stats" json:"executor_stats"`
	TimeSecs      int32                            `thrift:"time_secs,3,required" db:"time_secs" json:"time_secs"`
	UptimeSecs    int32                            `thrift:"uptime_secs,4,required" db:"uptime_secs" json:"uptime_secs"`
}

func NewClusterWorkerHeartbeat() *ClusterWorkerHeartbeat {
	return &ClusterWorkerHeartbeat{}
}

func (p *ClusterWorkerHeartbeat) GetStormID() string {
	return p.StormID
}

func (p *ClusterWorkerHeartbeat) GetExecutorStats() map[*ExecutorInfo]*ExecutorStats {
	return p.ExecutorStats
}

func (p *ClusterWorkerHeartbeat) GetTimeSecs() int32 {
	return p.TimeSecs
}

func (p *ClusterWorkerHeartbeat) GetUptimeSecs() int32 {
	return p.UptimeSecs
}

func (p *ClusterWorkerHeartbeat) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStormID bool = false
	var issetExecutorStats bool = false
	var issetTimeSecs bool = false
	var issetUptimeSecs bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetStormID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetExecutorStats = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetTimeSecs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetUptimeSecs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStormID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StormID is not set"))
	}
	if !issetExecutorStats {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExecutorStats is not set"))
	}
	if !issetTimeSecs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TimeSecs is not set"))
	}
	if !issetUptimeSecs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UptimeSecs is not set"))
	}
	return nil
}

func (p *ClusterWorkerHeartbeat) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StormID = v
	}
	return nil
}

func (p *ClusterWorkerHeartbeat) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[*ExecutorInfo]*ExecutorStats, size)
	p.ExecutorStats = tMap
	for i := 0; i < size; i++ {
		_key227 := &ExecutorInfo{}
		if err := _key227.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _key227), err)
		}
		_val228 := &ExecutorStats{}
		if err := _val228.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val228), err)
		}
		p.ExecutorStats[_key227] = _val228
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ClusterWorkerHeartbeat) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TimeSecs = v
	}
	return nil
}

func (p *ClusterWorkerHeartbeat) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UptimeSecs = v
	}
	return nil
}

func (p *ClusterWorkerHeartbeat) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ClusterWorkerHeartbeat"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ClusterWorkerHeartbeat) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "storm_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:storm_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.StormID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.storm_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:storm_id: ", p), err)
	}
	return err
}

func (p *ClusterWorkerHeartbeat) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "executor_stats", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:executor_stats: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRUCT, thrift.STRUCT, len(p.ExecutorStats)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ExecutorStats {
		if err := k.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", k), err)
		}
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:executor_stats: ", p), err)
	}
	return err
}

func (p *ClusterWorkerHeartbeat) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "time_secs", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:time_secs: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.TimeSecs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.time_secs (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:time_secs: ", p), err)
	}
	return err
}

func (p *ClusterWorkerHeartbeat) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "uptime_secs", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:uptime_secs: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UptimeSecs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uptime_secs (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:uptime_secs: ", p), err)
	}
	return err
}

func (p *ClusterWorkerHeartbeat) Equals(other *ClusterWorkerHeartbeat) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.StormID != other.StormID {
		return false
	}
	if len(p.ExecutorStats) != len(other.ExecutorStats) {
		return false
	}
	for k, _tgt := range p.ExecutorStats {
		_src229 := other.ExecutorStats[k]
		if !_tgt.Equals(_src229) {
			return false
		}
	}
	if p.TimeSecs != other.TimeSecs {
		return false
	}
	if p.UptimeSecs != other.UptimeSecs {
		return false
	}
	return true
}

func (p *ClusterWorkerHeartbeat) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClusterWorkerHeartbeat(%+v)", *p)
}

func (p *ClusterWorkerHeartbeat) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.ClusterWorkerHeartbeat",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ClusterWorkerHeartbeat)(nil)

func (p *ClusterWorkerHeartbeat) Validate() error {
	return nil
}

// Attributes:
//   - Name
//   - Bits
type ThriftSerializedObject struct {
	Name string `thrift:"name,1,required" db:"name" json:"name"`
	Bits []byte `thrift:"bits,2,required" db:"bits" json:"bits"`
}

func NewThriftSerializedObject() *ThriftSerializedObject {
	return &ThriftSerializedObject{}
}

func (p *ThriftSerializedObject) GetName() string {
	return p.Name
}

func (p *ThriftSerializedObject) GetBits() []byte {
	return p.Bits
}

func (p *ThriftSerializedObject) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false
	var issetBits bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetBits = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetBits {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Bits is not set"))
	}
	return nil
}

func (p *ThriftSerializedObject) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ThriftSerializedObject) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Bits = v
	}
	return nil
}

func (p *ThriftSerializedObject) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ThriftSerializedObject"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ThriftSerializedObject) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *ThriftSerializedObject) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "bits", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bits: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Bits); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bits (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bits: ", p), err)
	}
	return err
}

func (p *ThriftSerializedObject) Equals(other *ThriftSerializedObject) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Name != other.Name {
		return false
	}
	if bytes.Compare(p.Bits, other.Bits) != 0 {
		return false
	}
	return true
}

func (p *ThriftSerializedObject) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftSerializedObject(%+v)", *p)
}

func (p *ThriftSerializedObject) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.ThriftSerializedObject",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ThriftSerializedObject)(nil)

func (p *ThriftSerializedObject) Validate() error {
	return nil
}

// Attributes:
//   - SerializedParts
type LocalStateData struct {
	SerializedParts map[string]*ThriftSerializedObject `thrift:"serialized_parts,1,required" db:"serialized_parts" json:"serialized_parts"`
}

func NewLocalStateData() *LocalStateData {
	return &LocalStateData{}
}

func (p *LocalStateData) GetSerializedParts() map[string]*ThriftSerializedObject {
	return p.SerializedParts
}

func (p *LocalStateData) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSerializedParts bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSerializedParts = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSerializedParts {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SerializedParts is not set"))
	}
	return nil
}

func (p *LocalStateData) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*ThriftSerializedObject, size)
	p.SerializedParts = tMap
	for i := 0; i < size; i++ {
		var _key230 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key230 = v
		}
		_val231 := &ThriftSerializedObject{}
		if err := _val231.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val231), err)
		}
		p.SerializedParts[_key230] = _val231
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *LocalStateData) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LocalStateData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LocalStateData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "serialized_parts", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serialized_parts: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.SerializedParts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.SerializedParts {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serialized_parts: ", p), err)
	}
	return err
}

func (p *LocalStateData) Equals(other *LocalStateData) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.SerializedParts) != len(other.SerializedParts) {
		return false
	}
	for k, _tgt := range p.SerializedParts {
		_src232 := other.SerializedParts[k]
		if !_tgt.Equals(_src232) {
			return false
		}
	}
	return true
}

func (p *LocalStateData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LocalStateData(%+v)", *p)
}

func (p *LocalStateData) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.LocalStateData",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*LocalStateData)(nil)

func (p *LocalStateData) Validate() error {
	return nil
}

// Attributes:
//   - TopologyID
//   - Executors
//   - Resources
//   - TotalNodeShared
//   - Owner
type LocalAssignment struct {
	TopologyID      string           `thrift:"topology_id,1,required" db:"topology_id" json:"topology_id"`
	Executors       []*ExecutorInfo  `thrift:"executors,2,required" db:"executors" json:"executors"`
	Resources       *WorkerResources `thrift:"resources,3" db:"resources" json:"resources,omitempty"`
	TotalNodeShared *float64         `thrift:"total_node_shared,4" db:"total_node_shared" json:"total_node_shared,omitempty"`
	Owner           *string          `thrift:"owner,5" db:"owner" json:"owner,omitempty"`
}

func NewLocalAssignment() *LocalAssignment {
	return &LocalAssignment{}
}

func (p *LocalAssignment) GetTopologyID() string {
	return p.TopologyID
}

func (p *LocalAssignment) GetExecutors() []*ExecutorInfo {
	return p.Executors
}

var LocalAssignment_Resources_DEFAULT *WorkerResources

func (p *LocalAssignment) GetResources() *WorkerResources {
	if !p.IsSetResources() {
		return LocalAssignment_Resources_DEFAULT
	}
	return p.Resources
}

var LocalAssignment_TotalNodeShared_DEFAULT float64

func (p *LocalAssignment) GetTotalNodeShared() float64 {
	if !p.IsSetTotalNodeShared() {
		return LocalAssignment_TotalNodeShared_DEFAULT
	}
	return *p.TotalNodeShared
}

var LocalAssignment_Owner_DEFAULT string

func (p *LocalAssignment) GetOwner() string {
	if !p.IsSetOwner() {
		return LocalAssignment_Owner_DEFAULT
	}
	return *p.Owner
}

func (p *LocalAssignment) IsSetResources() bool {
	return p.Resources != nil
}

func (p *LocalAssignment) IsSetTotalNodeShared() bool {
	return p.TotalNodeShared != nil
}

func (p *LocalAssignment) IsSetOwner() bool {
	return p.Owner != nil
}

func (p *LocalAssignment) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTopologyID bool = false
	var issetExecutors bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetTopologyID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetExecutors = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTopologyID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TopologyID is not set"))
	}
	if !issetExecutors {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Executors is not set"))
	}
	return nil
}

func (p *LocalAssignment) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TopologyID = v
	}
	return nil
}

func (p *LocalAssignment) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ExecutorInfo, 0, size)
	p.Executors = tSlice
	for i := 0; i < size; i++ {
		_elem233 := &ExecutorInfo{}
		if err := _elem233.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem233), err)
		}
		p.Executors = append(p.Executors, _elem233)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LocalAssignment) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.Resources = &WorkerResources{}
	if err := p.Resources.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Resources), err)
	}
	return nil
}

func (p *LocalAssignment) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TotalNodeShared = &v
	}
	return nil
}

func (p *LocalAssignment) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Owner = &v
	}
	return nil
}

func (p *LocalAssignment) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LocalAssignment"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LocalAssignment) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "topology_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topology_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.TopologyID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topology_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topology_id: ", p), err)
	}
	return err
}

func (p *LocalAssignment) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "executors", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:executors: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Executors)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Executors {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:executors: ", p), err)
	}
	return err
}

func (p *LocalAssignment) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetResources() {
		if err := oprot.WriteFieldBegin(ctx, "resources", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resources: ", p), err)
		}
		if err := p.Resources.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Resources), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resources: ", p), err)
		}
	}
	return err
}

func (p *LocalAssignment) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalNodeShared() {
		if err := oprot.WriteFieldBegin(ctx, "total_node_shared", thrift.DOUBLE, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:total_node_shared: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.TotalNodeShared)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.total_node_shared (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:total_node_shared: ", p), err)
		}
	}
	return err
}

func (p *LocalAssignment) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOwner() {
		if err := oprot.WriteFieldBegin(ctx, "owner", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:owner: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Owner)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.owner (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:owner: ", p), err)
		}
	}
	return err
}

func (p *LocalAssignment) Equals(other *LocalAssignment) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.TopologyID != other.TopologyID {
		return false
	}
	if len(p.Executors) != len(other.Executors) {
		return false
	}
	for i, _tgt := range p.Executors {
		_src234 := other.Executors[i]
		if !_tgt.Equals(_src234) {
			return false
		}
	}
	if !p.Resources.Equals(other.Resources) {
		return false
	}
	if p.TotalNodeShared != other.TotalNodeShared {
		if p.TotalNodeShared == nil || other.TotalNodeShared == nil {
			return false
		}
		if (*p.TotalNodeShared) != (*other.TotalNodeShared) {
			return false
		}
	}
	if p.Owner != other.Owner {
		if p.Owner == nil || other.Owner == nil {
			return false
		}
		if (*p.Owner) != (*other.Owner) {
			return false
		}
	}
	return true
}

func (p *LocalAssignment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LocalAssignment(%+v)", *p)
}

func (p *LocalAssignment) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.LocalAssignment",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*LocalAssignment)(nil)

func (p *LocalAssignment) Validate() error {
	return nil
}

// Attributes:
//   - SupervisorID
type LSSupervisorId struct {
	SupervisorID string `thrift:"supervisor_id,1,required" db:"supervisor_id" json:"supervisor_id"`
}

func NewLSSupervisorId() *LSSupervisorId {
	return &LSSupervisorId{}
}

func (p *LSSupervisorId) GetSupervisorID() string {
	return p.SupervisorID
}

func (p *LSSupervisorId) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSupervisorID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSupervisorID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSupervisorID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SupervisorID is not set"))
	}
	return nil
}

func (p *LSSupervisorId) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SupervisorID = v
	}
	return nil
}

func (p *LSSupervisorId) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LSSupervisorId"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LSSupervisorId) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "supervisor_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:supervisor_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SupervisorID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.supervisor_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:supervisor_id: ", p), err)
	}
	return err
}

func (p *LSSupervisorId) Equals(other *LSSupervisorId) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SupervisorID != other.SupervisorID {
		return false
	}
	return true
}

func (p *LSSupervisorId) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LSSupervisorId(%+v)", *p)
}

func (p *LSSupervisorId) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.LSSupervisorId",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*LSSupervisorId)(nil)

func (p *LSSupervisorId) Validate() error {
	return nil
}

// Attributes:
//   - ApprovedWorkers
type LSApprovedWorkers struct {
	ApprovedWorkers map[string]int32 `thrift:"approved_workers,1,required" db:"approved_workers" json:"approved_workers"`
}

func NewLSApprovedWorkers() *LSApprovedWorkers {
	return &LSApprovedWorkers{}
}

func (p *LSApprovedWorkers) GetApprovedWorkers() map[string]int32 {
	return p.ApprovedWorkers
}

func (p *LSApprovedWorkers) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetApprovedWorkers bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetApprovedWorkers = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetApprovedWorkers {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ApprovedWorkers is not set"))
	}
	return nil
}

func (p *LSApprovedWorkers) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int32, size)
	p.ApprovedWorkers = tMap
	for i := 0; i < size; i++ {
		var _key235 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key235 = v
		}
		var _val236 int32
		if v, err := iprot.ReadI32(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val236 = v
		}
		p.ApprovedWorkers[_key235] = _val236
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *LSApprovedWorkers) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LSApprovedWorkers"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LSApprovedWorkers) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "approved_workers", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:approved_workers: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I32, len(p.ApprovedWorkers)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ApprovedWorkers {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:approved_workers: ", p), err)
	}
	return err
}

func (p *LSApprovedWorkers) Equals(other *LSApprovedWorkers) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.ApprovedWorkers) != len(other.ApprovedWorkers) {
		return false
	}
	for k, _tgt := range p.ApprovedWorkers {
		_src237 := other.ApprovedWorkers[k]
		if _tgt != _src237 {
			return false
		}
	}
	return true
}

func (p *LSApprovedWorkers) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LSApprovedWorkers(%+v)", *p)
}

func (p *LSApprovedWorkers) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.LSApprovedWorkers",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*LSApprovedWorkers)(nil)

func (p *LSApprovedWorkers) Validate() error {
	return nil
}

// Attributes:
//   - Assignments
type LSSupervisorAssignments struct {
	Assignments map[int32]*LocalAssignment `thrift:"assignments,1,required" db:"assignments" json:"assignments"`
}

func NewLSSupervisorAssignments() *LSSupervisorAssignments {
	return &LSSupervisorAssignments{}
}

func (p *LSSupervisorAssignments) GetAssignments() map[int32]*LocalAssignment {
	return p.Assignments
}

func (p *LSSupervisorAssignments) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetAssignments bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetAssignments = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetAssignments {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Assignments is not set"))
	}
	return nil
}

func (p *LSSupervisorAssignments) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]*LocalAssignment, size)
	p.Assignments = tMap
	for i := 0; i < size; i++ {
		var _key238 int32
		if v, err := iprot.ReadI32(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key238 = v
		}
		_val239 := &LocalAssignment{}
		if err := _val239.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val239), err)
		}
		p.Assignments[_key238] = _val239
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *LSSupervisorAssignments) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LSSupervisorAssignments"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LSSupervisorAssignments) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "assignments", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assignments: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRUCT, len(p.Assignments)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Assignments {
		if err := oprot.WriteI32(ctx, int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assignments: ", p), err)
	}
	return err
}

func (p *LSSupervisorAssignments) Equals(other *LSSupervisorAssignments) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Assignments) != len(other.Assignments) {
		return false
	}
	for k, _tgt := range p.Assignments {
		_src240 := other.Assignments[k]
		if !_tgt.Equals(_src240) {
			return false
		}
	}
	return true
}

func (p *LSSupervisorAssignments) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LSSupervisorAssignments(%+v)", *p)
}

func (p *LSSupervisorAssignments) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.LSSupervisorAssignments",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*LSSupervisorAssignments)(nil)

func (p *LSSupervisorAssignments) Validate() error {
	return nil
}

// Attributes:
//   - TimeSecs
//   - TopologyID
//   - Executors
//   - Port
type LSWorkerHeartbeat struct {
	TimeSecs   int32           `thrift:"time_secs,1,required" db:"time_secs" json:"time_secs"`
	TopologyID string          `thrift:"topology_id,2,required" db:"topology_id" json:"topology_id"`
	Executors  []*ExecutorInfo `thrift:"executors,3,required" db:"executors" json:"executors"`
	Port       int32           `thrift:"port,4,required" db:"port" json:"port"`
}

func NewLSWorkerHeartbeat() *LSWorkerHeartbeat {
	return &LSWorkerHeartbeat{}
}

func (p *LSWorkerHeartbeat) GetTimeSecs() int32 {
	return p.TimeSecs
}

func (p *LSWorkerHeartbeat) GetTopologyID() string {
	return p.TopologyID
}

func (p *LSWorkerHeartbeat) GetExecutors() []*ExecutorInfo {
	return p.Executors
}

func (p *LSWorkerHeartbeat) GetPort() int32 {
	return p.Port
}

func (p *LSWorkerHeartbeat) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTimeSecs bool = false
	var issetTopologyID bool = false
	var issetExecutors bool = false
	var issetPort bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetTimeSecs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetTopologyID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetExecutors = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetPort = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTimeSecs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TimeSecs is not set"))
	}
	if !issetTopologyID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TopologyID is not set"))
	}
	if !issetExecutors {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Executors is not set"))
	}
	if !issetPort {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Port is not set"))
	}
	return nil
}

func (p *LSWorkerHeartbeat) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TimeSecs = v
	}
	return nil
}

func (p *LSWorkerHeartbeat) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TopologyID = v
	}
	return nil
}

func (p *LSWorkerHeartbeat) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ExecutorInfo, 0, size)
	p.Executors = tSlice
	for i := 0; i < size; i++ {
		_elem241 := &ExecutorInfo{}
		if err := _elem241.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem241), err)
		}
		p.Executors = append(p.Executors, _elem241)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LSWorkerHeartbeat) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *LSWorkerHeartbeat) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LSWorkerHeartbeat"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LSWorkerHeartbeat) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "time_secs", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:time_secs: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.TimeSecs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.time_secs (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:time_secs: ", p), err)
	}
	return err
}

func (p *LSWorkerHeartbeat) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "topology_id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:topology_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.TopologyID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topology_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:topology_id: ", p), err)
	}
	return err
}

func (p *LSWorkerHeartbeat) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "executors", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:executors: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Executors)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Executors {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:executors: ", p), err)
	}
	return err
}

func (p *LSWorkerHeartbeat) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "port", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:port: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:port: ", p), err)
	}
	return err
}

func (p *LSWorkerHeartbeat) Equals(other *LSWorkerHeartbeat) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.TimeSecs != other.TimeSecs {
		return false
	}
	if p.TopologyID != other.TopologyID {
		return false
	}
	if len(p.Executors) != len(other.Executors) {
		return false
	}
	for i, _tgt := range p.Executors {
		_src242 := other.Executors[i]
		if !_tgt.Equals(_src242) {
			return false
		}
	}
	if p.Port != other.Port {
		return false
	}
	return true
}

func (p *LSWorkerHeartbeat) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LSWorkerHeartbeat(%+v)", *p)
}

func (p *LSWorkerHeartbeat) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.LSWorkerHeartbeat",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*LSWorkerHeartbeat)(nil)

func (p *LSWorkerHeartbeat) Validate() error {
	return nil
}

// Attributes:
//   - TopologyID
//   - TimeStamp
//   - Users
//   - Groups
type LSTopoHistory struct {
	TopologyID string   `thrift:"topology_id,1,required" db:"topology_id" json:"topology_id"`
	TimeStamp  int64    `thrift:"time_stamp,2,required" db:"time_stamp" json:"time_stamp"`
	Users      []string `thrift:"users,3,required" db:"users" json:"users"`
	Groups     []string `thrift:"groups,4,required" db:"groups" json:"groups"`
}

func NewLSTopoHistory() *LSTopoHistory {
	return &LSTopoHistory{}
}

func (p *LSTopoHistory) GetTopologyID() string {
	return p.TopologyID
}

func (p *LSTopoHistory) GetTimeStamp() int64 {
	return p.TimeStamp
}

func (p *LSTopoHistory) GetUsers() []string {
	return p.Users
}

func (p *LSTopoHistory) GetGroups() []string {
	return p.Groups
}

func (p *LSTopoHistory) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTopologyID bool = false
	var issetTimeStamp bool = false
	var issetUsers bool = false
	var issetGroups bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetTopologyID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetTimeStamp = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetUsers = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetGroups = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTopologyID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TopologyID is not set"))
	}
	if !issetTimeStamp {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TimeStamp is not set"))
	}
	if !issetUsers {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Users is not set"))
	}
	if !issetGroups {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Groups is not set"))
	}
	return nil
}

func (p *LSTopoHistory) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TopologyID = v
	}
	return nil
}

func (p *LSTopoHistory) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TimeStamp = v
	}
	return nil
}

func (p *LSTopoHistory) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Users = tSlice
	for i := 0; i < size; i++ {
		var _elem243 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem243 = v
		}
		p.Users = append(p.Users, _elem243)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LSTopoHistory) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Groups = tSlice
	for i := 0; i < size; i++ {
		var _elem244 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem244 = v
		}
		p.Groups = append(p.Groups, _elem244)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LSTopoHistory) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LSTopoHistory"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LSTopoHistory) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "topology_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topology_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.TopologyID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topology_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topology_id: ", p), err)
	}
	return err
}

func (p *LSTopoHistory) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "time_stamp", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:time_stamp: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.TimeStamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.time_stamp (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:time_stamp: ", p), err)
	}
	return err
}

func (p *LSTopoHistory) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "users", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:users: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Users)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Users {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:users: ", p), err)
	}
	return err
}

func (p *LSTopoHistory) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "groups", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:groups: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Groups)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Groups {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:groups: ", p), err)
	}
	return err
}

func (p *LSTopoHistory) Equals(other *LSTopoHistory) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.TopologyID != other.TopologyID {
		return false
	}
	if p.TimeStamp != other.TimeStamp {
		return false
	}
	if len(p.Users) != len(other.Users) {
		return false
	}
	for i, _tgt := range p.Users {
		_src245 := other.Users[i]
		if _tgt != _src245 {
			return false
		}
	}
	if len(p.Groups) != len(other.Groups) {
		return false
	}
	for i, _tgt := range p.Groups {
		_src246 := other.Groups[i]
		if _tgt != _src246 {
			return false
		}
	}
	return true
}

func (p *LSTopoHistory) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LSTopoHistory(%+v)", *p)
}

func (p *LSTopoHistory) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.LSTopoHistory",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*LSTopoHistory)(nil)

func (p *LSTopoHistory) Validate() error {
	return nil
}

// Attributes:
//   - TopoHistory
type LSTopoHistoryList struct {
	TopoHistory []*LSTopoHistory `thrift:"topo_history,1,required" db:"topo_history" json:"topo_history"`
}

func NewLSTopoHistoryList() *LSTopoHistoryList {
	return &LSTopoHistoryList{}
}

func (p *LSTopoHistoryList) GetTopoHistory() []*LSTopoHistory {
	return p.TopoHistory
}

func (p *LSTopoHistoryList) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTopoHistory bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetTopoHistory = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTopoHistory {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TopoHistory is not set"))
	}
	return nil
}

func (p *LSTopoHistoryList) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*LSTopoHistory, 0, size)
	p.TopoHistory = tSlice
	for i := 0; i < size; i++ {
		_elem247 := &LSTopoHistory{}
		if err := _elem247.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem247), err)
		}
		p.TopoHistory = append(p.TopoHistory, _elem247)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LSTopoHistoryList) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LSTopoHistoryList"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LSTopoHistoryList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "topo_history", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topo_history: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.TopoHistory)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TopoHistory {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topo_history: ", p), err)
	}
	return err
}

func (p *LSTopoHistoryList) Equals(other *LSTopoHistoryList) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.TopoHistory) != len(other.TopoHistory) {
		return false
	}
	for i, _tgt := range p.TopoHistory {
		_src248 := other.TopoHistory[i]
		if !_tgt.Equals(_src248) {
			return false
		}
	}
	return true
}

func (p *LSTopoHistoryList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LSTopoHistoryList(%+v)", *p)
}

func (p *LSTopoHistoryList) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.LSTopoHistoryList",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*LSTopoHistoryList)(nil)

func (p *LSTopoHistoryList) Validate() error {
	return nil
}

// Attributes:
//   - NodeInfo
//   - Action
//   - TimeStamp
type ProfileRequest struct {
	NodeInfo  *NodeInfo     `thrift:"nodeInfo,1,required" db:"nodeInfo" json:"nodeInfo"`
	Action    ProfileAction `thrift:"action,2,required" db:"action" json:"action"`
	TimeStamp *int64        `thrift:"time_stamp,3" db:"time_stamp" json:"time_stamp,omitempty"`
}

func NewProfileRequest() *ProfileRequest {
	return &ProfileRequest{}
}

var ProfileRequest_NodeInfo_DEFAULT *NodeInfo

func (p *ProfileRequest) GetNodeInfo() *NodeInfo {
	if !p.IsSetNodeInfo() {
		return ProfileRequest_NodeInfo_DEFAULT
	}
	return p.NodeInfo
}

func (p *ProfileRequest) GetAction() ProfileAction {
	return p.Action
}

var ProfileRequest_TimeStamp_DEFAULT int64

func (p *ProfileRequest) GetTimeStamp() int64 {
	if !p.IsSetTimeStamp() {
		return ProfileRequest_TimeStamp_DEFAULT
	}
	return *p.TimeStamp
}

func (p *ProfileRequest) IsSetNodeInfo() bool {
	return p.NodeInfo != nil
}

func (p *ProfileRequest) IsSetTimeStamp() bool {
	return p.TimeStamp != nil
}

func (p *ProfileRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNodeInfo bool = false
	var issetAction bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetNodeInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetAction = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNodeInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NodeInfo is not set"))
	}
	if !issetAction {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Action is not set"))
	}
	return nil
}

func (p *ProfileRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.NodeInfo = &NodeInfo{}
	if err := p.NodeInfo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NodeInfo), err)
	}
	return nil
}

func (p *ProfileRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := ProfileAction(v)
		p.Action = temp
	}
	return nil
}

func (p *ProfileRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TimeStamp = &v
	}
	return nil
}

func (p *ProfileRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ProfileRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProfileRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "nodeInfo", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nodeInfo: ", p), err)
	}
	if err := p.NodeInfo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NodeInfo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nodeInfo: ", p), err)
	}
	return err
}

func (p *ProfileRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "action", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:action: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Action)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.action (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:action: ", p), err)
	}
	return err
}

func (p *ProfileRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeStamp() {
		if err := oprot.WriteFieldBegin(ctx, "time_stamp", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:time_stamp: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.TimeStamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.time_stamp (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:time_stamp: ", p), err)
		}
	}
	return err
}

func (p *ProfileRequest) Equals(other *ProfileRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.NodeInfo.Equals(other.NodeInfo) {
		return false
	}
	if p.Action != other.Action {
		return false
	}
	if p.TimeStamp != other.TimeStamp {
		if p.TimeStamp == nil || other.TimeStamp == nil {
			return false
		}
		if (*p.TimeStamp) != (*other.TimeStamp) {
			return false
		}
	}
	return true
}

func (p *ProfileRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileRequest(%+v)", *p)
}

func (p *ProfileRequest) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.ProfileRequest",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ProfileRequest)(nil)

func (p *ProfileRequest) Validate() error {
	return nil
}

// Attributes:
//   - NumErrChoice
type GetInfoOptions struct {
	NumErrChoice *NumErrorsChoice `thrift:"num_err_choice,1" db:"num_err_choice" json:"num_err_choice,omitempty"`
}

func NewGetInfoOptions() *GetInfoOptions {
	return &GetInfoOptions{}
}

var GetInfoOptions_NumErrChoice_DEFAULT NumErrorsChoice

func (p *GetInfoOptions) GetNumErrChoice() NumErrorsChoice {
	if !p.IsSetNumErrChoice() {
		return GetInfoOptions_NumErrChoice_DEFAULT
	}
	return *p.NumErrChoice
}

func (p *GetInfoOptions) IsSetNumErrChoice() bool {
	return p.NumErrChoice != nil
}

func (p *GetInfoOptions) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetInfoOptions) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := NumErrorsChoice(v)
		p.NumErrChoice = &temp
	}
	return nil
}

func (p *GetInfoOptions) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetInfoOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetInfoOptions) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNumErrChoice() {
		if err := oprot.WriteFieldBegin(ctx, "num_err_choice", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num_err_choice: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.NumErrChoice)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.num_err_choice (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num_err_choice: ", p), err)
		}
	}
	return err
}

func (p *GetInfoOptions) Equals(other *GetInfoOptions) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.NumErrChoice != other.NumErrChoice {
		if p.NumErrChoice == nil || other.NumErrChoice == nil {
			return false
		}
		if (*p.NumErrChoice) != (*other.NumErrChoice) {
			return false
		}
	}
	return true
}

func (p *GetInfoOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetInfoOptions(%+v)", *p)
}

func (p *GetInfoOptions) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.GetInfoOptions",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*GetInfoOptions)(nil)

func (p *GetInfoOptions) Validate() error {
	return nil
}

// Attributes:
//   - Action
//   - TargetLogLevel
//   - ResetLogLevelTimeoutSecs
//   - ResetLogLevelTimeoutEpoch
//   - ResetLogLevel
type LogLevel struct {
	Action                    LogLevelAction `thrift:"action,1,required" db:"action" json:"action"`
	TargetLogLevel            *string        `thrift:"target_log_level,2" db:"target_log_level" json:"target_log_level,omitempty"`
	ResetLogLevelTimeoutSecs  *int32         `thrift:"reset_log_level_timeout_secs,3" db:"reset_log_level_timeout_secs" json:"reset_log_level_timeout_secs,omitempty"`
	ResetLogLevelTimeoutEpoch *int64         `thrift:"reset_log_level_timeout_epoch,4" db:"reset_log_level_timeout_epoch" json:"reset_log_level_timeout_epoch,omitempty"`
	ResetLogLevel             *string        `thrift:"reset_log_level,5" db:"reset_log_level" json:"reset_log_level,omitempty"`
}

func NewLogLevel() *LogLevel {
	return &LogLevel{}
}

func (p *LogLevel) GetAction() LogLevelAction {
	return p.Action
}

var LogLevel_TargetLogLevel_DEFAULT string

func (p *LogLevel) GetTargetLogLevel() string {
	if !p.IsSetTargetLogLevel() {
		return LogLevel_TargetLogLevel_DEFAULT
	}
	return *p.TargetLogLevel
}

var LogLevel_ResetLogLevelTimeoutSecs_DEFAULT int32

func (p *LogLevel) GetResetLogLevelTimeoutSecs() int32 {
	if !p.IsSetResetLogLevelTimeoutSecs() {
		return LogLevel_ResetLogLevelTimeoutSecs_DEFAULT
	}
	return *p.ResetLogLevelTimeoutSecs
}

var LogLevel_ResetLogLevelTimeoutEpoch_DEFAULT int64

func (p *LogLevel) GetResetLogLevelTimeoutEpoch() int64 {
	if !p.IsSetResetLogLevelTimeoutEpoch() {
		return LogLevel_ResetLogLevelTimeoutEpoch_DEFAULT
	}
	return *p.ResetLogLevelTimeoutEpoch
}

var LogLevel_ResetLogLevel_DEFAULT string

func (p *LogLevel) GetResetLogLevel() string {
	if !p.IsSetResetLogLevel() {
		return LogLevel_ResetLogLevel_DEFAULT
	}
	return *p.ResetLogLevel
}

func (p *LogLevel) IsSetTargetLogLevel() bool {
	return p.TargetLogLevel != nil
}

func (p *LogLevel) IsSetResetLogLevelTimeoutSecs() bool {
	return p.ResetLogLevelTimeoutSecs != nil
}

func (p *LogLevel) IsSetResetLogLevelTimeoutEpoch() bool {
	return p.ResetLogLevelTimeoutEpoch != nil
}

func (p *LogLevel) IsSetResetLogLevel() bool {
	return p.ResetLogLevel != nil
}

func (p *LogLevel) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetAction bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetAction = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetAction {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Action is not set"))
	}
	return nil
}

func (p *LogLevel) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := LogLevelAction(v)
		p.Action = temp
	}
	return nil
}

func (p *LogLevel) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TargetLogLevel = &v
	}
	return nil
}

func (p *LogLevel) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ResetLogLevelTimeoutSecs = &v
	}
	return nil
}

func (p *LogLevel) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ResetLogLevelTimeoutEpoch = &v
	}
	return nil
}

func (p *LogLevel) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ResetLogLevel = &v
	}
	return nil
}

func (p *LogLevel) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LogLevel"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LogLevel) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "action", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:action: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Action)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.action (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:action: ", p), err)
	}
	return err
}

func (p *LogLevel) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetLogLevel() {
		if err := oprot.WriteFieldBegin(ctx, "target_log_level", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:target_log_level: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.TargetLogLevel)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.target_log_level (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:target_log_level: ", p), err)
		}
	}
	return err
}

func (p *LogLevel) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetResetLogLevelTimeoutSecs() {
		if err := oprot.WriteFieldBegin(ctx, "reset_log_level_timeout_secs", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reset_log_level_timeout_secs: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.ResetLogLevelTimeoutSecs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reset_log_level_timeout_secs (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reset_log_level_timeout_secs: ", p), err)
		}
	}
	return err
}

func (p *LogLevel) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetResetLogLevelTimeoutEpoch() {
		if err := oprot.WriteFieldBegin(ctx, "reset_log_level_timeout_epoch", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reset_log_level_timeout_epoch: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.ResetLogLevelTimeoutEpoch)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reset_log_level_timeout_epoch (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reset_log_level_timeout_epoch: ", p), err)
		}
	}
	return err
}

func (p *LogLevel) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetResetLogLevel() {
		if err := oprot.WriteFieldBegin(ctx, "reset_log_level", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:reset_log_level: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.ResetLogLevel)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reset_log_level (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:reset_log_level: ", p), err)
		}
	}
	return err
}

func (p *LogLevel) Equals(other *LogLevel) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Action != other.Action {
		return false
	}
	if p.TargetLogLevel != other.TargetLogLevel {
		if p.TargetLogLevel == nil || other.TargetLogLevel == nil {
			return false
		}
		if (*p.TargetLogLevel) != (*other.TargetLogLevel) {
			return false
		}
	}
	if p.ResetLogLevelTimeoutSecs != other.ResetLogLevelTimeoutSecs {
		if p.ResetLogLevelTimeoutSecs == nil || other.ResetLogLevelTimeoutSecs == nil {
			return false
		}
		if (*p.ResetLogLevelTimeoutSecs) != (*other.ResetLogLevelTimeoutSecs) {
			return false
		}
	}
	if p.ResetLogLevelTimeoutEpoch != other.ResetLogLevelTimeoutEpoch {
		if p.ResetLogLevelTimeoutEpoch == nil || other.ResetLogLevelTimeoutEpoch == nil {
			return false
		}
		if (*p.ResetLogLevelTimeoutEpoch) != (*other.ResetLogLevelTimeoutEpoch) {
			return false
		}
	}
	if p.ResetLogLevel != other.ResetLogLevel {
		if p.ResetLogLevel == nil || other.ResetLogLevel == nil {
			return false
		}
		if (*p.ResetLogLevel) != (*other.ResetLogLevel) {
			return false
		}
	}
	return true
}

func (p *LogLevel) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogLevel(%+v)", *p)
}

func (p *LogLevel) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.LogLevel",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*LogLevel)(nil)

func (p *LogLevel) Validate() error {
	return nil
}

// Attributes:
//   - NamedLoggerLevel
type LogConfig struct {
	// unused field # 1
	NamedLoggerLevel map[string]*LogLevel `thrift:"named_logger_level,2" db:"named_logger_level" json:"named_logger_level,omitempty"`
}

func NewLogConfig() *LogConfig {
	return &LogConfig{}
}

var LogConfig_NamedLoggerLevel_DEFAULT map[string]*LogLevel

func (p *LogConfig) GetNamedLoggerLevel() map[string]*LogLevel {
	return p.NamedLoggerLevel
}

func (p *LogConfig) IsSetNamedLoggerLevel() bool {
	return p.NamedLoggerLevel != nil
}

func (p *LogConfig) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LogConfig) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*LogLevel, size)
	p.NamedLoggerLevel = tMap
	for i := 0; i < size; i++ {
		var _key249 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key249 = v
		}
		_val250 := &LogLevel{}
		if err := _val250.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val250), err)
		}
		p.NamedLoggerLevel[_key249] = _val250
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *LogConfig) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LogConfig"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LogConfig) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNamedLoggerLevel() {
		if err := oprot.WriteFieldBegin(ctx, "named_logger_level", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:named_logger_level: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.NamedLoggerLevel)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.NamedLoggerLevel {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:named_logger_level: ", p), err)
		}
	}
	return err
}

func (p *LogConfig) Equals(other *LogConfig) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.NamedLoggerLevel) != len(other.NamedLoggerLevel) {
		return false
	}
	for k, _tgt := range p.NamedLoggerLevel {
		_src251 := other.NamedLoggerLevel[k]
		if !_tgt.Equals(_src251) {
			return false
		}
	}
	return true
}

func (p *LogConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogConfig(%+v)", *p)
}

func (p *LogConfig) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.LogConfig",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*LogConfig)(nil)

func (p *LogConfig) Validate() error {
	return nil
}

// Attributes:
//   - TopoIds
type TopologyHistoryInfo struct {
	TopoIds []string `thrift:"topo_ids,1" db:"topo_ids" json:"topo_ids"`
}

func NewTopologyHistoryInfo() *TopologyHistoryInfo {
	return &TopologyHistoryInfo{}
}

func (p *TopologyHistoryInfo) GetTopoIds() []string {
	return p.TopoIds
}

func (p *TopologyHistoryInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TopologyHistoryInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.TopoIds = tSlice
	for i := 0; i < size; i++ {
		var _elem252 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem252 = v
		}
		p.TopoIds = append(p.TopoIds, _elem252)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TopologyHistoryInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TopologyHistoryInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TopologyHistoryInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "topo_ids", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topo_ids: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.TopoIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TopoIds {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topo_ids: ", p), err)
	}
	return err
}

func (p *TopologyHistoryInfo) Equals(other *TopologyHistoryInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.TopoIds) != len(other.TopoIds) {
		return false
	}
	for i, _tgt := range p.TopoIds {
		_src253 := other.TopoIds[i]
		if _tgt != _src253 {
			return false
		}
	}
	return true
}

func (p *TopologyHistoryInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopologyHistoryInfo(%+v)", *p)
}

func (p *TopologyHistoryInfo) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.TopologyHistoryInfo",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TopologyHistoryInfo)(nil)

func (p *TopologyHistoryInfo) Validate() error {
	return nil
}

// Attributes:
//   - Owner
//   - TotalTopologies
//   - TotalExecutors
//   - TotalWorkers
//   - MemoryUsage
//   - CPUUsage
//   - MemoryGuarantee
//   - CPUGuarantee
//   - MemoryGuaranteeRemaining
//   - CPUGuaranteeRemaining
//   - IsolatedNodeGuarantee
//   - TotalTasks
//   - RequestedOnHeapMemory
//   - RequestedOffHeapMemory
//   - RequestedTotalMemory
//   - RequestedCPU
//   - AssignedOnHeapMemory
//   - AssignedOffHeapMemory
type OwnerResourceSummary struct {
	Owner                    string   `thrift:"owner,1,required" db:"owner" json:"owner"`
	TotalTopologies          *int32   `thrift:"total_topologies,2" db:"total_topologies" json:"total_topologies,omitempty"`
	TotalExecutors           *int32   `thrift:"total_executors,3" db:"total_executors" json:"total_executors,omitempty"`
	TotalWorkers             *int32   `thrift:"total_workers,4" db:"total_workers" json:"total_workers,omitempty"`
	MemoryUsage              *float64 `thrift:"memory_usage,5" db:"memory_usage" json:"memory_usage,omitempty"`
	CPUUsage                 *float64 `thrift:"cpu_usage,6" db:"cpu_usage" json:"cpu_usage,omitempty"`
	MemoryGuarantee          *float64 `thrift:"memory_guarantee,7" db:"memory_guarantee" json:"memory_guarantee,omitempty"`
	CPUGuarantee             *float64 `thrift:"cpu_guarantee,8" db:"cpu_guarantee" json:"cpu_guarantee,omitempty"`
	MemoryGuaranteeRemaining *float64 `thrift:"memory_guarantee_remaining,9" db:"memory_guarantee_remaining" json:"memory_guarantee_remaining,omitempty"`
	CPUGuaranteeRemaining    *float64 `thrift:"cpu_guarantee_remaining,10" db:"cpu_guarantee_remaining" json:"cpu_guarantee_remaining,omitempty"`
	IsolatedNodeGuarantee    *int32   `thrift:"isolated_node_guarantee,11" db:"isolated_node_guarantee" json:"isolated_node_guarantee,omitempty"`
	TotalTasks               *int32   `thrift:"total_tasks,12" db:"total_tasks" json:"total_tasks,omitempty"`
	RequestedOnHeapMemory    *float64 `thrift:"requested_on_heap_memory,13" db:"requested_on_heap_memory" json:"requested_on_heap_memory,omitempty"`
	RequestedOffHeapMemory   *float64 `thrift:"requested_off_heap_memory,14" db:"requested_off_heap_memory" json:"requested_off_heap_memory,omitempty"`
	RequestedTotalMemory     *float64 `thrift:"requested_total_memory,15" db:"requested_total_memory" json:"requested_total_memory,omitempty"`
	RequestedCPU             *float64 `thrift:"requested_cpu,16" db:"requested_cpu" json:"requested_cpu,omitempty"`
	AssignedOnHeapMemory     *float64 `thrift:"assigned_on_heap_memory,17" db:"assigned_on_heap_memory" json:"assigned_on_heap_memory,omitempty"`
	AssignedOffHeapMemory    *float64 `thrift:"assigned_off_heap_memory,18" db:"assigned_off_heap_memory" json:"assigned_off_heap_memory,omitempty"`
}

func NewOwnerResourceSummary() *OwnerResourceSummary {
	return &OwnerResourceSummary{}
}

func (p *OwnerResourceSummary) GetOwner() string {
	return p.Owner
}

var OwnerResourceSummary_TotalTopologies_DEFAULT int32

func (p *OwnerResourceSummary) GetTotalTopologies() int32 {
	if !p.IsSetTotalTopologies() {
		return OwnerResourceSummary_TotalTopologies_DEFAULT
	}
	return *p.TotalTopologies
}

var OwnerResourceSummary_TotalExecutors_DEFAULT int32

func (p *OwnerResourceSummary) GetTotalExecutors() int32 {
	if !p.IsSetTotalExecutors() {
		return OwnerResourceSummary_TotalExecutors_DEFAULT
	}
	return *p.TotalExecutors
}

var OwnerResourceSummary_TotalWorkers_DEFAULT int32

func (p *OwnerResourceSummary) GetTotalWorkers() int32 {
	if !p.IsSetTotalWorkers() {
		return OwnerResourceSummary_TotalWorkers_DEFAULT
	}
	return *p.TotalWorkers
}

var OwnerResourceSummary_MemoryUsage_DEFAULT float64

func (p *OwnerResourceSummary) GetMemoryUsage() float64 {
	if !p.IsSetMemoryUsage() {
		return OwnerResourceSummary_MemoryUsage_DEFAULT
	}
	return *p.MemoryUsage
}

var OwnerResourceSummary_CPUUsage_DEFAULT float64

func (p *OwnerResourceSummary) GetCPUUsage() float64 {
	if !p.IsSetCPUUsage() {
		return OwnerResourceSummary_CPUUsage_DEFAULT
	}
	return *p.CPUUsage
}

var OwnerResourceSummary_MemoryGuarantee_DEFAULT float64

func (p *OwnerResourceSummary) GetMemoryGuarantee() float64 {
	if !p.IsSetMemoryGuarantee() {
		return OwnerResourceSummary_MemoryGuarantee_DEFAULT
	}
	return *p.MemoryGuarantee
}

var OwnerResourceSummary_CPUGuarantee_DEFAULT float64

func (p *OwnerResourceSummary) GetCPUGuarantee() float64 {
	if !p.IsSetCPUGuarantee() {
		return OwnerResourceSummary_CPUGuarantee_DEFAULT
	}
	return *p.CPUGuarantee
}

var OwnerResourceSummary_MemoryGuaranteeRemaining_DEFAULT float64

func (p *OwnerResourceSummary) GetMemoryGuaranteeRemaining() float64 {
	if !p.IsSetMemoryGuaranteeRemaining() {
		return OwnerResourceSummary_MemoryGuaranteeRemaining_DEFAULT
	}
	return *p.MemoryGuaranteeRemaining
}

var OwnerResourceSummary_CPUGuaranteeRemaining_DEFAULT float64

func (p *OwnerResourceSummary) GetCPUGuaranteeRemaining() float64 {
	if !p.IsSetCPUGuaranteeRemaining() {
		return OwnerResourceSummary_CPUGuaranteeRemaining_DEFAULT
	}
	return *p.CPUGuaranteeRemaining
}

var OwnerResourceSummary_IsolatedNodeGuarantee_DEFAULT int32

func (p *OwnerResourceSummary) GetIsolatedNodeGuarantee() int32 {
	if !p.IsSetIsolatedNodeGuarantee() {
		return OwnerResourceSummary_IsolatedNodeGuarantee_DEFAULT
	}
	return *p.IsolatedNodeGuarantee
}

var OwnerResourceSummary_TotalTasks_DEFAULT int32

func (p *OwnerResourceSummary) GetTotalTasks() int32 {
	if !p.IsSetTotalTasks() {
		return OwnerResourceSummary_TotalTasks_DEFAULT
	}
	return *p.TotalTasks
}

var OwnerResourceSummary_RequestedOnHeapMemory_DEFAULT float64

func (p *OwnerResourceSummary) GetRequestedOnHeapMemory() float64 {
	if !p.IsSetRequestedOnHeapMemory() {
		return OwnerResourceSummary_RequestedOnHeapMemory_DEFAULT
	}
	return *p.RequestedOnHeapMemory
}

var OwnerResourceSummary_RequestedOffHeapMemory_DEFAULT float64

func (p *OwnerResourceSummary) GetRequestedOffHeapMemory() float64 {
	if !p.IsSetRequestedOffHeapMemory() {
		return OwnerResourceSummary_RequestedOffHeapMemory_DEFAULT
	}
	return *p.RequestedOffHeapMemory
}

var OwnerResourceSummary_RequestedTotalMemory_DEFAULT float64

func (p *OwnerResourceSummary) GetRequestedTotalMemory() float64 {
	if !p.IsSetRequestedTotalMemory() {
		return OwnerResourceSummary_RequestedTotalMemory_DEFAULT
	}
	return *p.RequestedTotalMemory
}

var OwnerResourceSummary_RequestedCPU_DEFAULT float64

func (p *OwnerResourceSummary) GetRequestedCPU() float64 {
	if !p.IsSetRequestedCPU() {
		return OwnerResourceSummary_RequestedCPU_DEFAULT
	}
	return *p.RequestedCPU
}

var OwnerResourceSummary_AssignedOnHeapMemory_DEFAULT float64

func (p *OwnerResourceSummary) GetAssignedOnHeapMemory() float64 {
	if !p.IsSetAssignedOnHeapMemory() {
		return OwnerResourceSummary_AssignedOnHeapMemory_DEFAULT
	}
	return *p.AssignedOnHeapMemory
}

var OwnerResourceSummary_AssignedOffHeapMemory_DEFAULT float64

func (p *OwnerResourceSummary) GetAssignedOffHeapMemory() float64 {
	if !p.IsSetAssignedOffHeapMemory() {
		return OwnerResourceSummary_AssignedOffHeapMemory_DEFAULT
	}
	return *p.AssignedOffHeapMemory
}

func (p *OwnerResourceSummary) IsSetTotalTopologies() bool {
	return p.TotalTopologies != nil
}

func (p *OwnerResourceSummary) IsSetTotalExecutors() bool {
	return p.TotalExecutors != nil
}

func (p *OwnerResourceSummary) IsSetTotalWorkers() bool {
	return p.TotalWorkers != nil
}

func (p *OwnerResourceSummary) IsSetMemoryUsage() bool {
	return p.MemoryUsage != nil
}

func (p *OwnerResourceSummary) IsSetCPUUsage() bool {
	return p.CPUUsage != nil
}

func (p *OwnerResourceSummary) IsSetMemoryGuarantee() bool {
	return p.MemoryGuarantee != nil
}

func (p *OwnerResourceSummary) IsSetCPUGuarantee() bool {
	return p.CPUGuarantee != nil
}

func (p *OwnerResourceSummary) IsSetMemoryGuaranteeRemaining() bool {
	return p.MemoryGuaranteeRemaining != nil
}

func (p *OwnerResourceSummary) IsSetCPUGuaranteeRemaining() bool {
	return p.CPUGuaranteeRemaining != nil
}

func (p *OwnerResourceSummary) IsSetIsolatedNodeGuarantee() bool {
	return p.IsolatedNodeGuarantee != nil
}

func (p *OwnerResourceSummary) IsSetTotalTasks() bool {
	return p.TotalTasks != nil
}

func (p *OwnerResourceSummary) IsSetRequestedOnHeapMemory() bool {
	return p.RequestedOnHeapMemory != nil
}

func (p *OwnerResourceSummary) IsSetRequestedOffHeapMemory() bool {
	return p.RequestedOffHeapMemory != nil
}

func (p *OwnerResourceSummary) IsSetRequestedTotalMemory() bool {
	return p.RequestedTotalMemory != nil
}

func (p *OwnerResourceSummary) IsSetRequestedCPU() bool {
	return p.RequestedCPU != nil
}

func (p *OwnerResourceSummary) IsSetAssignedOnHeapMemory() bool {
	return p.AssignedOnHeapMemory != nil
}

func (p *OwnerResourceSummary) IsSetAssignedOffHeapMemory() bool {
	return p.AssignedOffHeapMemory != nil
}

func (p *OwnerResourceSummary) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetOwner bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetOwner = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField12(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField13(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField14(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField15(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField16(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField17(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField18(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetOwner {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Owner is not set"))
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Owner = v
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TotalTopologies = &v
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalExecutors = &v
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TotalWorkers = &v
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MemoryUsage = &v
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CPUUsage = &v
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.MemoryGuarantee = &v
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.CPUGuarantee = &v
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.MemoryGuaranteeRemaining = &v
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.CPUGuaranteeRemaining = &v
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.IsolatedNodeGuarantee = &v
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.TotalTasks = &v
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.RequestedOnHeapMemory = &v
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.RequestedOffHeapMemory = &v
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.RequestedTotalMemory = &v
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.RequestedCPU = &v
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.AssignedOnHeapMemory = &v
	}
	return nil
}

func (p *OwnerResourceSummary) ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.AssignedOffHeapMemory = &v
	}
	return nil
}

func (p *OwnerResourceSummary) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "OwnerResourceSummary"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField9(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField10(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField11(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField12(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField13(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField14(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField15(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField16(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField17(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField18(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OwnerResourceSummary) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "owner", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:owner: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Owner)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.owner (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:owner: ", p), err)
	}
	return err
}

func (p *OwnerResourceSummary) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalTopologies() {
		if err := oprot.WriteFieldBegin(ctx, "total_topologies", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:total_topologies: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.TotalTopologies)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.total_topologies (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:total_topologies: ", p), err)
		}
	}
	return err
}

func (p *OwnerResourceSummary) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalExecutors() {
		if err := oprot.WriteFieldBegin(ctx, "total_executors", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total_executors: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.TotalExecutors)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.total_executors (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total_executors: ", p), err)
		}
	}
	return err
}

func (p *OwnerResourceSummary) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalWorkers() {
		if err := oprot.WriteFieldBegin(ctx, "total_workers", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:total_workers: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.TotalWorkers)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.total_workers (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:total_workers: ", p), err)
		}
	}
	return err
}

func (p *OwnerResourceSummary) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMemoryUsage() {
		if err := oprot.WriteFieldBegin(ctx, "memory_usage", thrift.DOUBLE, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:memory_usage: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.MemoryUsage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.memory_usage (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:memory_usage: ", p), err)
		}
	}
	return err
}

func (p *OwnerResourceSummary) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCPUUsage() {
		if err := oprot.WriteFieldBegin(ctx, "cpu_usage", thrift.DOUBLE, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:cpu_usage: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.CPUUsage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cpu_usage (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:cpu_usage: ", p), err)
		}
	}
	return err
}

func (p *OwnerResourceSummary) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMemoryGuarantee() {
		if err := oprot.WriteFieldBegin(ctx, "memory_guarantee", thrift.DOUBLE, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:memory_guarantee: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.MemoryGuarantee)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.memory_guarantee (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:memory_guarantee: ", p), err)
		}
	}
	return err
}

func (p *OwnerResourceSummary) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCPUGuarantee() {
		if err := oprot.WriteFieldBegin(ctx, "cpu_guarantee", thrift.DOUBLE, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:cpu_guarantee: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.CPUGuarantee)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cpu_guarantee (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:cpu_guarantee: ", p), err)
		}
	}
	return err
}

func (p *OwnerResourceSummary) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMemoryGuaranteeRemaining() {
		if err := oprot.WriteFieldBegin(ctx, "memory_guarantee_remaining", thrift.DOUBLE, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:memory_guarantee_remaining: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.MemoryGuaranteeRemaining)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.memory_guarantee_remaining (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:memory_guarantee_remaining: ", p), err)
		}
	}
	return err
}

func (p *OwnerResourceSummary) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCPUGuaranteeRemaining() {
		if err := oprot.WriteFieldBegin(ctx, "cpu_guarantee_remaining", thrift.DOUBLE, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:cpu_guarantee_remaining: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.CPUGuaranteeRemaining)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cpu_guarantee_remaining (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:cpu_guarantee_remaining: ", p), err)
		}
	}
	return err
}

func (p *OwnerResourceSummary) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIsolatedNodeGuarantee() {
		if err := oprot.WriteFieldBegin(ctx, "isolated_node_guarantee", thrift.I32, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:isolated_node_guarantee: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.IsolatedNodeGuarantee)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isolated_node_guarantee (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:isolated_node_guarantee: ", p), err)
		}
	}
	return err
}

func (p *OwnerResourceSummary) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalTasks() {
		if err := oprot.WriteFieldBegin(ctx, "total_tasks", thrift.I32, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:total_tasks: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.TotalTasks)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.total_tasks (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:total_tasks: ", p), err)
		}
	}
	return err
}

func (p *OwnerResourceSummary) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedOnHeapMemory() {
		if err := oprot.WriteFieldBegin(ctx, "requested_on_heap_memory", thrift.DOUBLE, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:requested_on_heap_memory: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedOnHeapMemory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_on_heap_memory (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:requested_on_heap_memory: ", p), err)
		}
	}
	return err
}

func (p *OwnerResourceSummary) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedOffHeapMemory() {
		if err := oprot.WriteFieldBegin(ctx, "requested_off_heap_memory", thrift.DOUBLE, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:requested_off_heap_memory: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedOffHeapMemory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_off_heap_memory (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:requested_off_heap_memory: ", p), err)
		}
	}
	return err
}

func (p *OwnerResourceSummary) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedTotalMemory() {
		if err := oprot.WriteFieldBegin(ctx, "requested_total_memory", thrift.DOUBLE, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:requested_total_memory: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedTotalMemory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_total_memory (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:requested_total_memory: ", p), err)
		}
	}
	return err
}

func (p *OwnerResourceSummary) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestedCPU() {
		if err := oprot.WriteFieldBegin(ctx, "requested_cpu", thrift.DOUBLE, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:requested_cpu: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.RequestedCPU)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requested_cpu (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:requested_cpu: ", p), err)
		}
	}
	return err
}

func (p *OwnerResourceSummary) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedOnHeapMemory() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_on_heap_memory", thrift.DOUBLE, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:assigned_on_heap_memory: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedOnHeapMemory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_on_heap_memory (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:assigned_on_heap_memory: ", p), err)
		}
	}
	return err
}

func (p *OwnerResourceSummary) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAssignedOffHeapMemory() {
		if err := oprot.WriteFieldBegin(ctx, "assigned_off_heap_memory", thrift.DOUBLE, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:assigned_off_heap_memory: ", p), err)
		}
		if err := oprot.WriteDouble(ctx, float64(*p.AssignedOffHeapMemory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.assigned_off_heap_memory (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:assigned_off_heap_memory: ", p), err)
		}
	}
	return err
}

func (p *OwnerResourceSummary) Equals(other *OwnerResourceSummary) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Owner != other.Owner {
		return false
	}
	if p.TotalTopologies != other.TotalTopologies {
		if p.TotalTopologies == nil || other.TotalTopologies == nil {
			return false
		}
		if (*p.TotalTopologies) != (*other.TotalTopologies) {
			return false
		}
	}
	if p.TotalExecutors != other.TotalExecutors {
		if p.TotalExecutors == nil || other.TotalExecutors == nil {
			return false
		}
		if (*p.TotalExecutors) != (*other.TotalExecutors) {
			return false
		}
	}
	if p.TotalWorkers != other.TotalWorkers {
		if p.TotalWorkers == nil || other.TotalWorkers == nil {
			return false
		}
		if (*p.TotalWorkers) != (*other.TotalWorkers) {
			return false
		}
	}
	if p.MemoryUsage != other.MemoryUsage {
		if p.MemoryUsage == nil || other.MemoryUsage == nil {
			return false
		}
		if (*p.MemoryUsage) != (*other.MemoryUsage) {
			return false
		}
	}
	if p.CPUUsage != other.CPUUsage {
		if p.CPUUsage == nil || other.CPUUsage == nil {
			return false
		}
		if (*p.CPUUsage) != (*other.CPUUsage) {
			return false
		}
	}
	if p.MemoryGuarantee != other.MemoryGuarantee {
		if p.MemoryGuarantee == nil || other.MemoryGuarantee == nil {
			return false
		}
		if (*p.MemoryGuarantee) != (*other.MemoryGuarantee) {
			return false
		}
	}
	if p.CPUGuarantee != other.CPUGuarantee {
		if p.CPUGuarantee == nil || other.CPUGuarantee == nil {
			return false
		}
		if (*p.CPUGuarantee) != (*other.CPUGuarantee) {
			return false
		}
	}
	if p.MemoryGuaranteeRemaining != other.MemoryGuaranteeRemaining {
		if p.MemoryGuaranteeRemaining == nil || other.MemoryGuaranteeRemaining == nil {
			return false
		}
		if (*p.MemoryGuaranteeRemaining) != (*other.MemoryGuaranteeRemaining) {
			return false
		}
	}
	if p.CPUGuaranteeRemaining != other.CPUGuaranteeRemaining {
		if p.CPUGuaranteeRemaining == nil || other.CPUGuaranteeRemaining == nil {
			return false
		}
		if (*p.CPUGuaranteeRemaining) != (*other.CPUGuaranteeRemaining) {
			return false
		}
	}
	if p.IsolatedNodeGuarantee != other.IsolatedNodeGuarantee {
		if p.IsolatedNodeGuarantee == nil || other.IsolatedNodeGuarantee == nil {
			return false
		}
		if (*p.IsolatedNodeGuarantee) != (*other.IsolatedNodeGuarantee) {
			return false
		}
	}
	if p.TotalTasks != other.TotalTasks {
		if p.TotalTasks == nil || other.TotalTasks == nil {
			return false
		}
		if (*p.TotalTasks) != (*other.TotalTasks) {
			return false
		}
	}
	if p.RequestedOnHeapMemory != other.RequestedOnHeapMemory {
		if p.RequestedOnHeapMemory == nil || other.RequestedOnHeapMemory == nil {
			return false
		}
		if (*p.RequestedOnHeapMemory) != (*other.RequestedOnHeapMemory) {
			return false
		}
	}
	if p.RequestedOffHeapMemory != other.RequestedOffHeapMemory {
		if p.RequestedOffHeapMemory == nil || other.RequestedOffHeapMemory == nil {
			return false
		}
		if (*p.RequestedOffHeapMemory) != (*other.RequestedOffHeapMemory) {
			return false
		}
	}
	if p.RequestedTotalMemory != other.RequestedTotalMemory {
		if p.RequestedTotalMemory == nil || other.RequestedTotalMemory == nil {
			return false
		}
		if (*p.RequestedTotalMemory) != (*other.RequestedTotalMemory) {
			return false
		}
	}
	if p.RequestedCPU != other.RequestedCPU {
		if p.RequestedCPU == nil || other.RequestedCPU == nil {
			return false
		}
		if (*p.RequestedCPU) != (*other.RequestedCPU) {
			return false
		}
	}
	if p.AssignedOnHeapMemory != other.AssignedOnHeapMemory {
		if p.AssignedOnHeapMemory == nil || other.AssignedOnHeapMemory == nil {
			return false
		}
		if (*p.AssignedOnHeapMemory) != (*other.AssignedOnHeapMemory) {
			return false
		}
	}
	if p.AssignedOffHeapMemory != other.AssignedOffHeapMemory {
		if p.AssignedOffHeapMemory == nil || other.AssignedOffHeapMemory == nil {
			return false
		}
		if (*p.AssignedOffHeapMemory) != (*other.AssignedOffHeapMemory) {
			return false
		}
	}
	return true
}

func (p *OwnerResourceSummary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OwnerResourceSummary(%+v)", *p)
}

func (p *OwnerResourceSummary) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.OwnerResourceSummary",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*OwnerResourceSummary)(nil)

func (p *OwnerResourceSummary) Validate() error {
	return nil
}

// Attributes:
//   - StormID
//   - Executors
//   - TimeSecs
type SupervisorWorkerHeartbeat struct {
	StormID   string          `thrift:"storm_id,1,required" db:"storm_id" json:"storm_id"`
	Executors []*ExecutorInfo `thrift:"executors,2,required" db:"executors" json:"executors"`
	TimeSecs  int32           `thrift:"time_secs,3,required" db:"time_secs" json:"time_secs"`
}

func NewSupervisorWorkerHeartbeat() *SupervisorWorkerHeartbeat {
	return &SupervisorWorkerHeartbeat{}
}

func (p *SupervisorWorkerHeartbeat) GetStormID() string {
	return p.StormID
}

func (p *SupervisorWorkerHeartbeat) GetExecutors() []*ExecutorInfo {
	return p.Executors
}

func (p *SupervisorWorkerHeartbeat) GetTimeSecs() int32 {
	return p.TimeSecs
}

func (p *SupervisorWorkerHeartbeat) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStormID bool = false
	var issetExecutors bool = false
	var issetTimeSecs bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetStormID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetExecutors = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetTimeSecs = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStormID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StormID is not set"))
	}
	if !issetExecutors {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Executors is not set"))
	}
	if !issetTimeSecs {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TimeSecs is not set"))
	}
	return nil
}

func (p *SupervisorWorkerHeartbeat) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StormID = v
	}
	return nil
}

func (p *SupervisorWorkerHeartbeat) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ExecutorInfo, 0, size)
	p.Executors = tSlice
	for i := 0; i < size; i++ {
		_elem254 := &ExecutorInfo{}
		if err := _elem254.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem254), err)
		}
		p.Executors = append(p.Executors, _elem254)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SupervisorWorkerHeartbeat) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TimeSecs = v
	}
	return nil
}

func (p *SupervisorWorkerHeartbeat) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SupervisorWorkerHeartbeat"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SupervisorWorkerHeartbeat) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "storm_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:storm_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.StormID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.storm_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:storm_id: ", p), err)
	}
	return err
}

func (p *SupervisorWorkerHeartbeat) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "executors", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:executors: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Executors)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Executors {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:executors: ", p), err)
	}
	return err
}

func (p *SupervisorWorkerHeartbeat) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "time_secs", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:time_secs: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.TimeSecs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.time_secs (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:time_secs: ", p), err)
	}
	return err
}

func (p *SupervisorWorkerHeartbeat) Equals(other *SupervisorWorkerHeartbeat) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.StormID != other.StormID {
		return false
	}
	if len(p.Executors) != len(other.Executors) {
		return false
	}
	for i, _tgt := range p.Executors {
		_src255 := other.Executors[i]
		if !_tgt.Equals(_src255) {
			return false
		}
	}
	if p.TimeSecs != other.TimeSecs {
		return false
	}
	return true
}

func (p *SupervisorWorkerHeartbeat) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SupervisorWorkerHeartbeat(%+v)", *p)
}

func (p *SupervisorWorkerHeartbeat) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SupervisorWorkerHeartbeat",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SupervisorWorkerHeartbeat)(nil)

func (p *SupervisorWorkerHeartbeat) Validate() error {
	return nil
}

// Attributes:
//   - SupervisorID
//   - WorkerHeartbeats
type SupervisorWorkerHeartbeats struct {
	SupervisorID     string                       `thrift:"supervisor_id,1,required" db:"supervisor_id" json:"supervisor_id"`
	WorkerHeartbeats []*SupervisorWorkerHeartbeat `thrift:"worker_heartbeats,2,required" db:"worker_heartbeats" json:"worker_heartbeats"`
}

func NewSupervisorWorkerHeartbeats() *SupervisorWorkerHeartbeats {
	return &SupervisorWorkerHeartbeats{}
}

func (p *SupervisorWorkerHeartbeats) GetSupervisorID() string {
	return p.SupervisorID
}

func (p *SupervisorWorkerHeartbeats) GetWorkerHeartbeats() []*SupervisorWorkerHeartbeat {
	return p.WorkerHeartbeats
}

func (p *SupervisorWorkerHeartbeats) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSupervisorID bool = false
	var issetWorkerHeartbeats bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetSupervisorID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetWorkerHeartbeats = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSupervisorID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SupervisorID is not set"))
	}
	if !issetWorkerHeartbeats {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field WorkerHeartbeats is not set"))
	}
	return nil
}

func (p *SupervisorWorkerHeartbeats) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SupervisorID = v
	}
	return nil
}

func (p *SupervisorWorkerHeartbeats) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SupervisorWorkerHeartbeat, 0, size)
	p.WorkerHeartbeats = tSlice
	for i := 0; i < size; i++ {
		_elem256 := &SupervisorWorkerHeartbeat{}
		if err := _elem256.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem256), err)
		}
		p.WorkerHeartbeats = append(p.WorkerHeartbeats, _elem256)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SupervisorWorkerHeartbeats) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SupervisorWorkerHeartbeats"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SupervisorWorkerHeartbeats) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "supervisor_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:supervisor_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SupervisorID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.supervisor_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:supervisor_id: ", p), err)
	}
	return err
}

func (p *SupervisorWorkerHeartbeats) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "worker_heartbeats", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:worker_heartbeats: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.WorkerHeartbeats)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.WorkerHeartbeats {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:worker_heartbeats: ", p), err)
	}
	return err
}

func (p *SupervisorWorkerHeartbeats) Equals(other *SupervisorWorkerHeartbeats) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SupervisorID != other.SupervisorID {
		return false
	}
	if len(p.WorkerHeartbeats) != len(other.WorkerHeartbeats) {
		return false
	}
	for i, _tgt := range p.WorkerHeartbeats {
		_src257 := other.WorkerHeartbeats[i]
		if !_tgt.Equals(_src257) {
			return false
		}
	}
	return true
}

func (p *SupervisorWorkerHeartbeats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SupervisorWorkerHeartbeats(%+v)", *p)
}

func (p *SupervisorWorkerHeartbeats) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SupervisorWorkerHeartbeats",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SupervisorWorkerHeartbeats)(nil)

func (p *SupervisorWorkerHeartbeats) Validate() error {
	return nil
}

// Attributes:
//   - StormAssignment
type SupervisorAssignments struct {
	StormAssignment *map[string]*Assignment `thrift:"storm_assignment,1" db:"storm_assignment" json:"storm_assignment"`
}

func NewSupervisorAssignments() *SupervisorAssignments {
	return &SupervisorAssignments{}
}

var SupervisorAssignments_StormAssignment_DEFAULT map[string]*Assignment = map[string]*Assignment{}

func (p *SupervisorAssignments) GetStormAssignment() map[string]*Assignment {
	if !p.IsSetStormAssignment() {
		return SupervisorAssignments_StormAssignment_DEFAULT
	}
	return *p.StormAssignment
}

func (p *SupervisorAssignments) IsSetStormAssignment() bool {
	return p.StormAssignment != nil
}

func (p *SupervisorAssignments) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SupervisorAssignments) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*Assignment, size)
	p.StormAssignment = &tMap
	for i := 0; i < size; i++ {
		var _key258 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key258 = v
		}
		_val259 := &Assignment{}
		if err := _val259.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val259), err)
		}
		(*p.StormAssignment)[_key258] = _val259
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SupervisorAssignments) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SupervisorAssignments"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SupervisorAssignments) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetStormAssignment() {
		if err := oprot.WriteFieldBegin(ctx, "storm_assignment", thrift.MAP, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:storm_assignment: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(*p.StormAssignment)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range *p.StormAssignment {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:storm_assignment: ", p), err)
		}
	}
	return err
}

func (p *SupervisorAssignments) Equals(other *SupervisorAssignments) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.StormAssignment != other.StormAssignment {
		if p.StormAssignment == nil || other.StormAssignment == nil {
			return false
		}
		if len((*p.StormAssignment)) != len((*other.StormAssignment)) {
			return false
		}
		for k, _tgt := range *p.StormAssignment {
			_src260 := (*other.StormAssignment)[k]
			if !_tgt.Equals(_src260) {
				return false
			}
		}
	}
	return true
}

func (p *SupervisorAssignments) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SupervisorAssignments(%+v)", *p)
}

func (p *SupervisorAssignments) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SupervisorAssignments",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SupervisorAssignments)(nil)

func (p *SupervisorAssignments) Validate() error {
	return nil
}

// Attributes:
//   - MetricName
//   - Timestamp
//   - MetricValue
//   - ComponentId
//   - ExecutorId
//   - StreamId
type WorkerMetricPoint struct {
	MetricName  string  `thrift:"metricName,1,required" db:"metricName" json:"metricName"`
	Timestamp   int64   `thrift:"timestamp,2,required" db:"timestamp" json:"timestamp"`
	MetricValue float64 `thrift:"metricValue,3,required" db:"metricValue" json:"metricValue"`
	ComponentId string  `thrift:"componentId,4,required" db:"componentId" json:"componentId"`
	ExecutorId  string  `thrift:"executorId,5,required" db:"executorId" json:"executorId"`
	StreamId    string  `thrift:"streamId,6,required" db:"streamId" json:"streamId"`
}

func NewWorkerMetricPoint() *WorkerMetricPoint {
	return &WorkerMetricPoint{}
}

func (p *WorkerMetricPoint) GetMetricName() string {
	return p.MetricName
}

func (p *WorkerMetricPoint) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *WorkerMetricPoint) GetMetricValue() float64 {
	return p.MetricValue
}

func (p *WorkerMetricPoint) GetComponentId() string {
	return p.ComponentId
}

func (p *WorkerMetricPoint) GetExecutorId() string {
	return p.ExecutorId
}

func (p *WorkerMetricPoint) GetStreamId() string {
	return p.StreamId
}

func (p *WorkerMetricPoint) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMetricName bool = false
	var issetTimestamp bool = false
	var issetMetricValue bool = false
	var issetComponentId bool = false
	var issetExecutorId bool = false
	var issetStreamId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMetricName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetTimestamp = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetMetricValue = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetComponentId = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetExecutorId = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
				issetStreamId = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMetricName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MetricName is not set"))
	}
	if !issetTimestamp {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Timestamp is not set"))
	}
	if !issetMetricValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MetricValue is not set"))
	}
	if !issetComponentId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ComponentId is not set"))
	}
	if !issetExecutorId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExecutorId is not set"))
	}
	if !issetStreamId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StreamId is not set"))
	}
	return nil
}

func (p *WorkerMetricPoint) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MetricName = v
	}
	return nil
}

func (p *WorkerMetricPoint) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *WorkerMetricPoint) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MetricValue = v
	}
	return nil
}

func (p *WorkerMetricPoint) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ComponentId = v
	}
	return nil
}

func (p *WorkerMetricPoint) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ExecutorId = v
	}
	return nil
}

func (p *WorkerMetricPoint) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.StreamId = v
	}
	return nil
}

func (p *WorkerMetricPoint) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "WorkerMetricPoint"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkerMetricPoint) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "metricName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metricName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.MetricName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.metricName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metricName: ", p), err)
	}
	return err
}

func (p *WorkerMetricPoint) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timestamp: ", p), err)
	}
	return err
}

func (p *WorkerMetricPoint) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "metricValue", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:metricValue: ", p), err)
	}
	if err := oprot.WriteDouble(ctx, float64(p.MetricValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.metricValue (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:metricValue: ", p), err)
	}
	return err
}

func (p *WorkerMetricPoint) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "componentId", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:componentId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ComponentId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.componentId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:componentId: ", p), err)
	}
	return err
}

func (p *WorkerMetricPoint) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "executorId", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:executorId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ExecutorId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.executorId (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:executorId: ", p), err)
	}
	return err
}

func (p *WorkerMetricPoint) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "streamId", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:streamId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.StreamId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.streamId (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:streamId: ", p), err)
	}
	return err
}

func (p *WorkerMetricPoint) Equals(other *WorkerMetricPoint) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.MetricName != other.MetricName {
		return false
	}
	if p.Timestamp != other.Timestamp {
		return false
	}
	if p.MetricValue != other.MetricValue {
		return false
	}
	if p.ComponentId != other.ComponentId {
		return false
	}
	if p.ExecutorId != other.ExecutorId {
		return false
	}
	if p.StreamId != other.StreamId {
		return false
	}
	return true
}

func (p *WorkerMetricPoint) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerMetricPoint(%+v)", *p)
}

func (p *WorkerMetricPoint) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.WorkerMetricPoint",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*WorkerMetricPoint)(nil)

func (p *WorkerMetricPoint) Validate() error {
	return nil
}

// Attributes:
//   - Metrics
type WorkerMetricList struct {
	Metrics []*WorkerMetricPoint `thrift:"metrics,1" db:"metrics" json:"metrics"`
}

func NewWorkerMetricList() *WorkerMetricList {
	return &WorkerMetricList{}
}

func (p *WorkerMetricList) GetMetrics() []*WorkerMetricPoint {
	return p.Metrics
}

func (p *WorkerMetricList) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkerMetricList) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*WorkerMetricPoint, 0, size)
	p.Metrics = tSlice
	for i := 0; i < size; i++ {
		_elem261 := &WorkerMetricPoint{}
		if err := _elem261.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem261), err)
		}
		p.Metrics = append(p.Metrics, _elem261)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *WorkerMetricList) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "WorkerMetricList"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkerMetricList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "metrics", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metrics: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Metrics)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Metrics {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metrics: ", p), err)
	}
	return err
}

func (p *WorkerMetricList) Equals(other *WorkerMetricList) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Metrics) != len(other.Metrics) {
		return false
	}
	for i, _tgt := range p.Metrics {
		_src262 := other.Metrics[i]
		if !_tgt.Equals(_src262) {
			return false
		}
	}
	return true
}

func (p *WorkerMetricList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerMetricList(%+v)", *p)
}

func (p *WorkerMetricList) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.WorkerMetricList",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*WorkerMetricList)(nil)

func (p *WorkerMetricList) Validate() error {
	return nil
}

// Attributes:
//   - TopologyId
//   - Port
//   - Hostname
//   - MetricList
type WorkerMetrics struct {
	TopologyId string            `thrift:"topologyId,1,required" db:"topologyId" json:"topologyId"`
	Port       int32             `thrift:"port,2,required" db:"port" json:"port"`
	Hostname   string            `thrift:"hostname,3,required" db:"hostname" json:"hostname"`
	MetricList *WorkerMetricList `thrift:"metricList,4,required" db:"metricList" json:"metricList"`
}

func NewWorkerMetrics() *WorkerMetrics {
	return &WorkerMetrics{}
}

func (p *WorkerMetrics) GetTopologyId() string {
	return p.TopologyId
}

func (p *WorkerMetrics) GetPort() int32 {
	return p.Port
}

func (p *WorkerMetrics) GetHostname() string {
	return p.Hostname
}

var WorkerMetrics_MetricList_DEFAULT *WorkerMetricList

func (p *WorkerMetrics) GetMetricList() *WorkerMetricList {
	if !p.IsSetMetricList() {
		return WorkerMetrics_MetricList_DEFAULT
	}
	return p.MetricList
}

func (p *WorkerMetrics) IsSetMetricList() bool {
	return p.MetricList != nil
}

func (p *WorkerMetrics) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTopologyId bool = false
	var issetPort bool = false
	var issetHostname bool = false
	var issetMetricList bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetTopologyId = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetPort = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetHostname = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetMetricList = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTopologyId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TopologyId is not set"))
	}
	if !issetPort {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Port is not set"))
	}
	if !issetHostname {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Hostname is not set"))
	}
	if !issetMetricList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MetricList is not set"))
	}
	return nil
}

func (p *WorkerMetrics) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TopologyId = v
	}
	return nil
}

func (p *WorkerMetrics) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *WorkerMetrics) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Hostname = v
	}
	return nil
}

func (p *WorkerMetrics) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.MetricList = &WorkerMetricList{}
	if err := p.MetricList.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MetricList), err)
	}
	return nil
}

func (p *WorkerMetrics) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "WorkerMetrics"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkerMetrics) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "topologyId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topologyId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.TopologyId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topologyId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topologyId: ", p), err)
	}
	return err
}

func (p *WorkerMetrics) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "port", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err)
	}
	return err
}

func (p *WorkerMetrics) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "hostname", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hostname: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Hostname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hostname (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hostname: ", p), err)
	}
	return err
}

func (p *WorkerMetrics) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "metricList", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:metricList: ", p), err)
	}
	if err := p.MetricList.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MetricList), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:metricList: ", p), err)
	}
	return err
}

func (p *WorkerMetrics) Equals(other *WorkerMetrics) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.TopologyId != other.TopologyId {
		return false
	}
	if p.Port != other.Port {
		return false
	}
	if p.Hostname != other.Hostname {
		return false
	}
	if !p.MetricList.Equals(other.MetricList) {
		return false
	}
	return true
}

func (p *WorkerMetrics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerMetrics(%+v)", *p)
}

func (p *WorkerMetrics) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.WorkerMetrics",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*WorkerMetrics)(nil)

func (p *WorkerMetrics) Validate() error {
	return nil
}

// Attributes:
//   - FuncArgs_
//   - RequestID
type DRPCRequest struct {
	FuncArgs_ string `thrift:"func_args,1,required" db:"func_args" json:"func_args"`
	RequestID string `thrift:"request_id,2,required" db:"request_id" json:"request_id"`
}

func NewDRPCRequest() *DRPCRequest {
	return &DRPCRequest{}
}

func (p *DRPCRequest) GetFuncArgs_() string {
	return p.FuncArgs_
}

func (p *DRPCRequest) GetRequestID() string {
	return p.RequestID
}

func (p *DRPCRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetFuncArgs_ bool = false
	var issetRequestID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetFuncArgs_ = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetRequestID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetFuncArgs_ {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FuncArgs_ is not set"))
	}
	if !issetRequestID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestID is not set"))
	}
	return nil
}

func (p *DRPCRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FuncArgs_ = v
	}
	return nil
}

func (p *DRPCRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequestID = v
	}
	return nil
}

func (p *DRPCRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "DRPCRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DRPCRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "func_args", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:func_args: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.FuncArgs_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.func_args (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:func_args: ", p), err)
	}
	return err
}

func (p *DRPCRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request_id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RequestID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.request_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request_id: ", p), err)
	}
	return err
}

func (p *DRPCRequest) Equals(other *DRPCRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.FuncArgs_ != other.FuncArgs_ {
		return false
	}
	if p.RequestID != other.RequestID {
		return false
	}
	return true
}

func (p *DRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DRPCRequest(%+v)", *p)
}

func (p *DRPCRequest) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.DRPCRequest",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DRPCRequest)(nil)

func (p *DRPCRequest) Validate() error {
	return nil
}

// Attributes:
//   - Msg
//   - Type
type DRPCExecutionException struct {
	Msg  string             `thrift:"msg,1,required" db:"msg" json:"msg"`
	Type *DRPCExceptionType `thrift:"type,2" db:"type" json:"type,omitempty"`
}

func NewDRPCExecutionException() *DRPCExecutionException {
	return &DRPCExecutionException{}
}

func (p *DRPCExecutionException) GetMsg() string {
	return p.Msg
}

var DRPCExecutionException_Type_DEFAULT DRPCExceptionType

func (p *DRPCExecutionException) GetType() DRPCExceptionType {
	if !p.IsSetType() {
		return DRPCExecutionException_Type_DEFAULT
	}
	return *p.Type
}

func (p *DRPCExecutionException) IsSetType() bool {
	return p.Type != nil
}

func (p *DRPCExecutionException) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMsg bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMsg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMsg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Msg is not set"))
	}
	return nil
}

func (p *DRPCExecutionException) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *DRPCExecutionException) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := DRPCExceptionType(v)
		p.Type = &temp
	}
	return nil
}

func (p *DRPCExecutionException) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "DRPCExecutionException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DRPCExecutionException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *DRPCExecutionException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
		}
	}
	return err
}

func (p *DRPCExecutionException) Equals(other *DRPCExecutionException) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Msg != other.Msg {
		return false
	}
	if p.Type != other.Type {
		if p.Type == nil || other.Type == nil {
			return false
		}
		if (*p.Type) != (*other.Type) {
			return false
		}
	}
	return true
}

func (p *DRPCExecutionException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DRPCExecutionException(%+v)", *p)
}

func (p *DRPCExecutionException) Error() string {
	return p.String()
}

func (DRPCExecutionException) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*DRPCExecutionException)(nil)

func (p *DRPCExecutionException) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.DRPCExecutionException",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DRPCExecutionException)(nil)

func (p *DRPCExecutionException) Validate() error {
	return nil
}

// Attributes:
//   - ID
//   - Details
type HBPulse struct {
	ID      string `thrift:"id,1,required" db:"id" json:"id"`
	Details []byte `thrift:"details,2" db:"details" json:"details"`
}

func NewHBPulse() *HBPulse {
	return &HBPulse{}
}

func (p *HBPulse) GetID() string {
	return p.ID
}

func (p *HBPulse) GetDetails() []byte {
	return p.Details
}

func (p *HBPulse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	return nil
}

func (p *HBPulse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *HBPulse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Details = v
	}
	return nil
}

func (p *HBPulse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "HBPulse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HBPulse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *HBPulse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "details", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:details: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Details); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.details (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:details: ", p), err)
	}
	return err
}

func (p *HBPulse) Equals(other *HBPulse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ID != other.ID {
		return false
	}
	if bytes.Compare(p.Details, other.Details) != 0 {
		return false
	}
	return true
}

func (p *HBPulse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HBPulse(%+v)", *p)
}

func (p *HBPulse) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.HBPulse",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*HBPulse)(nil)

func (p *HBPulse) Validate() error {
	return nil
}

// Attributes:
//   - Pulses
type HBRecords struct {
	Pulses []*HBPulse `thrift:"pulses,1" db:"pulses" json:"pulses"`
}

func NewHBRecords() *HBRecords {
	return &HBRecords{}
}

func (p *HBRecords) GetPulses() []*HBPulse {
	return p.Pulses
}

func (p *HBRecords) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HBRecords) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*HBPulse, 0, size)
	p.Pulses = tSlice
	for i := 0; i < size; i++ {
		_elem263 := &HBPulse{}
		if err := _elem263.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem263), err)
		}
		p.Pulses = append(p.Pulses, _elem263)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HBRecords) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "HBRecords"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HBRecords) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "pulses", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pulses: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Pulses)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Pulses {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pulses: ", p), err)
	}
	return err
}

func (p *HBRecords) Equals(other *HBRecords) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Pulses) != len(other.Pulses) {
		return false
	}
	for i, _tgt := range p.Pulses {
		_src264 := other.Pulses[i]
		if !_tgt.Equals(_src264) {
			return false
		}
	}
	return true
}

func (p *HBRecords) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HBRecords(%+v)", *p)
}

func (p *HBRecords) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.HBRecords",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*HBRecords)(nil)

func (p *HBRecords) Validate() error {
	return nil
}

// Attributes:
//   - PulseIds
type HBNodes struct {
	PulseIds []string `thrift:"pulseIds,1" db:"pulseIds" json:"pulseIds"`
}

func NewHBNodes() *HBNodes {
	return &HBNodes{}
}

func (p *HBNodes) GetPulseIds() []string {
	return p.PulseIds
}

func (p *HBNodes) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HBNodes) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PulseIds = tSlice
	for i := 0; i < size; i++ {
		var _elem265 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem265 = v
		}
		p.PulseIds = append(p.PulseIds, _elem265)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HBNodes) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "HBNodes"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HBNodes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "pulseIds", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pulseIds: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PulseIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PulseIds {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pulseIds: ", p), err)
	}
	return err
}

func (p *HBNodes) Equals(other *HBNodes) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.PulseIds) != len(other.PulseIds) {
		return false
	}
	for i, _tgt := range p.PulseIds {
		_src266 := other.PulseIds[i]
		if _tgt != _src266 {
			return false
		}
	}
	return true
}

func (p *HBNodes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HBNodes(%+v)", *p)
}

func (p *HBNodes) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.HBNodes",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*HBNodes)(nil)

func (p *HBNodes) Validate() error {
	return nil
}

// Attributes:
//   - Path
//   - Pulse
//   - Boolval
//   - Records
//   - Nodes
//   - MessageBlob
type HBMessageData struct {
	Path    *string    `thrift:"path,1" db:"path" json:"path,omitempty"`
	Pulse   *HBPulse   `thrift:"pulse,2" db:"pulse" json:"pulse,omitempty"`
	Boolval *bool      `thrift:"boolval,3" db:"boolval" json:"boolval,omitempty"`
	Records *HBRecords `thrift:"records,4" db:"records" json:"records,omitempty"`
	Nodes   *HBNodes   `thrift:"nodes,5" db:"nodes" json:"nodes,omitempty"`
	// unused field # 6
	MessageBlob []byte `thrift:"message_blob,7" db:"message_blob" json:"message_blob,omitempty"`
}

func NewHBMessageData() *HBMessageData {
	return &HBMessageData{}
}

var HBMessageData_Path_DEFAULT string

func (p *HBMessageData) GetPath() string {
	if !p.IsSetPath() {
		return HBMessageData_Path_DEFAULT
	}
	return *p.Path
}

var HBMessageData_Pulse_DEFAULT *HBPulse

func (p *HBMessageData) GetPulse() *HBPulse {
	if !p.IsSetPulse() {
		return HBMessageData_Pulse_DEFAULT
	}
	return p.Pulse
}

var HBMessageData_Boolval_DEFAULT bool

func (p *HBMessageData) GetBoolval() bool {
	if !p.IsSetBoolval() {
		return HBMessageData_Boolval_DEFAULT
	}
	return *p.Boolval
}

var HBMessageData_Records_DEFAULT *HBRecords

func (p *HBMessageData) GetRecords() *HBRecords {
	if !p.IsSetRecords() {
		return HBMessageData_Records_DEFAULT
	}
	return p.Records
}

var HBMessageData_Nodes_DEFAULT *HBNodes

func (p *HBMessageData) GetNodes() *HBNodes {
	if !p.IsSetNodes() {
		return HBMessageData_Nodes_DEFAULT
	}
	return p.Nodes
}

var HBMessageData_MessageBlob_DEFAULT []byte

func (p *HBMessageData) GetMessageBlob() []byte {
	return p.MessageBlob
}

func (p *HBMessageData) CountSetFieldsHBMessageData() int {
	count := 0
	if p.IsSetPath() {
		count++
	}
	if p.IsSetPulse() {
		count++
	}
	if p.IsSetBoolval() {
		count++
	}
	if p.IsSetRecords() {
		count++
	}
	if p.IsSetNodes() {
		count++
	}
	if p.IsSetMessageBlob() {
		count++
	}
	return count

}

func (p *HBMessageData) IsSetPath() bool {
	return p.Path != nil
}

func (p *HBMessageData) IsSetPulse() bool {
	return p.Pulse != nil
}

func (p *HBMessageData) IsSetBoolval() bool {
	return p.Boolval != nil
}

func (p *HBMessageData) IsSetRecords() bool {
	return p.Records != nil
}

func (p *HBMessageData) IsSetNodes() bool {
	return p.Nodes != nil
}

func (p *HBMessageData) IsSetMessageBlob() bool {
	return p.MessageBlob != nil
}

func (p *HBMessageData) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HBMessageData) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = &v
	}
	return nil
}

func (p *HBMessageData) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Pulse = &HBPulse{}
	if err := p.Pulse.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pulse), err)
	}
	return nil
}

func (p *HBMessageData) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Boolval = &v
	}
	return nil
}

func (p *HBMessageData) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.Records = &HBRecords{}
	if err := p.Records.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Records), err)
	}
	return nil
}

func (p *HBMessageData) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	p.Nodes = &HBNodes{}
	if err := p.Nodes.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Nodes), err)
	}
	return nil
}

func (p *HBMessageData) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.MessageBlob = v
	}
	return nil
}

func (p *HBMessageData) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsHBMessageData(); c != 1 {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("%T write union: exactly one field must be set (%d set)", p, c))
	}
	if err := oprot.WriteStructBegin(ctx, "HBMessageData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HBMessageData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err := oprot.WriteFieldBegin(ctx, "path", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Path)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
		}
	}
	return err
}

func (p *HBMessageData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPulse() {
		if err := oprot.WriteFieldBegin(ctx, "pulse", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pulse: ", p), err)
		}
		if err := p.Pulse.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pulse), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pulse: ", p), err)
		}
	}
	return err
}

func (p *HBMessageData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBoolval() {
		if err := oprot.WriteFieldBegin(ctx, "boolval", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:boolval: ", p), err)
		}
		if err := oprot.WriteBool(ctx, bool(*p.Boolval)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.boolval (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:boolval: ", p), err)
		}
	}
	return err
}

func (p *HBMessageData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRecords() {
		if err := oprot.WriteFieldBegin(ctx, "records", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:records: ", p), err)
		}
		if err := p.Records.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Records), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:records: ", p), err)
		}
	}
	return err
}

func (p *HBMessageData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNodes() {
		if err := oprot.WriteFieldBegin(ctx, "nodes", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nodes: ", p), err)
		}
		if err := p.Nodes.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Nodes), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nodes: ", p), err)
		}
	}
	return err
}

func (p *HBMessageData) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageBlob() {
		if err := oprot.WriteFieldBegin(ctx, "message_blob", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:message_blob: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.MessageBlob); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message_blob (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:message_blob: ", p), err)
		}
	}
	return err
}

func (p *HBMessageData) Equals(other *HBMessageData) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Path != other.Path {
		if p.Path == nil || other.Path == nil {
			return false
		}
		if (*p.Path) != (*other.Path) {
			return false
		}
	}
	if !p.Pulse.Equals(other.Pulse) {
		return false
	}
	if p.Boolval != other.Boolval {
		if p.Boolval == nil || other.Boolval == nil {
			return false
		}
		if (*p.Boolval) != (*other.Boolval) {
			return false
		}
	}
	if !p.Records.Equals(other.Records) {
		return false
	}
	if !p.Nodes.Equals(other.Nodes) {
		return false
	}
	if bytes.Compare(p.MessageBlob, other.MessageBlob) != 0 {
		return false
	}
	return true
}

func (p *HBMessageData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HBMessageData(%+v)", *p)
}

func (p *HBMessageData) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.HBMessageData",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*HBMessageData)(nil)

func (p *HBMessageData) Validate() error {
	return nil
}

// Attributes:
//   - Type
//   - Data
//   - MessageID
type HBMessage struct {
	Type      HBServerMessageType `thrift:"type,1" db:"type" json:"type"`
	Data      *HBMessageData      `thrift:"data,2" db:"data" json:"data"`
	MessageID int32               `thrift:"message_id,3" db:"message_id" json:"message_id"`
}

func NewHBMessage() *HBMessage {
	return &HBMessage{
		MessageID: -1,
	}
}

func (p *HBMessage) GetType() HBServerMessageType {
	return p.Type
}

var HBMessage_Data_DEFAULT *HBMessageData

func (p *HBMessage) GetData() *HBMessageData {
	if !p.IsSetData() {
		return HBMessage_Data_DEFAULT
	}
	return p.Data
}

var HBMessage_MessageID_DEFAULT int32 = -1

func (p *HBMessage) GetMessageID() int32 {
	return p.MessageID
}

func (p *HBMessage) IsSetData() bool {
	return p.Data != nil
}

func (p *HBMessage) IsSetMessageID() bool {
	return p.MessageID != HBMessage_MessageID_DEFAULT
}

func (p *HBMessage) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HBMessage) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := HBServerMessageType(v)
		p.Type = temp
	}
	return nil
}

func (p *HBMessage) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Data = &HBMessageData{}
	if err := p.Data.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
	}
	return nil
}

func (p *HBMessage) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MessageID = v
	}
	return nil
}

func (p *HBMessage) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "HBMessage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HBMessage) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *HBMessage) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err)
	}
	if err := p.Data.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err)
	}
	return err
}

func (p *HBMessage) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageID() {
		if err := oprot.WriteFieldBegin(ctx, "message_id", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message_id: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(p.MessageID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message_id (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message_id: ", p), err)
		}
	}
	return err
}

func (p *HBMessage) Equals(other *HBMessage) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Type != other.Type {
		return false
	}
	if !p.Data.Equals(other.Data) {
		return false
	}
	if p.MessageID != other.MessageID {
		return false
	}
	return true
}

func (p *HBMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HBMessage(%+v)", *p)
}

func (p *HBMessage) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.HBMessage",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*HBMessage)(nil)

func (p *HBMessage) Validate() error {
	return nil
}

// Attributes:
//   - Msg
type HBAuthorizationException struct {
	Msg string `thrift:"msg,1,required" db:"msg" json:"msg"`
}

func NewHBAuthorizationException() *HBAuthorizationException {
	return &HBAuthorizationException{}
}

func (p *HBAuthorizationException) GetMsg() string {
	return p.Msg
}

func (p *HBAuthorizationException) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMsg bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMsg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMsg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Msg is not set"))
	}
	return nil
}

func (p *HBAuthorizationException) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *HBAuthorizationException) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "HBAuthorizationException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HBAuthorizationException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *HBAuthorizationException) Equals(other *HBAuthorizationException) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Msg != other.Msg {
		return false
	}
	return true
}

func (p *HBAuthorizationException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HBAuthorizationException(%+v)", *p)
}

func (p *HBAuthorizationException) Error() string {
	return p.String()
}

func (HBAuthorizationException) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*HBAuthorizationException)(nil)

func (p *HBAuthorizationException) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.HBAuthorizationException",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*HBAuthorizationException)(nil)

func (p *HBAuthorizationException) Validate() error {
	return nil
}

// Attributes:
//   - Msg
type HBExecutionException struct {
	Msg string `thrift:"msg,1,required" db:"msg" json:"msg"`
}

func NewHBExecutionException() *HBExecutionException {
	return &HBExecutionException{}
}

func (p *HBExecutionException) GetMsg() string {
	return p.Msg
}

func (p *HBExecutionException) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMsg bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMsg = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMsg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Msg is not set"))
	}
	return nil
}

func (p *HBExecutionException) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *HBExecutionException) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "HBExecutionException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HBExecutionException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *HBExecutionException) Equals(other *HBExecutionException) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Msg != other.Msg {
		return false
	}
	return true
}

func (p *HBExecutionException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HBExecutionException(%+v)", *p)
}

func (p *HBExecutionException) Error() string {
	return p.String()
}

func (HBExecutionException) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*HBExecutionException)(nil)

func (p *HBExecutionException) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.HBExecutionException",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*HBExecutionException)(nil)

func (p *HBExecutionException) Validate() error {
	return nil
}

// Attributes:
//   - UserName
//   - TopologyId
//   - SecretVersion
//   - ExpirationTimeMillis
type WorkerTokenInfo struct {
	UserName             string `thrift:"userName,1,required" db:"userName" json:"userName"`
	TopologyId           string `thrift:"topologyId,2,required" db:"topologyId" json:"topologyId"`
	SecretVersion        int64  `thrift:"secretVersion,3,required" db:"secretVersion" json:"secretVersion"`
	ExpirationTimeMillis int64  `thrift:"expirationTimeMillis,4,required" db:"expirationTimeMillis" json:"expirationTimeMillis"`
}

func NewWorkerTokenInfo() *WorkerTokenInfo {
	return &WorkerTokenInfo{}
}

func (p *WorkerTokenInfo) GetUserName() string {
	return p.UserName
}

func (p *WorkerTokenInfo) GetTopologyId() string {
	return p.TopologyId
}

func (p *WorkerTokenInfo) GetSecretVersion() int64 {
	return p.SecretVersion
}

func (p *WorkerTokenInfo) GetExpirationTimeMillis() int64 {
	return p.ExpirationTimeMillis
}

func (p *WorkerTokenInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserName bool = false
	var issetTopologyId bool = false
	var issetSecretVersion bool = false
	var issetExpirationTimeMillis bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetUserName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetTopologyId = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetSecretVersion = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
				issetExpirationTimeMillis = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserName is not set"))
	}
	if !issetTopologyId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TopologyId is not set"))
	}
	if !issetSecretVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SecretVersion is not set"))
	}
	if !issetExpirationTimeMillis {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExpirationTimeMillis is not set"))
	}
	return nil
}

func (p *WorkerTokenInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *WorkerTokenInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TopologyId = v
	}
	return nil
}

func (p *WorkerTokenInfo) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SecretVersion = v
	}
	return nil
}

func (p *WorkerTokenInfo) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ExpirationTimeMillis = v
	}
	return nil
}

func (p *WorkerTokenInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "WorkerTokenInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkerTokenInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "userName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userName: ", p), err)
	}
	return err
}

func (p *WorkerTokenInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "topologyId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:topologyId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.TopologyId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topologyId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:topologyId: ", p), err)
	}
	return err
}

func (p *WorkerTokenInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "secretVersion", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:secretVersion: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.SecretVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.secretVersion (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:secretVersion: ", p), err)
	}
	return err
}

func (p *WorkerTokenInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "expirationTimeMillis", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:expirationTimeMillis: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.ExpirationTimeMillis)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expirationTimeMillis (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:expirationTimeMillis: ", p), err)
	}
	return err
}

func (p *WorkerTokenInfo) Equals(other *WorkerTokenInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.UserName != other.UserName {
		return false
	}
	if p.TopologyId != other.TopologyId {
		return false
	}
	if p.SecretVersion != other.SecretVersion {
		return false
	}
	if p.ExpirationTimeMillis != other.ExpirationTimeMillis {
		return false
	}
	return true
}

func (p *WorkerTokenInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerTokenInfo(%+v)", *p)
}

func (p *WorkerTokenInfo) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.WorkerTokenInfo",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*WorkerTokenInfo)(nil)

func (p *WorkerTokenInfo) Validate() error {
	return nil
}

// Attributes:
//   - ServiceType
//   - Info
//   - Signature
type WorkerToken struct {
	ServiceType WorkerTokenServiceType `thrift:"serviceType,1,required" db:"serviceType" json:"serviceType"`
	Info        []byte                 `thrift:"info,2,required" db:"info" json:"info"`
	Signature   []byte                 `thrift:"signature,3,required" db:"signature" json:"signature"`
}

func NewWorkerToken() *WorkerToken {
	return &WorkerToken{}
}

func (p *WorkerToken) GetServiceType() WorkerTokenServiceType {
	return p.ServiceType
}

func (p *WorkerToken) GetInfo() []byte {
	return p.Info
}

func (p *WorkerToken) GetSignature() []byte {
	return p.Signature
}

func (p *WorkerToken) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetServiceType bool = false
	var issetInfo bool = false
	var issetSignature bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetServiceType = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetInfo = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetSignature = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetServiceType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceType is not set"))
	}
	if !issetInfo {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Info is not set"))
	}
	if !issetSignature {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Signature is not set"))
	}
	return nil
}

func (p *WorkerToken) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := WorkerTokenServiceType(v)
		p.ServiceType = temp
	}
	return nil
}

func (p *WorkerToken) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Info = v
	}
	return nil
}

func (p *WorkerToken) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Signature = v
	}
	return nil
}

func (p *WorkerToken) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "WorkerToken"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkerToken) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "serviceType", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceType: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ServiceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceType: ", p), err)
	}
	return err
}

func (p *WorkerToken) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "info", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Info); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.info (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err)
	}
	return err
}

func (p *WorkerToken) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "signature", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:signature: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Signature); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.signature (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:signature: ", p), err)
	}
	return err
}

func (p *WorkerToken) Equals(other *WorkerToken) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ServiceType != other.ServiceType {
		return false
	}
	if bytes.Compare(p.Info, other.Info) != 0 {
		return false
	}
	if bytes.Compare(p.Signature, other.Signature) != 0 {
		return false
	}
	return true
}

func (p *WorkerToken) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerToken(%+v)", *p)
}

func (p *WorkerToken) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.WorkerToken",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*WorkerToken)(nil)

func (p *WorkerToken) Validate() error {
	return nil
}

// Attributes:
//   - Key
//   - UserName
//   - ExpirationTimeMillis
type PrivateWorkerKey struct {
	Key                  []byte `thrift:"key,1,required" db:"key" json:"key"`
	UserName             string `thrift:"userName,2,required" db:"userName" json:"userName"`
	ExpirationTimeMillis int64  `thrift:"expirationTimeMillis,3,required" db:"expirationTimeMillis" json:"expirationTimeMillis"`
}

func NewPrivateWorkerKey() *PrivateWorkerKey {
	return &PrivateWorkerKey{}
}

func (p *PrivateWorkerKey) GetKey() []byte {
	return p.Key
}

func (p *PrivateWorkerKey) GetUserName() string {
	return p.UserName
}

func (p *PrivateWorkerKey) GetExpirationTimeMillis() int64 {
	return p.ExpirationTimeMillis
}

func (p *PrivateWorkerKey) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetKey bool = false
	var issetUserName bool = false
	var issetExpirationTimeMillis bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetKey = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetUserName = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
				issetExpirationTimeMillis = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetKey {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"))
	}
	if !issetUserName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserName is not set"))
	}
	if !issetExpirationTimeMillis {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExpirationTimeMillis is not set"))
	}
	return nil
}

func (p *PrivateWorkerKey) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *PrivateWorkerKey) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *PrivateWorkerKey) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExpirationTimeMillis = v
	}
	return nil
}

func (p *PrivateWorkerKey) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "PrivateWorkerKey"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PrivateWorkerKey) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Key); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *PrivateWorkerKey) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "userName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.UserName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err)
	}
	return err
}

func (p *PrivateWorkerKey) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "expirationTimeMillis", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expirationTimeMillis: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.ExpirationTimeMillis)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expirationTimeMillis (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expirationTimeMillis: ", p), err)
	}
	return err
}

func (p *PrivateWorkerKey) Equals(other *PrivateWorkerKey) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if bytes.Compare(p.Key, other.Key) != 0 {
		return false
	}
	if p.UserName != other.UserName {
		return false
	}
	if p.ExpirationTimeMillis != other.ExpirationTimeMillis {
		return false
	}
	return true
}

func (p *PrivateWorkerKey) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrivateWorkerKey(%+v)", *p)
}

func (p *PrivateWorkerKey) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.PrivateWorkerKey",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*PrivateWorkerKey)(nil)

func (p *PrivateWorkerKey) Validate() error {
	return nil
}

type Nimbus interface {
	// Parameters:
	//  - Name
	//  - UploadedJarLocation
	//  - JsonConf
	//  - Topology
	//
	SubmitTopology(ctx context.Context, name string, uploadedJarLocation string, jsonConf string, topology *StormTopology) (_err error)
	// Parameters:
	//  - Name
	//  - UploadedJarLocation
	//  - JsonConf
	//  - Topology
	//  - Options
	//
	SubmitTopologyWithOpts(ctx context.Context, name string, uploadedJarLocation string, jsonConf string, topology *StormTopology, options *SubmitOptions) (_err error)
	// Parameters:
	//  - Name
	//
	KillTopology(ctx context.Context, name string) (_err error)
	// Parameters:
	//  - Name
	//  - Options
	//
	KillTopologyWithOpts(ctx context.Context, name string, options *KillOptions) (_err error)
	// Parameters:
	//  - Name
	//
	Activate(ctx context.Context, name string) (_err error)
	// Parameters:
	//  - Name
	//
	Deactivate(ctx context.Context, name string) (_err error)
	// Parameters:
	//  - Name
	//  - Options
	//
	Rebalance(ctx context.Context, name string, options *RebalanceOptions) (_err error)
	// Parameters:
	//  - Name
	//  - Config
	//
	SetLogConfig(ctx context.Context, name string, config *LogConfig) (_err error)
	// Parameters:
	//  - Name
	//
	GetLogConfig(ctx context.Context, name string) (_r *LogConfig, _err error)
	// Enable/disable logging the tuples generated in topology via an internal EventLogger bolt. The component name is optional
	// and if null or empty, the debug flag will apply to the entire topology.
	//
	// The 'samplingPercentage' will limit loggging to a percentage of generated tuples.
	//
	//
	// Parameters:
	//  - Name
	//  - Component
	//  - Enable
	//  - SamplingPercentage
	//
	Debug(ctx context.Context, name string, component string, enable bool, samplingPercentage float64) (_err error)
	// Parameters:
	//  - ID
	//  - ProfileRequest
	//
	SetWorkerProfiler(ctx context.Context, id string, profileRequest *ProfileRequest) (_err error)
	// Parameters:
	//  - ID
	//  - ComponentID
	//  - Action
	//
	GetComponentPendingProfileActions(ctx context.Context, id string, component_id string, action ProfileAction) (_r []*ProfileRequest, _err error)
	// Parameters:
	//  - Name
	//  - Creds
	//
	UploadNewCredentials(ctx context.Context, name string, creds *Credentials) (_err error)
	// Parameters:
	//  - Key
	//  - Meta
	//
	BeginCreateBlob(ctx context.Context, key string, meta *SettableBlobMeta) (_r string, _err error)
	// Parameters:
	//  - Key
	//
	BeginUpdateBlob(ctx context.Context, key string) (_r string, _err error)
	// Parameters:
	//  - Session
	//  - Chunk
	//
	UploadBlobChunk(ctx context.Context, session string, chunk []byte) (_err error)
	// Parameters:
	//  - Session
	//
	FinishBlobUpload(ctx context.Context, session string) (_err error)
	// Parameters:
	//  - Session
	//
	CancelBlobUpload(ctx context.Context, session string) (_err error)
	// Parameters:
	//  - Key
	//
	GetBlobMeta(ctx context.Context, key string) (_r *ReadableBlobMeta, _err error)
	// Parameters:
	//  - Key
	//  - Meta
	//
	SetBlobMeta(ctx context.Context, key string, meta *SettableBlobMeta) (_err error)
	// Parameters:
	//  - Key
	//
	BeginBlobDownload(ctx context.Context, key string) (_r *BeginDownloadResult_, _err error)
	// Parameters:
	//  - Session
	//
	DownloadBlobChunk(ctx context.Context, session string) (_r []byte, _err error)
	// Parameters:
	//  - Key
	//
	DeleteBlob(ctx context.Context, key string) (_err error)
	// Parameters:
	//  - Session
	//
	ListBlobs(ctx context.Context, session string) (_r *ListBlobsResult_, _err error)
	// Parameters:
	//  - Key
	//
	GetBlobReplication(ctx context.Context, key string) (_r int32, _err error)
	// Parameters:
	//  - Key
	//  - Replication
	//
	UpdateBlobReplication(ctx context.Context, key string, replication int32) (_r int32, _err error)
	// Parameters:
	//  - Key
	//
	CreateStateInZookeeper(ctx context.Context, key string) (_err error)
	BeginFileUpload(ctx context.Context) (_r string, _err error)
	// Parameters:
	//  - Location
	//  - Chunk
	//
	UploadChunk(ctx context.Context, location string, chunk []byte) (_err error)
	// Parameters:
	//  - Location
	//
	FinishFileUpload(ctx context.Context, location string) (_err error)
	// Parameters:
	//  - ID
	//
	DownloadChunk(ctx context.Context, id string) (_r []byte, _err error)
	GetNimbusConf(ctx context.Context) (_r string, _err error)
	GetClusterInfo(ctx context.Context) (_r *ClusterSummary, _err error)
	GetTopologySummaries(ctx context.Context) (_r []*TopologySummary, _err error)
	// Parameters:
	//  - Name
	//
	GetTopologySummaryByName(ctx context.Context, name string) (_r *TopologySummary, _err error)
	// Parameters:
	//  - ID
	//
	GetTopologySummary(ctx context.Context, id string) (_r *TopologySummary, _err error)
	GetLeader(ctx context.Context) (_r *NimbusSummary, _err error)
	// Parameters:
	//  - Name
	//
	IsTopologyNameAllowed(ctx context.Context, name string) (_r bool, _err error)
	// Parameters:
	//  - Name
	//
	GetTopologyInfoByName(ctx context.Context, name string) (_r *TopologyInfo, _err error)
	// Parameters:
	//  - ID
	//
	GetTopologyInfo(ctx context.Context, id string) (_r *TopologyInfo, _err error)
	// Parameters:
	//  - Name
	//  - Options
	//
	GetTopologyInfoByNameWithOpts(ctx context.Context, name string, options *GetInfoOptions) (_r *TopologyInfo, _err error)
	// Parameters:
	//  - ID
	//  - Options
	//
	GetTopologyInfoWithOpts(ctx context.Context, id string, options *GetInfoOptions) (_r *TopologyInfo, _err error)
	// Parameters:
	//  - ID
	//  - Window
	//  - IsIncludeSys
	//
	GetTopologyPageInfo(ctx context.Context, id string, window string, is_include_sys bool) (_r *TopologyPageInfo, _err error)
	// Parameters:
	//  - ID
	//  - Host
	//  - IsIncludeSys
	//
	GetSupervisorPageInfo(ctx context.Context, id string, host string, is_include_sys bool) (_r *SupervisorPageInfo, _err error)
	// Parameters:
	//  - TopologyID
	//  - ComponentID
	//  - Window
	//  - IsIncludeSys
	//
	GetComponentPageInfo(ctx context.Context, topology_id string, component_id string, window string, is_include_sys bool) (_r *ComponentPageInfo, _err error)
	// Parameters:
	//  - ID
	//
	GetTopologyConf(ctx context.Context, id string) (_r string, _err error)
	// Returns the compiled topology that contains ackers and metrics consumsers. Compare {@link #getUserTopology(String id)}.
	//
	// Parameters:
	//  - ID
	//
	GetTopology(ctx context.Context, id string) (_r *StormTopology, _err error)
	// Returns the user specified topology as submitted originally. Compare {@link #getTopology(String id)}.
	//
	// Parameters:
	//  - ID
	//
	GetUserTopology(ctx context.Context, id string) (_r *StormTopology, _err error)
	// Parameters:
	//  - User
	//
	GetTopologyHistory(ctx context.Context, user string) (_r *TopologyHistoryInfo, _err error)
	// Parameters:
	//  - Owner
	//
	GetOwnerResourceSummaries(ctx context.Context, owner string) (_r []*OwnerResourceSummary, _err error)
	// Get assigned assignments for a specific supervisor
	//
	// Parameters:
	//  - Node
	//
	GetSupervisorAssignments(ctx context.Context, node string) (_r *SupervisorAssignments, _err error)
	// Send supervisor worker heartbeats for a specific supervisor
	//
	// Parameters:
	//  - Heartbeats
	//
	SendSupervisorWorkerHeartbeats(ctx context.Context, heartbeats *SupervisorWorkerHeartbeats) (_err error)
	// Send supervisor local worker heartbeat when a supervisor is unreachable
	//
	// Parameters:
	//  - Heatbeat
	//
	SendSupervisorWorkerHeartbeat(ctx context.Context, heatbeat *SupervisorWorkerHeartbeat) (_err error)
	// Parameters:
	//  - Metrics
	//
	ProcessWorkerMetrics(ctx context.Context, metrics *WorkerMetrics) (_err error)
	// Decide if the blob is removed from cluster.
	//
	// Parameters:
	//  - BlobKey
	//
	IsRemoteBlobExists(ctx context.Context, blobKey string) (_r bool, _err error)
}

type NimbusClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewNimbusClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *NimbusClient {
	return &NimbusClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewNimbusClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *NimbusClient {
	return &NimbusClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewNimbusClient(c thrift.TClient) *NimbusClient {
	return &NimbusClient{
		c: c,
	}
}

func (p *NimbusClient) Client_() thrift.TClient {
	return p.c
}

func (p *NimbusClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *NimbusClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//   - Name
//   - UploadedJarLocation
//   - JsonConf
//   - Topology
func (p *NimbusClient) SubmitTopology(ctx context.Context, name string, uploadedJarLocation string, jsonConf string, topology *StormTopology) (_err error) {
	var _args267 NimbusSubmitTopologyArgs
	_args267.Name = name
	_args267.UploadedJarLocation = uploadedJarLocation
	_args267.JsonConf = jsonConf
	_args267.Topology = topology
	var _result269 NimbusSubmitTopologyResult
	var _meta268 thrift.ResponseMeta
	_meta268, _err = p.Client_().Call(ctx, "submitTopology", &_args267, &_result269)
	p.SetLastResponseMeta_(_meta268)
	if _err != nil {
		return
	}
	switch {
	case _result269.E != nil:
		return _result269.E
	case _result269.Ite != nil:
		return _result269.Ite
	case _result269.Aze != nil:
		return _result269.Aze
	}

	return nil
}

// Parameters:
//   - Name
//   - UploadedJarLocation
//   - JsonConf
//   - Topology
//   - Options
func (p *NimbusClient) SubmitTopologyWithOpts(ctx context.Context, name string, uploadedJarLocation string, jsonConf string, topology *StormTopology, options *SubmitOptions) (_err error) {
	var _args270 NimbusSubmitTopologyWithOptsArgs
	_args270.Name = name
	_args270.UploadedJarLocation = uploadedJarLocation
	_args270.JsonConf = jsonConf
	_args270.Topology = topology
	_args270.Options = options
	var _result272 NimbusSubmitTopologyWithOptsResult
	var _meta271 thrift.ResponseMeta
	_meta271, _err = p.Client_().Call(ctx, "submitTopologyWithOpts", &_args270, &_result272)
	p.SetLastResponseMeta_(_meta271)
	if _err != nil {
		return
	}
	switch {
	case _result272.E != nil:
		return _result272.E
	case _result272.Ite != nil:
		return _result272.Ite
	case _result272.Aze != nil:
		return _result272.Aze
	}

	return nil
}

// Parameters:
//   - Name
func (p *NimbusClient) KillTopology(ctx context.Context, name string) (_err error) {
	var _args273 NimbusKillTopologyArgs
	_args273.Name = name
	var _result275 NimbusKillTopologyResult
	var _meta274 thrift.ResponseMeta
	_meta274, _err = p.Client_().Call(ctx, "killTopology", &_args273, &_result275)
	p.SetLastResponseMeta_(_meta274)
	if _err != nil {
		return
	}
	switch {
	case _result275.E != nil:
		return _result275.E
	case _result275.Aze != nil:
		return _result275.Aze
	}

	return nil
}

// Parameters:
//   - Name
//   - Options
func (p *NimbusClient) KillTopologyWithOpts(ctx context.Context, name string, options *KillOptions) (_err error) {
	var _args276 NimbusKillTopologyWithOptsArgs
	_args276.Name = name
	_args276.Options = options
	var _result278 NimbusKillTopologyWithOptsResult
	var _meta277 thrift.ResponseMeta
	_meta277, _err = p.Client_().Call(ctx, "killTopologyWithOpts", &_args276, &_result278)
	p.SetLastResponseMeta_(_meta277)
	if _err != nil {
		return
	}
	switch {
	case _result278.E != nil:
		return _result278.E
	case _result278.Aze != nil:
		return _result278.Aze
	}

	return nil
}

// Parameters:
//   - Name
func (p *NimbusClient) Activate(ctx context.Context, name string) (_err error) {
	var _args279 NimbusActivateArgs
	_args279.Name = name
	var _result281 NimbusActivateResult
	var _meta280 thrift.ResponseMeta
	_meta280, _err = p.Client_().Call(ctx, "activate", &_args279, &_result281)
	p.SetLastResponseMeta_(_meta280)
	if _err != nil {
		return
	}
	switch {
	case _result281.E != nil:
		return _result281.E
	case _result281.Aze != nil:
		return _result281.Aze
	}

	return nil
}

// Parameters:
//   - Name
func (p *NimbusClient) Deactivate(ctx context.Context, name string) (_err error) {
	var _args282 NimbusDeactivateArgs
	_args282.Name = name
	var _result284 NimbusDeactivateResult
	var _meta283 thrift.ResponseMeta
	_meta283, _err = p.Client_().Call(ctx, "deactivate", &_args282, &_result284)
	p.SetLastResponseMeta_(_meta283)
	if _err != nil {
		return
	}
	switch {
	case _result284.E != nil:
		return _result284.E
	case _result284.Aze != nil:
		return _result284.Aze
	}

	return nil
}

// Parameters:
//   - Name
//   - Options
func (p *NimbusClient) Rebalance(ctx context.Context, name string, options *RebalanceOptions) (_err error) {
	var _args285 NimbusRebalanceArgs
	_args285.Name = name
	_args285.Options = options
	var _result287 NimbusRebalanceResult
	var _meta286 thrift.ResponseMeta
	_meta286, _err = p.Client_().Call(ctx, "rebalance", &_args285, &_result287)
	p.SetLastResponseMeta_(_meta286)
	if _err != nil {
		return
	}
	switch {
	case _result287.E != nil:
		return _result287.E
	case _result287.Ite != nil:
		return _result287.Ite
	case _result287.Aze != nil:
		return _result287.Aze
	}

	return nil
}

// Parameters:
//   - Name
//   - Config
func (p *NimbusClient) SetLogConfig(ctx context.Context, name string, config *LogConfig) (_err error) {
	var _args288 NimbusSetLogConfigArgs
	_args288.Name = name
	_args288.Config = config
	var _result290 NimbusSetLogConfigResult
	var _meta289 thrift.ResponseMeta
	_meta289, _err = p.Client_().Call(ctx, "setLogConfig", &_args288, &_result290)
	p.SetLastResponseMeta_(_meta289)
	if _err != nil {
		return
	}
	return nil
}

// Parameters:
//   - Name
func (p *NimbusClient) GetLogConfig(ctx context.Context, name string) (_r *LogConfig, _err error) {
	var _args291 NimbusGetLogConfigArgs
	_args291.Name = name
	var _result293 NimbusGetLogConfigResult
	var _meta292 thrift.ResponseMeta
	_meta292, _err = p.Client_().Call(ctx, "getLogConfig", &_args291, &_result293)
	p.SetLastResponseMeta_(_meta292)
	if _err != nil {
		return
	}
	if _ret294 := _result293.GetSuccess(); _ret294 != nil {
		return _ret294, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getLogConfig failed: unknown result")
}

// Enable/disable logging the tuples generated in topology via an internal EventLogger bolt. The component name is optional
// and if null or empty, the debug flag will apply to the entire topology.
//
// The 'samplingPercentage' will limit loggging to a percentage of generated tuples.
//
// Parameters:
//   - Name
//   - Component
//   - Enable
//   - SamplingPercentage
func (p *NimbusClient) Debug(ctx context.Context, name string, component string, enable bool, samplingPercentage float64) (_err error) {
	var _args295 NimbusDebugArgs
	_args295.Name = name
	_args295.Component = component
	_args295.Enable = enable
	_args295.SamplingPercentage = samplingPercentage
	var _result297 NimbusDebugResult
	var _meta296 thrift.ResponseMeta
	_meta296, _err = p.Client_().Call(ctx, "debug", &_args295, &_result297)
	p.SetLastResponseMeta_(_meta296)
	if _err != nil {
		return
	}
	switch {
	case _result297.E != nil:
		return _result297.E
	case _result297.Aze != nil:
		return _result297.Aze
	}

	return nil
}

// Parameters:
//   - ID
//   - ProfileRequest
func (p *NimbusClient) SetWorkerProfiler(ctx context.Context, id string, profileRequest *ProfileRequest) (_err error) {
	var _args298 NimbusSetWorkerProfilerArgs
	_args298.ID = id
	_args298.ProfileRequest = profileRequest
	var _result300 NimbusSetWorkerProfilerResult
	var _meta299 thrift.ResponseMeta
	_meta299, _err = p.Client_().Call(ctx, "setWorkerProfiler", &_args298, &_result300)
	p.SetLastResponseMeta_(_meta299)
	if _err != nil {
		return
	}
	return nil
}

// Parameters:
//   - ID
//   - ComponentID
//   - Action
func (p *NimbusClient) GetComponentPendingProfileActions(ctx context.Context, id string, component_id string, action ProfileAction) (_r []*ProfileRequest, _err error) {
	var _args301 NimbusGetComponentPendingProfileActionsArgs
	_args301.ID = id
	_args301.ComponentID = component_id
	_args301.Action = action
	var _result303 NimbusGetComponentPendingProfileActionsResult
	var _meta302 thrift.ResponseMeta
	_meta302, _err = p.Client_().Call(ctx, "getComponentPendingProfileActions", &_args301, &_result303)
	p.SetLastResponseMeta_(_meta302)
	if _err != nil {
		return
	}
	return _result303.GetSuccess(), nil
}

// Parameters:
//   - Name
//   - Creds
func (p *NimbusClient) UploadNewCredentials(ctx context.Context, name string, creds *Credentials) (_err error) {
	var _args304 NimbusUploadNewCredentialsArgs
	_args304.Name = name
	_args304.Creds = creds
	var _result306 NimbusUploadNewCredentialsResult
	var _meta305 thrift.ResponseMeta
	_meta305, _err = p.Client_().Call(ctx, "uploadNewCredentials", &_args304, &_result306)
	p.SetLastResponseMeta_(_meta305)
	if _err != nil {
		return
	}
	switch {
	case _result306.E != nil:
		return _result306.E
	case _result306.Ite != nil:
		return _result306.Ite
	case _result306.Aze != nil:
		return _result306.Aze
	}

	return nil
}

// Parameters:
//   - Key
//   - Meta
func (p *NimbusClient) BeginCreateBlob(ctx context.Context, key string, meta *SettableBlobMeta) (_r string, _err error) {
	var _args307 NimbusBeginCreateBlobArgs
	_args307.Key = key
	_args307.Meta = meta
	var _result309 NimbusBeginCreateBlobResult
	var _meta308 thrift.ResponseMeta
	_meta308, _err = p.Client_().Call(ctx, "beginCreateBlob", &_args307, &_result309)
	p.SetLastResponseMeta_(_meta308)
	if _err != nil {
		return
	}
	switch {
	case _result309.Aze != nil:
		return _r, _result309.Aze
	case _result309.Kae != nil:
		return _r, _result309.Kae
	}

	return _result309.GetSuccess(), nil
}

// Parameters:
//   - Key
func (p *NimbusClient) BeginUpdateBlob(ctx context.Context, key string) (_r string, _err error) {
	var _args310 NimbusBeginUpdateBlobArgs
	_args310.Key = key
	var _result312 NimbusBeginUpdateBlobResult
	var _meta311 thrift.ResponseMeta
	_meta311, _err = p.Client_().Call(ctx, "beginUpdateBlob", &_args310, &_result312)
	p.SetLastResponseMeta_(_meta311)
	if _err != nil {
		return
	}
	switch {
	case _result312.Aze != nil:
		return _r, _result312.Aze
	case _result312.Knf != nil:
		return _r, _result312.Knf
	}

	return _result312.GetSuccess(), nil
}

// Parameters:
//   - Session
//   - Chunk
func (p *NimbusClient) UploadBlobChunk(ctx context.Context, session string, chunk []byte) (_err error) {
	var _args313 NimbusUploadBlobChunkArgs
	_args313.Session = session
	_args313.Chunk = chunk
	var _result315 NimbusUploadBlobChunkResult
	var _meta314 thrift.ResponseMeta
	_meta314, _err = p.Client_().Call(ctx, "uploadBlobChunk", &_args313, &_result315)
	p.SetLastResponseMeta_(_meta314)
	if _err != nil {
		return
	}
	switch {
	case _result315.Aze != nil:
		return _result315.Aze
	}

	return nil
}

// Parameters:
//   - Session
func (p *NimbusClient) FinishBlobUpload(ctx context.Context, session string) (_err error) {
	var _args316 NimbusFinishBlobUploadArgs
	_args316.Session = session
	var _result318 NimbusFinishBlobUploadResult
	var _meta317 thrift.ResponseMeta
	_meta317, _err = p.Client_().Call(ctx, "finishBlobUpload", &_args316, &_result318)
	p.SetLastResponseMeta_(_meta317)
	if _err != nil {
		return
	}
	switch {
	case _result318.Aze != nil:
		return _result318.Aze
	}

	return nil
}

// Parameters:
//   - Session
func (p *NimbusClient) CancelBlobUpload(ctx context.Context, session string) (_err error) {
	var _args319 NimbusCancelBlobUploadArgs
	_args319.Session = session
	var _result321 NimbusCancelBlobUploadResult
	var _meta320 thrift.ResponseMeta
	_meta320, _err = p.Client_().Call(ctx, "cancelBlobUpload", &_args319, &_result321)
	p.SetLastResponseMeta_(_meta320)
	if _err != nil {
		return
	}
	switch {
	case _result321.Aze != nil:
		return _result321.Aze
	}

	return nil
}

// Parameters:
//   - Key
func (p *NimbusClient) GetBlobMeta(ctx context.Context, key string) (_r *ReadableBlobMeta, _err error) {
	var _args322 NimbusGetBlobMetaArgs
	_args322.Key = key
	var _result324 NimbusGetBlobMetaResult
	var _meta323 thrift.ResponseMeta
	_meta323, _err = p.Client_().Call(ctx, "getBlobMeta", &_args322, &_result324)
	p.SetLastResponseMeta_(_meta323)
	if _err != nil {
		return
	}
	switch {
	case _result324.Aze != nil:
		return _r, _result324.Aze
	case _result324.Knf != nil:
		return _r, _result324.Knf
	}

	if _ret325 := _result324.GetSuccess(); _ret325 != nil {
		return _ret325, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getBlobMeta failed: unknown result")
}

// Parameters:
//   - Key
//   - Meta
func (p *NimbusClient) SetBlobMeta(ctx context.Context, key string, meta *SettableBlobMeta) (_err error) {
	var _args326 NimbusSetBlobMetaArgs
	_args326.Key = key
	_args326.Meta = meta
	var _result328 NimbusSetBlobMetaResult
	var _meta327 thrift.ResponseMeta
	_meta327, _err = p.Client_().Call(ctx, "setBlobMeta", &_args326, &_result328)
	p.SetLastResponseMeta_(_meta327)
	if _err != nil {
		return
	}
	switch {
	case _result328.Aze != nil:
		return _result328.Aze
	case _result328.Knf != nil:
		return _result328.Knf
	}

	return nil
}

// Parameters:
//   - Key
func (p *NimbusClient) BeginBlobDownload(ctx context.Context, key string) (_r *BeginDownloadResult_, _err error) {
	var _args329 NimbusBeginBlobDownloadArgs
	_args329.Key = key
	var _result331 NimbusBeginBlobDownloadResult
	var _meta330 thrift.ResponseMeta
	_meta330, _err = p.Client_().Call(ctx, "beginBlobDownload", &_args329, &_result331)
	p.SetLastResponseMeta_(_meta330)
	if _err != nil {
		return
	}
	switch {
	case _result331.Aze != nil:
		return _r, _result331.Aze
	case _result331.Knf != nil:
		return _r, _result331.Knf
	}

	if _ret332 := _result331.GetSuccess(); _ret332 != nil {
		return _ret332, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "beginBlobDownload failed: unknown result")
}

// Parameters:
//   - Session
func (p *NimbusClient) DownloadBlobChunk(ctx context.Context, session string) (_r []byte, _err error) {
	var _args333 NimbusDownloadBlobChunkArgs
	_args333.Session = session
	var _result335 NimbusDownloadBlobChunkResult
	var _meta334 thrift.ResponseMeta
	_meta334, _err = p.Client_().Call(ctx, "downloadBlobChunk", &_args333, &_result335)
	p.SetLastResponseMeta_(_meta334)
	if _err != nil {
		return
	}
	switch {
	case _result335.Aze != nil:
		return _r, _result335.Aze
	}

	return _result335.GetSuccess(), nil
}

// Parameters:
//   - Key
func (p *NimbusClient) DeleteBlob(ctx context.Context, key string) (_err error) {
	var _args336 NimbusDeleteBlobArgs
	_args336.Key = key
	var _result338 NimbusDeleteBlobResult
	var _meta337 thrift.ResponseMeta
	_meta337, _err = p.Client_().Call(ctx, "deleteBlob", &_args336, &_result338)
	p.SetLastResponseMeta_(_meta337)
	if _err != nil {
		return
	}
	switch {
	case _result338.Aze != nil:
		return _result338.Aze
	case _result338.Knf != nil:
		return _result338.Knf
	case _result338.Ise != nil:
		return _result338.Ise
	}

	return nil
}

// Parameters:
//   - Session
func (p *NimbusClient) ListBlobs(ctx context.Context, session string) (_r *ListBlobsResult_, _err error) {
	var _args339 NimbusListBlobsArgs
	_args339.Session = session
	var _result341 NimbusListBlobsResult
	var _meta340 thrift.ResponseMeta
	_meta340, _err = p.Client_().Call(ctx, "listBlobs", &_args339, &_result341)
	p.SetLastResponseMeta_(_meta340)
	if _err != nil {
		return
	}
	if _ret342 := _result341.GetSuccess(); _ret342 != nil {
		return _ret342, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listBlobs failed: unknown result")
}

// Parameters:
//   - Key
func (p *NimbusClient) GetBlobReplication(ctx context.Context, key string) (_r int32, _err error) {
	var _args343 NimbusGetBlobReplicationArgs
	_args343.Key = key
	var _result345 NimbusGetBlobReplicationResult
	var _meta344 thrift.ResponseMeta
	_meta344, _err = p.Client_().Call(ctx, "getBlobReplication", &_args343, &_result345)
	p.SetLastResponseMeta_(_meta344)
	if _err != nil {
		return
	}
	switch {
	case _result345.Aze != nil:
		return _r, _result345.Aze
	case _result345.Knf != nil:
		return _r, _result345.Knf
	}

	return _result345.GetSuccess(), nil
}

// Parameters:
//   - Key
//   - Replication
func (p *NimbusClient) UpdateBlobReplication(ctx context.Context, key string, replication int32) (_r int32, _err error) {
	var _args346 NimbusUpdateBlobReplicationArgs
	_args346.Key = key
	_args346.Replication = replication
	var _result348 NimbusUpdateBlobReplicationResult
	var _meta347 thrift.ResponseMeta
	_meta347, _err = p.Client_().Call(ctx, "updateBlobReplication", &_args346, &_result348)
	p.SetLastResponseMeta_(_meta347)
	if _err != nil {
		return
	}
	switch {
	case _result348.Aze != nil:
		return _r, _result348.Aze
	case _result348.Knf != nil:
		return _r, _result348.Knf
	}

	return _result348.GetSuccess(), nil
}

// Parameters:
//   - Key
func (p *NimbusClient) CreateStateInZookeeper(ctx context.Context, key string) (_err error) {
	var _args349 NimbusCreateStateInZookeeperArgs
	_args349.Key = key
	var _result351 NimbusCreateStateInZookeeperResult
	var _meta350 thrift.ResponseMeta
	_meta350, _err = p.Client_().Call(ctx, "createStateInZookeeper", &_args349, &_result351)
	p.SetLastResponseMeta_(_meta350)
	if _err != nil {
		return
	}
	return nil
}

func (p *NimbusClient) BeginFileUpload(ctx context.Context) (_r string, _err error) {
	var _args352 NimbusBeginFileUploadArgs
	var _result354 NimbusBeginFileUploadResult
	var _meta353 thrift.ResponseMeta
	_meta353, _err = p.Client_().Call(ctx, "beginFileUpload", &_args352, &_result354)
	p.SetLastResponseMeta_(_meta353)
	if _err != nil {
		return
	}
	switch {
	case _result354.Aze != nil:
		return _r, _result354.Aze
	}

	return _result354.GetSuccess(), nil
}

// Parameters:
//   - Location
//   - Chunk
func (p *NimbusClient) UploadChunk(ctx context.Context, location string, chunk []byte) (_err error) {
	var _args355 NimbusUploadChunkArgs
	_args355.Location = location
	_args355.Chunk = chunk
	var _result357 NimbusUploadChunkResult
	var _meta356 thrift.ResponseMeta
	_meta356, _err = p.Client_().Call(ctx, "uploadChunk", &_args355, &_result357)
	p.SetLastResponseMeta_(_meta356)
	if _err != nil {
		return
	}
	switch {
	case _result357.Aze != nil:
		return _result357.Aze
	}

	return nil
}

// Parameters:
//   - Location
func (p *NimbusClient) FinishFileUpload(ctx context.Context, location string) (_err error) {
	var _args358 NimbusFinishFileUploadArgs
	_args358.Location = location
	var _result360 NimbusFinishFileUploadResult
	var _meta359 thrift.ResponseMeta
	_meta359, _err = p.Client_().Call(ctx, "finishFileUpload", &_args358, &_result360)
	p.SetLastResponseMeta_(_meta359)
	if _err != nil {
		return
	}
	switch {
	case _result360.Aze != nil:
		return _result360.Aze
	}

	return nil
}

// Parameters:
//   - ID
func (p *NimbusClient) DownloadChunk(ctx context.Context, id string) (_r []byte, _err error) {
	var _args361 NimbusDownloadChunkArgs
	_args361.ID = id
	var _result363 NimbusDownloadChunkResult
	var _meta362 thrift.ResponseMeta
	_meta362, _err = p.Client_().Call(ctx, "downloadChunk", &_args361, &_result363)
	p.SetLastResponseMeta_(_meta362)
	if _err != nil {
		return
	}
	switch {
	case _result363.Aze != nil:
		return _r, _result363.Aze
	}

	return _result363.GetSuccess(), nil
}

func (p *NimbusClient) GetNimbusConf(ctx context.Context) (_r string, _err error) {
	var _args364 NimbusGetNimbusConfArgs
	var _result366 NimbusGetNimbusConfResult
	var _meta365 thrift.ResponseMeta
	_meta365, _err = p.Client_().Call(ctx, "getNimbusConf", &_args364, &_result366)
	p.SetLastResponseMeta_(_meta365)
	if _err != nil {
		return
	}
	switch {
	case _result366.Aze != nil:
		return _r, _result366.Aze
	}

	return _result366.GetSuccess(), nil
}

func (p *NimbusClient) GetClusterInfo(ctx context.Context) (_r *ClusterSummary, _err error) {
	var _args367 NimbusGetClusterInfoArgs
	var _result369 NimbusGetClusterInfoResult
	var _meta368 thrift.ResponseMeta
	_meta368, _err = p.Client_().Call(ctx, "getClusterInfo", &_args367, &_result369)
	p.SetLastResponseMeta_(_meta368)
	if _err != nil {
		return
	}
	switch {
	case _result369.Aze != nil:
		return _r, _result369.Aze
	}

	if _ret370 := _result369.GetSuccess(); _ret370 != nil {
		return _ret370, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getClusterInfo failed: unknown result")
}

func (p *NimbusClient) GetTopologySummaries(ctx context.Context) (_r []*TopologySummary, _err error) {
	var _args371 NimbusGetTopologySummariesArgs
	var _result373 NimbusGetTopologySummariesResult
	var _meta372 thrift.ResponseMeta
	_meta372, _err = p.Client_().Call(ctx, "getTopologySummaries", &_args371, &_result373)
	p.SetLastResponseMeta_(_meta372)
	if _err != nil {
		return
	}
	switch {
	case _result373.Aze != nil:
		return _r, _result373.Aze
	}

	return _result373.GetSuccess(), nil
}

// Parameters:
//   - Name
func (p *NimbusClient) GetTopologySummaryByName(ctx context.Context, name string) (_r *TopologySummary, _err error) {
	var _args374 NimbusGetTopologySummaryByNameArgs
	_args374.Name = name
	var _result376 NimbusGetTopologySummaryByNameResult
	var _meta375 thrift.ResponseMeta
	_meta375, _err = p.Client_().Call(ctx, "getTopologySummaryByName", &_args374, &_result376)
	p.SetLastResponseMeta_(_meta375)
	if _err != nil {
		return
	}
	switch {
	case _result376.E != nil:
		return _r, _result376.E
	case _result376.Aze != nil:
		return _r, _result376.Aze
	}

	if _ret377 := _result376.GetSuccess(); _ret377 != nil {
		return _ret377, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getTopologySummaryByName failed: unknown result")
}

// Parameters:
//   - ID
func (p *NimbusClient) GetTopologySummary(ctx context.Context, id string) (_r *TopologySummary, _err error) {
	var _args378 NimbusGetTopologySummaryArgs
	_args378.ID = id
	var _result380 NimbusGetTopologySummaryResult
	var _meta379 thrift.ResponseMeta
	_meta379, _err = p.Client_().Call(ctx, "getTopologySummary", &_args378, &_result380)
	p.SetLastResponseMeta_(_meta379)
	if _err != nil {
		return
	}
	switch {
	case _result380.E != nil:
		return _r, _result380.E
	case _result380.Aze != nil:
		return _r, _result380.Aze
	}

	if _ret381 := _result380.GetSuccess(); _ret381 != nil {
		return _ret381, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getTopologySummary failed: unknown result")
}

func (p *NimbusClient) GetLeader(ctx context.Context) (_r *NimbusSummary, _err error) {
	var _args382 NimbusGetLeaderArgs
	var _result384 NimbusGetLeaderResult
	var _meta383 thrift.ResponseMeta
	_meta383, _err = p.Client_().Call(ctx, "getLeader", &_args382, &_result384)
	p.SetLastResponseMeta_(_meta383)
	if _err != nil {
		return
	}
	switch {
	case _result384.Aze != nil:
		return _r, _result384.Aze
	}

	if _ret385 := _result384.GetSuccess(); _ret385 != nil {
		return _ret385, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getLeader failed: unknown result")
}

// Parameters:
//   - Name
func (p *NimbusClient) IsTopologyNameAllowed(ctx context.Context, name string) (_r bool, _err error) {
	var _args386 NimbusIsTopologyNameAllowedArgs
	_args386.Name = name
	var _result388 NimbusIsTopologyNameAllowedResult
	var _meta387 thrift.ResponseMeta
	_meta387, _err = p.Client_().Call(ctx, "isTopologyNameAllowed", &_args386, &_result388)
	p.SetLastResponseMeta_(_meta387)
	if _err != nil {
		return
	}
	switch {
	case _result388.Aze != nil:
		return _r, _result388.Aze
	}

	return _result388.GetSuccess(), nil
}

// Parameters:
//   - Name
func (p *NimbusClient) GetTopologyInfoByName(ctx context.Context, name string) (_r *TopologyInfo, _err error) {
	var _args389 NimbusGetTopologyInfoByNameArgs
	_args389.Name = name
	var _result391 NimbusGetTopologyInfoByNameResult
	var _meta390 thrift.ResponseMeta
	_meta390, _err = p.Client_().Call(ctx, "getTopologyInfoByName", &_args389, &_result391)
	p.SetLastResponseMeta_(_meta390)
	if _err != nil {
		return
	}
	switch {
	case _result391.E != nil:
		return _r, _result391.E
	case _result391.Aze != nil:
		return _r, _result391.Aze
	}

	if _ret392 := _result391.GetSuccess(); _ret392 != nil {
		return _ret392, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getTopologyInfoByName failed: unknown result")
}

// Parameters:
//   - ID
func (p *NimbusClient) GetTopologyInfo(ctx context.Context, id string) (_r *TopologyInfo, _err error) {
	var _args393 NimbusGetTopologyInfoArgs
	_args393.ID = id
	var _result395 NimbusGetTopologyInfoResult
	var _meta394 thrift.ResponseMeta
	_meta394, _err = p.Client_().Call(ctx, "getTopologyInfo", &_args393, &_result395)
	p.SetLastResponseMeta_(_meta394)
	if _err != nil {
		return
	}
	switch {
	case _result395.E != nil:
		return _r, _result395.E
	case _result395.Aze != nil:
		return _r, _result395.Aze
	}

	if _ret396 := _result395.GetSuccess(); _ret396 != nil {
		return _ret396, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getTopologyInfo failed: unknown result")
}

// Parameters:
//   - Name
//   - Options
func (p *NimbusClient) GetTopologyInfoByNameWithOpts(ctx context.Context, name string, options *GetInfoOptions) (_r *TopologyInfo, _err error) {
	var _args397 NimbusGetTopologyInfoByNameWithOptsArgs
	_args397.Name = name
	_args397.Options = options
	var _result399 NimbusGetTopologyInfoByNameWithOptsResult
	var _meta398 thrift.ResponseMeta
	_meta398, _err = p.Client_().Call(ctx, "getTopologyInfoByNameWithOpts", &_args397, &_result399)
	p.SetLastResponseMeta_(_meta398)
	if _err != nil {
		return
	}
	switch {
	case _result399.E != nil:
		return _r, _result399.E
	case _result399.Aze != nil:
		return _r, _result399.Aze
	}

	if _ret400 := _result399.GetSuccess(); _ret400 != nil {
		return _ret400, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getTopologyInfoByNameWithOpts failed: unknown result")
}

// Parameters:
//   - ID
//   - Options
func (p *NimbusClient) GetTopologyInfoWithOpts(ctx context.Context, id string, options *GetInfoOptions) (_r *TopologyInfo, _err error) {
	var _args401 NimbusGetTopologyInfoWithOptsArgs
	_args401.ID = id
	_args401.Options = options
	var _result403 NimbusGetTopologyInfoWithOptsResult
	var _meta402 thrift.ResponseMeta
	_meta402, _err = p.Client_().Call(ctx, "getTopologyInfoWithOpts", &_args401, &_result403)
	p.SetLastResponseMeta_(_meta402)
	if _err != nil {
		return
	}
	switch {
	case _result403.E != nil:
		return _r, _result403.E
	case _result403.Aze != nil:
		return _r, _result403.Aze
	}

	if _ret404 := _result403.GetSuccess(); _ret404 != nil {
		return _ret404, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getTopologyInfoWithOpts failed: unknown result")
}

// Parameters:
//   - ID
//   - Window
//   - IsIncludeSys
func (p *NimbusClient) GetTopologyPageInfo(ctx context.Context, id string, window string, is_include_sys bool) (_r *TopologyPageInfo, _err error) {
	var _args405 NimbusGetTopologyPageInfoArgs
	_args405.ID = id
	_args405.Window = window
	_args405.IsIncludeSys = is_include_sys
	var _result407 NimbusGetTopologyPageInfoResult
	var _meta406 thrift.ResponseMeta
	_meta406, _err = p.Client_().Call(ctx, "getTopologyPageInfo", &_args405, &_result407)
	p.SetLastResponseMeta_(_meta406)
	if _err != nil {
		return
	}
	switch {
	case _result407.E != nil:
		return _r, _result407.E
	case _result407.Aze != nil:
		return _r, _result407.Aze
	}

	if _ret408 := _result407.GetSuccess(); _ret408 != nil {
		return _ret408, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getTopologyPageInfo failed: unknown result")
}

// Parameters:
//   - ID
//   - Host
//   - IsIncludeSys
func (p *NimbusClient) GetSupervisorPageInfo(ctx context.Context, id string, host string, is_include_sys bool) (_r *SupervisorPageInfo, _err error) {
	var _args409 NimbusGetSupervisorPageInfoArgs
	_args409.ID = id
	_args409.Host = host
	_args409.IsIncludeSys = is_include_sys
	var _result411 NimbusGetSupervisorPageInfoResult
	var _meta410 thrift.ResponseMeta
	_meta410, _err = p.Client_().Call(ctx, "getSupervisorPageInfo", &_args409, &_result411)
	p.SetLastResponseMeta_(_meta410)
	if _err != nil {
		return
	}
	switch {
	case _result411.E != nil:
		return _r, _result411.E
	case _result411.Aze != nil:
		return _r, _result411.Aze
	}

	if _ret412 := _result411.GetSuccess(); _ret412 != nil {
		return _ret412, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getSupervisorPageInfo failed: unknown result")
}

// Parameters:
//   - TopologyID
//   - ComponentID
//   - Window
//   - IsIncludeSys
func (p *NimbusClient) GetComponentPageInfo(ctx context.Context, topology_id string, component_id string, window string, is_include_sys bool) (_r *ComponentPageInfo, _err error) {
	var _args413 NimbusGetComponentPageInfoArgs
	_args413.TopologyID = topology_id
	_args413.ComponentID = component_id
	_args413.Window = window
	_args413.IsIncludeSys = is_include_sys
	var _result415 NimbusGetComponentPageInfoResult
	var _meta414 thrift.ResponseMeta
	_meta414, _err = p.Client_().Call(ctx, "getComponentPageInfo", &_args413, &_result415)
	p.SetLastResponseMeta_(_meta414)
	if _err != nil {
		return
	}
	switch {
	case _result415.E != nil:
		return _r, _result415.E
	case _result415.Aze != nil:
		return _r, _result415.Aze
	}

	if _ret416 := _result415.GetSuccess(); _ret416 != nil {
		return _ret416, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getComponentPageInfo failed: unknown result")
}

// Parameters:
//   - ID
func (p *NimbusClient) GetTopologyConf(ctx context.Context, id string) (_r string, _err error) {
	var _args417 NimbusGetTopologyConfArgs
	_args417.ID = id
	var _result419 NimbusGetTopologyConfResult
	var _meta418 thrift.ResponseMeta
	_meta418, _err = p.Client_().Call(ctx, "getTopologyConf", &_args417, &_result419)
	p.SetLastResponseMeta_(_meta418)
	if _err != nil {
		return
	}
	switch {
	case _result419.E != nil:
		return _r, _result419.E
	case _result419.Aze != nil:
		return _r, _result419.Aze
	}

	return _result419.GetSuccess(), nil
}

// Returns the compiled topology that contains ackers and metrics consumsers. Compare {@link #getUserTopology(String id)}.
//
// Parameters:
//   - ID
func (p *NimbusClient) GetTopology(ctx context.Context, id string) (_r *StormTopology, _err error) {
	var _args420 NimbusGetTopologyArgs
	_args420.ID = id
	var _result422 NimbusGetTopologyResult
	var _meta421 thrift.ResponseMeta
	_meta421, _err = p.Client_().Call(ctx, "getTopology", &_args420, &_result422)
	p.SetLastResponseMeta_(_meta421)
	if _err != nil {
		return
	}
	switch {
	case _result422.E != nil:
		return _r, _result422.E
	case _result422.Aze != nil:
		return _r, _result422.Aze
	}

	if _ret423 := _result422.GetSuccess(); _ret423 != nil {
		return _ret423, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getTopology failed: unknown result")
}

// Returns the user specified topology as submitted originally. Compare {@link #getTopology(String id)}.
//
// Parameters:
//   - ID
func (p *NimbusClient) GetUserTopology(ctx context.Context, id string) (_r *StormTopology, _err error) {
	var _args424 NimbusGetUserTopologyArgs
	_args424.ID = id
	var _result426 NimbusGetUserTopologyResult
	var _meta425 thrift.ResponseMeta
	_meta425, _err = p.Client_().Call(ctx, "getUserTopology", &_args424, &_result426)
	p.SetLastResponseMeta_(_meta425)
	if _err != nil {
		return
	}
	switch {
	case _result426.E != nil:
		return _r, _result426.E
	case _result426.Aze != nil:
		return _r, _result426.Aze
	}

	if _ret427 := _result426.GetSuccess(); _ret427 != nil {
		return _ret427, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getUserTopology failed: unknown result")
}

// Parameters:
//   - User
func (p *NimbusClient) GetTopologyHistory(ctx context.Context, user string) (_r *TopologyHistoryInfo, _err error) {
	var _args428 NimbusGetTopologyHistoryArgs
	_args428.User = user
	var _result430 NimbusGetTopologyHistoryResult
	var _meta429 thrift.ResponseMeta
	_meta429, _err = p.Client_().Call(ctx, "getTopologyHistory", &_args428, &_result430)
	p.SetLastResponseMeta_(_meta429)
	if _err != nil {
		return
	}
	switch {
	case _result430.Aze != nil:
		return _r, _result430.Aze
	}

	if _ret431 := _result430.GetSuccess(); _ret431 != nil {
		return _ret431, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getTopologyHistory failed: unknown result")
}

// Parameters:
//   - Owner
func (p *NimbusClient) GetOwnerResourceSummaries(ctx context.Context, owner string) (_r []*OwnerResourceSummary, _err error) {
	var _args432 NimbusGetOwnerResourceSummariesArgs
	_args432.Owner = owner
	var _result434 NimbusGetOwnerResourceSummariesResult
	var _meta433 thrift.ResponseMeta
	_meta433, _err = p.Client_().Call(ctx, "getOwnerResourceSummaries", &_args432, &_result434)
	p.SetLastResponseMeta_(_meta433)
	if _err != nil {
		return
	}
	switch {
	case _result434.Aze != nil:
		return _r, _result434.Aze
	}

	return _result434.GetSuccess(), nil
}

// Get assigned assignments for a specific supervisor
//
// Parameters:
//   - Node
func (p *NimbusClient) GetSupervisorAssignments(ctx context.Context, node string) (_r *SupervisorAssignments, _err error) {
	var _args435 NimbusGetSupervisorAssignmentsArgs
	_args435.Node = node
	var _result437 NimbusGetSupervisorAssignmentsResult
	var _meta436 thrift.ResponseMeta
	_meta436, _err = p.Client_().Call(ctx, "getSupervisorAssignments", &_args435, &_result437)
	p.SetLastResponseMeta_(_meta436)
	if _err != nil {
		return
	}
	switch {
	case _result437.Aze != nil:
		return _r, _result437.Aze
	}

	if _ret438 := _result437.GetSuccess(); _ret438 != nil {
		return _ret438, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getSupervisorAssignments failed: unknown result")
}

// Send supervisor worker heartbeats for a specific supervisor
//
// Parameters:
//   - Heartbeats
func (p *NimbusClient) SendSupervisorWorkerHeartbeats(ctx context.Context, heartbeats *SupervisorWorkerHeartbeats) (_err error) {
	var _args439 NimbusSendSupervisorWorkerHeartbeatsArgs
	_args439.Heartbeats = heartbeats
	var _result441 NimbusSendSupervisorWorkerHeartbeatsResult
	var _meta440 thrift.ResponseMeta
	_meta440, _err = p.Client_().Call(ctx, "sendSupervisorWorkerHeartbeats", &_args439, &_result441)
	p.SetLastResponseMeta_(_meta440)
	if _err != nil {
		return
	}
	switch {
	case _result441.Aze != nil:
		return _result441.Aze
	}

	return nil
}

// Send supervisor local worker heartbeat when a supervisor is unreachable
//
// Parameters:
//   - Heatbeat
func (p *NimbusClient) SendSupervisorWorkerHeartbeat(ctx context.Context, heatbeat *SupervisorWorkerHeartbeat) (_err error) {
	var _args442 NimbusSendSupervisorWorkerHeartbeatArgs
	_args442.Heatbeat = heatbeat
	var _result444 NimbusSendSupervisorWorkerHeartbeatResult
	var _meta443 thrift.ResponseMeta
	_meta443, _err = p.Client_().Call(ctx, "sendSupervisorWorkerHeartbeat", &_args442, &_result444)
	p.SetLastResponseMeta_(_meta443)
	if _err != nil {
		return
	}
	switch {
	case _result444.Aze != nil:
		return _result444.Aze
	case _result444.E != nil:
		return _result444.E
	}

	return nil
}

// Parameters:
//   - Metrics
func (p *NimbusClient) ProcessWorkerMetrics(ctx context.Context, metrics *WorkerMetrics) (_err error) {
	var _args445 NimbusProcessWorkerMetricsArgs
	_args445.Metrics = metrics
	var _result447 NimbusProcessWorkerMetricsResult
	var _meta446 thrift.ResponseMeta
	_meta446, _err = p.Client_().Call(ctx, "processWorkerMetrics", &_args445, &_result447)
	p.SetLastResponseMeta_(_meta446)
	if _err != nil {
		return
	}
	return nil
}

// Decide if the blob is removed from cluster.
//
// Parameters:
//   - BlobKey
func (p *NimbusClient) IsRemoteBlobExists(ctx context.Context, blobKey string) (_r bool, _err error) {
	var _args448 NimbusIsRemoteBlobExistsArgs
	_args448.BlobKey = blobKey
	var _result450 NimbusIsRemoteBlobExistsResult
	var _meta449 thrift.ResponseMeta
	_meta449, _err = p.Client_().Call(ctx, "isRemoteBlobExists", &_args448, &_result450)
	p.SetLastResponseMeta_(_meta449)
	if _err != nil {
		return
	}
	switch {
	case _result450.Aze != nil:
		return _r, _result450.Aze
	}

	return _result450.GetSuccess(), nil
}

type NimbusProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Nimbus
}

func (p *NimbusProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *NimbusProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *NimbusProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewNimbusProcessor(handler Nimbus) *NimbusProcessor {

	self451 := &NimbusProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self451.processorMap["submitTopology"] = &nimbusProcessorSubmitTopology{handler: handler}
	self451.processorMap["submitTopologyWithOpts"] = &nimbusProcessorSubmitTopologyWithOpts{handler: handler}
	self451.processorMap["killTopology"] = &nimbusProcessorKillTopology{handler: handler}
	self451.processorMap["killTopologyWithOpts"] = &nimbusProcessorKillTopologyWithOpts{handler: handler}
	self451.processorMap["activate"] = &nimbusProcessorActivate{handler: handler}
	self451.processorMap["deactivate"] = &nimbusProcessorDeactivate{handler: handler}
	self451.processorMap["rebalance"] = &nimbusProcessorRebalance{handler: handler}
	self451.processorMap["setLogConfig"] = &nimbusProcessorSetLogConfig{handler: handler}
	self451.processorMap["getLogConfig"] = &nimbusProcessorGetLogConfig{handler: handler}
	self451.processorMap["debug"] = &nimbusProcessorDebug{handler: handler}
	self451.processorMap["setWorkerProfiler"] = &nimbusProcessorSetWorkerProfiler{handler: handler}
	self451.processorMap["getComponentPendingProfileActions"] = &nimbusProcessorGetComponentPendingProfileActions{handler: handler}
	self451.processorMap["uploadNewCredentials"] = &nimbusProcessorUploadNewCredentials{handler: handler}
	self451.processorMap["beginCreateBlob"] = &nimbusProcessorBeginCreateBlob{handler: handler}
	self451.processorMap["beginUpdateBlob"] = &nimbusProcessorBeginUpdateBlob{handler: handler}
	self451.processorMap["uploadBlobChunk"] = &nimbusProcessorUploadBlobChunk{handler: handler}
	self451.processorMap["finishBlobUpload"] = &nimbusProcessorFinishBlobUpload{handler: handler}
	self451.processorMap["cancelBlobUpload"] = &nimbusProcessorCancelBlobUpload{handler: handler}
	self451.processorMap["getBlobMeta"] = &nimbusProcessorGetBlobMeta{handler: handler}
	self451.processorMap["setBlobMeta"] = &nimbusProcessorSetBlobMeta{handler: handler}
	self451.processorMap["beginBlobDownload"] = &nimbusProcessorBeginBlobDownload{handler: handler}
	self451.processorMap["downloadBlobChunk"] = &nimbusProcessorDownloadBlobChunk{handler: handler}
	self451.processorMap["deleteBlob"] = &nimbusProcessorDeleteBlob{handler: handler}
	self451.processorMap["listBlobs"] = &nimbusProcessorListBlobs{handler: handler}
	self451.processorMap["getBlobReplication"] = &nimbusProcessorGetBlobReplication{handler: handler}
	self451.processorMap["updateBlobReplication"] = &nimbusProcessorUpdateBlobReplication{handler: handler}
	self451.processorMap["createStateInZookeeper"] = &nimbusProcessorCreateStateInZookeeper{handler: handler}
	self451.processorMap["beginFileUpload"] = &nimbusProcessorBeginFileUpload{handler: handler}
	self451.processorMap["uploadChunk"] = &nimbusProcessorUploadChunk{handler: handler}
	self451.processorMap["finishFileUpload"] = &nimbusProcessorFinishFileUpload{handler: handler}
	self451.processorMap["downloadChunk"] = &nimbusProcessorDownloadChunk{handler: handler}
	self451.processorMap["getNimbusConf"] = &nimbusProcessorGetNimbusConf{handler: handler}
	self451.processorMap["getClusterInfo"] = &nimbusProcessorGetClusterInfo{handler: handler}
	self451.processorMap["getTopologySummaries"] = &nimbusProcessorGetTopologySummaries{handler: handler}
	self451.processorMap["getTopologySummaryByName"] = &nimbusProcessorGetTopologySummaryByName{handler: handler}
	self451.processorMap["getTopologySummary"] = &nimbusProcessorGetTopologySummary{handler: handler}
	self451.processorMap["getLeader"] = &nimbusProcessorGetLeader{handler: handler}
	self451.processorMap["isTopologyNameAllowed"] = &nimbusProcessorIsTopologyNameAllowed{handler: handler}
	self451.processorMap["getTopologyInfoByName"] = &nimbusProcessorGetTopologyInfoByName{handler: handler}
	self451.processorMap["getTopologyInfo"] = &nimbusProcessorGetTopologyInfo{handler: handler}
	self451.processorMap["getTopologyInfoByNameWithOpts"] = &nimbusProcessorGetTopologyInfoByNameWithOpts{handler: handler}
	self451.processorMap["getTopologyInfoWithOpts"] = &nimbusProcessorGetTopologyInfoWithOpts{handler: handler}
	self451.processorMap["getTopologyPageInfo"] = &nimbusProcessorGetTopologyPageInfo{handler: handler}
	self451.processorMap["getSupervisorPageInfo"] = &nimbusProcessorGetSupervisorPageInfo{handler: handler}
	self451.processorMap["getComponentPageInfo"] = &nimbusProcessorGetComponentPageInfo{handler: handler}
	self451.processorMap["getTopologyConf"] = &nimbusProcessorGetTopologyConf{handler: handler}
	self451.processorMap["getTopology"] = &nimbusProcessorGetTopology{handler: handler}
	self451.processorMap["getUserTopology"] = &nimbusProcessorGetUserTopology{handler: handler}
	self451.processorMap["getTopologyHistory"] = &nimbusProcessorGetTopologyHistory{handler: handler}
	self451.processorMap["getOwnerResourceSummaries"] = &nimbusProcessorGetOwnerResourceSummaries{handler: handler}
	self451.processorMap["getSupervisorAssignments"] = &nimbusProcessorGetSupervisorAssignments{handler: handler}
	self451.processorMap["sendSupervisorWorkerHeartbeats"] = &nimbusProcessorSendSupervisorWorkerHeartbeats{handler: handler}
	self451.processorMap["sendSupervisorWorkerHeartbeat"] = &nimbusProcessorSendSupervisorWorkerHeartbeat{handler: handler}
	self451.processorMap["processWorkerMetrics"] = &nimbusProcessorProcessWorkerMetrics{handler: handler}
	self451.processorMap["isRemoteBlobExists"] = &nimbusProcessorIsRemoteBlobExists{handler: handler}
	return self451
}

func (p *NimbusProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil {
		return false, thrift.WrapTException(err2)
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x452 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x452.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x452
}

type nimbusProcessorSubmitTopology struct {
	handler Nimbus
}

func (p *nimbusProcessorSubmitTopology) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err453 thrift.TException
	args := NimbusSubmitTopologyArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "submitTopology", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusSubmitTopologyResult{}
	if err2 := p.handler.SubmitTopology(ctx, args.Name, args.UploadedJarLocation, args.JsonConf, args.Topology); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AlreadyAliveException:
			result.E = v
		case *InvalidTopologyException:
			result.Ite = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc454 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing submitTopology: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "submitTopology", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err453 = thrift.WrapTException(err2)
			}
			if err2 := _exc454.Write(ctx, oprot); _write_err453 == nil && err2 != nil {
				_write_err453 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err453 == nil && err2 != nil {
				_write_err453 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err453 == nil && err2 != nil {
				_write_err453 = thrift.WrapTException(err2)
			}
			if _write_err453 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err453,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "submitTopology", thrift.REPLY, seqId); err2 != nil {
		_write_err453 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err453 == nil && err2 != nil {
		_write_err453 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err453 == nil && err2 != nil {
		_write_err453 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err453 == nil && err2 != nil {
		_write_err453 = thrift.WrapTException(err2)
	}
	if _write_err453 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err453,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorSubmitTopologyWithOpts struct {
	handler Nimbus
}

func (p *nimbusProcessorSubmitTopologyWithOpts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err455 thrift.TException
	args := NimbusSubmitTopologyWithOptsArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "submitTopologyWithOpts", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusSubmitTopologyWithOptsResult{}
	if err2 := p.handler.SubmitTopologyWithOpts(ctx, args.Name, args.UploadedJarLocation, args.JsonConf, args.Topology, args.Options); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AlreadyAliveException:
			result.E = v
		case *InvalidTopologyException:
			result.Ite = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc456 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing submitTopologyWithOpts: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "submitTopologyWithOpts", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err455 = thrift.WrapTException(err2)
			}
			if err2 := _exc456.Write(ctx, oprot); _write_err455 == nil && err2 != nil {
				_write_err455 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err455 == nil && err2 != nil {
				_write_err455 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err455 == nil && err2 != nil {
				_write_err455 = thrift.WrapTException(err2)
			}
			if _write_err455 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err455,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "submitTopologyWithOpts", thrift.REPLY, seqId); err2 != nil {
		_write_err455 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err455 == nil && err2 != nil {
		_write_err455 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err455 == nil && err2 != nil {
		_write_err455 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err455 == nil && err2 != nil {
		_write_err455 = thrift.WrapTException(err2)
	}
	if _write_err455 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err455,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorKillTopology struct {
	handler Nimbus
}

func (p *nimbusProcessorKillTopology) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err457 thrift.TException
	args := NimbusKillTopologyArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "killTopology", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusKillTopologyResult{}
	if err2 := p.handler.KillTopology(ctx, args.Name); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc458 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing killTopology: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "killTopology", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err457 = thrift.WrapTException(err2)
			}
			if err2 := _exc458.Write(ctx, oprot); _write_err457 == nil && err2 != nil {
				_write_err457 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err457 == nil && err2 != nil {
				_write_err457 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err457 == nil && err2 != nil {
				_write_err457 = thrift.WrapTException(err2)
			}
			if _write_err457 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err457,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "killTopology", thrift.REPLY, seqId); err2 != nil {
		_write_err457 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err457 == nil && err2 != nil {
		_write_err457 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err457 == nil && err2 != nil {
		_write_err457 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err457 == nil && err2 != nil {
		_write_err457 = thrift.WrapTException(err2)
	}
	if _write_err457 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err457,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorKillTopologyWithOpts struct {
	handler Nimbus
}

func (p *nimbusProcessorKillTopologyWithOpts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err459 thrift.TException
	args := NimbusKillTopologyWithOptsArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "killTopologyWithOpts", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusKillTopologyWithOptsResult{}
	if err2 := p.handler.KillTopologyWithOpts(ctx, args.Name, args.Options); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc460 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing killTopologyWithOpts: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "killTopologyWithOpts", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err459 = thrift.WrapTException(err2)
			}
			if err2 := _exc460.Write(ctx, oprot); _write_err459 == nil && err2 != nil {
				_write_err459 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err459 == nil && err2 != nil {
				_write_err459 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err459 == nil && err2 != nil {
				_write_err459 = thrift.WrapTException(err2)
			}
			if _write_err459 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err459,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "killTopologyWithOpts", thrift.REPLY, seqId); err2 != nil {
		_write_err459 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err459 == nil && err2 != nil {
		_write_err459 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err459 == nil && err2 != nil {
		_write_err459 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err459 == nil && err2 != nil {
		_write_err459 = thrift.WrapTException(err2)
	}
	if _write_err459 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err459,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorActivate struct {
	handler Nimbus
}

func (p *nimbusProcessorActivate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err461 thrift.TException
	args := NimbusActivateArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "activate", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusActivateResult{}
	if err2 := p.handler.Activate(ctx, args.Name); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc462 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing activate: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "activate", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err461 = thrift.WrapTException(err2)
			}
			if err2 := _exc462.Write(ctx, oprot); _write_err461 == nil && err2 != nil {
				_write_err461 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err461 == nil && err2 != nil {
				_write_err461 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err461 == nil && err2 != nil {
				_write_err461 = thrift.WrapTException(err2)
			}
			if _write_err461 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err461,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "activate", thrift.REPLY, seqId); err2 != nil {
		_write_err461 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err461 == nil && err2 != nil {
		_write_err461 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err461 == nil && err2 != nil {
		_write_err461 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err461 == nil && err2 != nil {
		_write_err461 = thrift.WrapTException(err2)
	}
	if _write_err461 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err461,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorDeactivate struct {
	handler Nimbus
}

func (p *nimbusProcessorDeactivate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err463 thrift.TException
	args := NimbusDeactivateArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "deactivate", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusDeactivateResult{}
	if err2 := p.handler.Deactivate(ctx, args.Name); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc464 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deactivate: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "deactivate", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err463 = thrift.WrapTException(err2)
			}
			if err2 := _exc464.Write(ctx, oprot); _write_err463 == nil && err2 != nil {
				_write_err463 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err463 == nil && err2 != nil {
				_write_err463 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err463 == nil && err2 != nil {
				_write_err463 = thrift.WrapTException(err2)
			}
			if _write_err463 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err463,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "deactivate", thrift.REPLY, seqId); err2 != nil {
		_write_err463 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err463 == nil && err2 != nil {
		_write_err463 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err463 == nil && err2 != nil {
		_write_err463 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err463 == nil && err2 != nil {
		_write_err463 = thrift.WrapTException(err2)
	}
	if _write_err463 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err463,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorRebalance struct {
	handler Nimbus
}

func (p *nimbusProcessorRebalance) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err465 thrift.TException
	args := NimbusRebalanceArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "rebalance", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusRebalanceResult{}
	if err2 := p.handler.Rebalance(ctx, args.Name, args.Options); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *InvalidTopologyException:
			result.Ite = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc466 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rebalance: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "rebalance", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err465 = thrift.WrapTException(err2)
			}
			if err2 := _exc466.Write(ctx, oprot); _write_err465 == nil && err2 != nil {
				_write_err465 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err465 == nil && err2 != nil {
				_write_err465 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err465 == nil && err2 != nil {
				_write_err465 = thrift.WrapTException(err2)
			}
			if _write_err465 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err465,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "rebalance", thrift.REPLY, seqId); err2 != nil {
		_write_err465 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err465 == nil && err2 != nil {
		_write_err465 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err465 == nil && err2 != nil {
		_write_err465 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err465 == nil && err2 != nil {
		_write_err465 = thrift.WrapTException(err2)
	}
	if _write_err465 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err465,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorSetLogConfig struct {
	handler Nimbus
}

func (p *nimbusProcessorSetLogConfig) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err467 thrift.TException
	args := NimbusSetLogConfigArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "setLogConfig", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusSetLogConfigResult{}
	if err2 := p.handler.SetLogConfig(ctx, args.Name, args.Config); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, &thrift.ProcessorError{
				WriteError:    thrift.WrapTException(err2),
				EndpointError: err,
			}
		}
		if errors.Is(err2, context.Canceled) {
			if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err3),
					EndpointError: err,
				}
			}
		}
		_exc468 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setLogConfig: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "setLogConfig", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err467 = thrift.WrapTException(err2)
		}
		if err2 := _exc468.Write(ctx, oprot); _write_err467 == nil && err2 != nil {
			_write_err467 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err467 == nil && err2 != nil {
			_write_err467 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err467 == nil && err2 != nil {
			_write_err467 = thrift.WrapTException(err2)
		}
		if _write_err467 != nil {
			return false, &thrift.ProcessorError{
				WriteError:    _write_err467,
				EndpointError: err,
			}
		}
		return true, err
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "setLogConfig", thrift.REPLY, seqId); err2 != nil {
		_write_err467 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err467 == nil && err2 != nil {
		_write_err467 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err467 == nil && err2 != nil {
		_write_err467 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err467 == nil && err2 != nil {
		_write_err467 = thrift.WrapTException(err2)
	}
	if _write_err467 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err467,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetLogConfig struct {
	handler Nimbus
}

func (p *nimbusProcessorGetLogConfig) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err469 thrift.TException
	args := NimbusGetLogConfigArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getLogConfig", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetLogConfigResult{}
	if retval, err2 := p.handler.GetLogConfig(ctx, args.Name); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, &thrift.ProcessorError{
				WriteError:    thrift.WrapTException(err2),
				EndpointError: err,
			}
		}
		if errors.Is(err2, context.Canceled) {
			if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err3),
					EndpointError: err,
				}
			}
		}
		_exc470 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLogConfig: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "getLogConfig", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err469 = thrift.WrapTException(err2)
		}
		if err2 := _exc470.Write(ctx, oprot); _write_err469 == nil && err2 != nil {
			_write_err469 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err469 == nil && err2 != nil {
			_write_err469 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err469 == nil && err2 != nil {
			_write_err469 = thrift.WrapTException(err2)
		}
		if _write_err469 != nil {
			return false, &thrift.ProcessorError{
				WriteError:    _write_err469,
				EndpointError: err,
			}
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getLogConfig", thrift.REPLY, seqId); err2 != nil {
		_write_err469 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err469 == nil && err2 != nil {
		_write_err469 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err469 == nil && err2 != nil {
		_write_err469 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err469 == nil && err2 != nil {
		_write_err469 = thrift.WrapTException(err2)
	}
	if _write_err469 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err469,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorDebug struct {
	handler Nimbus
}

func (p *nimbusProcessorDebug) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err471 thrift.TException
	args := NimbusDebugArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "debug", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusDebugResult{}
	if err2 := p.handler.Debug(ctx, args.Name, args.Component, args.Enable, args.SamplingPercentage); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc472 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing debug: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "debug", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err471 = thrift.WrapTException(err2)
			}
			if err2 := _exc472.Write(ctx, oprot); _write_err471 == nil && err2 != nil {
				_write_err471 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err471 == nil && err2 != nil {
				_write_err471 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err471 == nil && err2 != nil {
				_write_err471 = thrift.WrapTException(err2)
			}
			if _write_err471 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err471,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "debug", thrift.REPLY, seqId); err2 != nil {
		_write_err471 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err471 == nil && err2 != nil {
		_write_err471 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err471 == nil && err2 != nil {
		_write_err471 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err471 == nil && err2 != nil {
		_write_err471 = thrift.WrapTException(err2)
	}
	if _write_err471 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err471,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorSetWorkerProfiler struct {
	handler Nimbus
}

func (p *nimbusProcessorSetWorkerProfiler) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err473 thrift.TException
	args := NimbusSetWorkerProfilerArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "setWorkerProfiler", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusSetWorkerProfilerResult{}
	if err2 := p.handler.SetWorkerProfiler(ctx, args.ID, args.ProfileRequest); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, &thrift.ProcessorError{
				WriteError:    thrift.WrapTException(err2),
				EndpointError: err,
			}
		}
		if errors.Is(err2, context.Canceled) {
			if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err3),
					EndpointError: err,
				}
			}
		}
		_exc474 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setWorkerProfiler: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "setWorkerProfiler", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err473 = thrift.WrapTException(err2)
		}
		if err2 := _exc474.Write(ctx, oprot); _write_err473 == nil && err2 != nil {
			_write_err473 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err473 == nil && err2 != nil {
			_write_err473 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err473 == nil && err2 != nil {
			_write_err473 = thrift.WrapTException(err2)
		}
		if _write_err473 != nil {
			return false, &thrift.ProcessorError{
				WriteError:    _write_err473,
				EndpointError: err,
			}
		}
		return true, err
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "setWorkerProfiler", thrift.REPLY, seqId); err2 != nil {
		_write_err473 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err473 == nil && err2 != nil {
		_write_err473 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err473 == nil && err2 != nil {
		_write_err473 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err473 == nil && err2 != nil {
		_write_err473 = thrift.WrapTException(err2)
	}
	if _write_err473 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err473,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetComponentPendingProfileActions struct {
	handler Nimbus
}

func (p *nimbusProcessorGetComponentPendingProfileActions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err475 thrift.TException
	args := NimbusGetComponentPendingProfileActionsArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getComponentPendingProfileActions", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetComponentPendingProfileActionsResult{}
	if retval, err2 := p.handler.GetComponentPendingProfileActions(ctx, args.ID, args.ComponentID, args.Action); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, &thrift.ProcessorError{
				WriteError:    thrift.WrapTException(err2),
				EndpointError: err,
			}
		}
		if errors.Is(err2, context.Canceled) {
			if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err3),
					EndpointError: err,
				}
			}
		}
		_exc476 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getComponentPendingProfileActions: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "getComponentPendingProfileActions", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err475 = thrift.WrapTException(err2)
		}
		if err2 := _exc476.Write(ctx, oprot); _write_err475 == nil && err2 != nil {
			_write_err475 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err475 == nil && err2 != nil {
			_write_err475 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err475 == nil && err2 != nil {
			_write_err475 = thrift.WrapTException(err2)
		}
		if _write_err475 != nil {
			return false, &thrift.ProcessorError{
				WriteError:    _write_err475,
				EndpointError: err,
			}
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getComponentPendingProfileActions", thrift.REPLY, seqId); err2 != nil {
		_write_err475 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err475 == nil && err2 != nil {
		_write_err475 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err475 == nil && err2 != nil {
		_write_err475 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err475 == nil && err2 != nil {
		_write_err475 = thrift.WrapTException(err2)
	}
	if _write_err475 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err475,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorUploadNewCredentials struct {
	handler Nimbus
}

func (p *nimbusProcessorUploadNewCredentials) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err477 thrift.TException
	args := NimbusUploadNewCredentialsArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "uploadNewCredentials", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusUploadNewCredentialsResult{}
	if err2 := p.handler.UploadNewCredentials(ctx, args.Name, args.Creds); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *InvalidTopologyException:
			result.Ite = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc478 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing uploadNewCredentials: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "uploadNewCredentials", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err477 = thrift.WrapTException(err2)
			}
			if err2 := _exc478.Write(ctx, oprot); _write_err477 == nil && err2 != nil {
				_write_err477 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err477 == nil && err2 != nil {
				_write_err477 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err477 == nil && err2 != nil {
				_write_err477 = thrift.WrapTException(err2)
			}
			if _write_err477 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err477,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "uploadNewCredentials", thrift.REPLY, seqId); err2 != nil {
		_write_err477 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err477 == nil && err2 != nil {
		_write_err477 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err477 == nil && err2 != nil {
		_write_err477 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err477 == nil && err2 != nil {
		_write_err477 = thrift.WrapTException(err2)
	}
	if _write_err477 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err477,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorBeginCreateBlob struct {
	handler Nimbus
}

func (p *nimbusProcessorBeginCreateBlob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err479 thrift.TException
	args := NimbusBeginCreateBlobArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "beginCreateBlob", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusBeginCreateBlobResult{}
	if retval, err2 := p.handler.BeginCreateBlob(ctx, args.Key, args.Meta); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		case *KeyAlreadyExistsException:
			result.Kae = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc480 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing beginCreateBlob: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "beginCreateBlob", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err479 = thrift.WrapTException(err2)
			}
			if err2 := _exc480.Write(ctx, oprot); _write_err479 == nil && err2 != nil {
				_write_err479 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err479 == nil && err2 != nil {
				_write_err479 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err479 == nil && err2 != nil {
				_write_err479 = thrift.WrapTException(err2)
			}
			if _write_err479 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err479,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "beginCreateBlob", thrift.REPLY, seqId); err2 != nil {
		_write_err479 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err479 == nil && err2 != nil {
		_write_err479 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err479 == nil && err2 != nil {
		_write_err479 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err479 == nil && err2 != nil {
		_write_err479 = thrift.WrapTException(err2)
	}
	if _write_err479 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err479,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorBeginUpdateBlob struct {
	handler Nimbus
}

func (p *nimbusProcessorBeginUpdateBlob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err481 thrift.TException
	args := NimbusBeginUpdateBlobArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "beginUpdateBlob", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusBeginUpdateBlobResult{}
	if retval, err2 := p.handler.BeginUpdateBlob(ctx, args.Key); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		case *KeyNotFoundException:
			result.Knf = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc482 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing beginUpdateBlob: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "beginUpdateBlob", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err481 = thrift.WrapTException(err2)
			}
			if err2 := _exc482.Write(ctx, oprot); _write_err481 == nil && err2 != nil {
				_write_err481 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err481 == nil && err2 != nil {
				_write_err481 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err481 == nil && err2 != nil {
				_write_err481 = thrift.WrapTException(err2)
			}
			if _write_err481 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err481,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "beginUpdateBlob", thrift.REPLY, seqId); err2 != nil {
		_write_err481 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err481 == nil && err2 != nil {
		_write_err481 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err481 == nil && err2 != nil {
		_write_err481 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err481 == nil && err2 != nil {
		_write_err481 = thrift.WrapTException(err2)
	}
	if _write_err481 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err481,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorUploadBlobChunk struct {
	handler Nimbus
}

func (p *nimbusProcessorUploadBlobChunk) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err483 thrift.TException
	args := NimbusUploadBlobChunkArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "uploadBlobChunk", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusUploadBlobChunkResult{}
	if err2 := p.handler.UploadBlobChunk(ctx, args.Session, args.Chunk); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc484 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing uploadBlobChunk: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "uploadBlobChunk", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err483 = thrift.WrapTException(err2)
			}
			if err2 := _exc484.Write(ctx, oprot); _write_err483 == nil && err2 != nil {
				_write_err483 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err483 == nil && err2 != nil {
				_write_err483 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err483 == nil && err2 != nil {
				_write_err483 = thrift.WrapTException(err2)
			}
			if _write_err483 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err483,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "uploadBlobChunk", thrift.REPLY, seqId); err2 != nil {
		_write_err483 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err483 == nil && err2 != nil {
		_write_err483 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err483 == nil && err2 != nil {
		_write_err483 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err483 == nil && err2 != nil {
		_write_err483 = thrift.WrapTException(err2)
	}
	if _write_err483 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err483,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorFinishBlobUpload struct {
	handler Nimbus
}

func (p *nimbusProcessorFinishBlobUpload) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err485 thrift.TException
	args := NimbusFinishBlobUploadArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "finishBlobUpload", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusFinishBlobUploadResult{}
	if err2 := p.handler.FinishBlobUpload(ctx, args.Session); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc486 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing finishBlobUpload: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "finishBlobUpload", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err485 = thrift.WrapTException(err2)
			}
			if err2 := _exc486.Write(ctx, oprot); _write_err485 == nil && err2 != nil {
				_write_err485 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err485 == nil && err2 != nil {
				_write_err485 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err485 == nil && err2 != nil {
				_write_err485 = thrift.WrapTException(err2)
			}
			if _write_err485 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err485,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "finishBlobUpload", thrift.REPLY, seqId); err2 != nil {
		_write_err485 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err485 == nil && err2 != nil {
		_write_err485 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err485 == nil && err2 != nil {
		_write_err485 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err485 == nil && err2 != nil {
		_write_err485 = thrift.WrapTException(err2)
	}
	if _write_err485 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err485,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorCancelBlobUpload struct {
	handler Nimbus
}

func (p *nimbusProcessorCancelBlobUpload) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err487 thrift.TException
	args := NimbusCancelBlobUploadArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "cancelBlobUpload", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusCancelBlobUploadResult{}
	if err2 := p.handler.CancelBlobUpload(ctx, args.Session); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc488 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelBlobUpload: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "cancelBlobUpload", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err487 = thrift.WrapTException(err2)
			}
			if err2 := _exc488.Write(ctx, oprot); _write_err487 == nil && err2 != nil {
				_write_err487 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err487 == nil && err2 != nil {
				_write_err487 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err487 == nil && err2 != nil {
				_write_err487 = thrift.WrapTException(err2)
			}
			if _write_err487 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err487,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "cancelBlobUpload", thrift.REPLY, seqId); err2 != nil {
		_write_err487 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err487 == nil && err2 != nil {
		_write_err487 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err487 == nil && err2 != nil {
		_write_err487 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err487 == nil && err2 != nil {
		_write_err487 = thrift.WrapTException(err2)
	}
	if _write_err487 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err487,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetBlobMeta struct {
	handler Nimbus
}

func (p *nimbusProcessorGetBlobMeta) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err489 thrift.TException
	args := NimbusGetBlobMetaArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getBlobMeta", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetBlobMetaResult{}
	if retval, err2 := p.handler.GetBlobMeta(ctx, args.Key); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		case *KeyNotFoundException:
			result.Knf = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc490 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlobMeta: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getBlobMeta", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err489 = thrift.WrapTException(err2)
			}
			if err2 := _exc490.Write(ctx, oprot); _write_err489 == nil && err2 != nil {
				_write_err489 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err489 == nil && err2 != nil {
				_write_err489 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err489 == nil && err2 != nil {
				_write_err489 = thrift.WrapTException(err2)
			}
			if _write_err489 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err489,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getBlobMeta", thrift.REPLY, seqId); err2 != nil {
		_write_err489 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err489 == nil && err2 != nil {
		_write_err489 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err489 == nil && err2 != nil {
		_write_err489 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err489 == nil && err2 != nil {
		_write_err489 = thrift.WrapTException(err2)
	}
	if _write_err489 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err489,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorSetBlobMeta struct {
	handler Nimbus
}

func (p *nimbusProcessorSetBlobMeta) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err491 thrift.TException
	args := NimbusSetBlobMetaArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "setBlobMeta", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusSetBlobMetaResult{}
	if err2 := p.handler.SetBlobMeta(ctx, args.Key, args.Meta); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		case *KeyNotFoundException:
			result.Knf = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc492 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setBlobMeta: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "setBlobMeta", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err491 = thrift.WrapTException(err2)
			}
			if err2 := _exc492.Write(ctx, oprot); _write_err491 == nil && err2 != nil {
				_write_err491 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err491 == nil && err2 != nil {
				_write_err491 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err491 == nil && err2 != nil {
				_write_err491 = thrift.WrapTException(err2)
			}
			if _write_err491 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err491,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "setBlobMeta", thrift.REPLY, seqId); err2 != nil {
		_write_err491 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err491 == nil && err2 != nil {
		_write_err491 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err491 == nil && err2 != nil {
		_write_err491 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err491 == nil && err2 != nil {
		_write_err491 = thrift.WrapTException(err2)
	}
	if _write_err491 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err491,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorBeginBlobDownload struct {
	handler Nimbus
}

func (p *nimbusProcessorBeginBlobDownload) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err493 thrift.TException
	args := NimbusBeginBlobDownloadArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "beginBlobDownload", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusBeginBlobDownloadResult{}
	if retval, err2 := p.handler.BeginBlobDownload(ctx, args.Key); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		case *KeyNotFoundException:
			result.Knf = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc494 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing beginBlobDownload: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "beginBlobDownload", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err493 = thrift.WrapTException(err2)
			}
			if err2 := _exc494.Write(ctx, oprot); _write_err493 == nil && err2 != nil {
				_write_err493 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err493 == nil && err2 != nil {
				_write_err493 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err493 == nil && err2 != nil {
				_write_err493 = thrift.WrapTException(err2)
			}
			if _write_err493 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err493,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "beginBlobDownload", thrift.REPLY, seqId); err2 != nil {
		_write_err493 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err493 == nil && err2 != nil {
		_write_err493 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err493 == nil && err2 != nil {
		_write_err493 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err493 == nil && err2 != nil {
		_write_err493 = thrift.WrapTException(err2)
	}
	if _write_err493 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err493,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorDownloadBlobChunk struct {
	handler Nimbus
}

func (p *nimbusProcessorDownloadBlobChunk) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err495 thrift.TException
	args := NimbusDownloadBlobChunkArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "downloadBlobChunk", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusDownloadBlobChunkResult{}
	if retval, err2 := p.handler.DownloadBlobChunk(ctx, args.Session); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc496 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing downloadBlobChunk: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "downloadBlobChunk", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err495 = thrift.WrapTException(err2)
			}
			if err2 := _exc496.Write(ctx, oprot); _write_err495 == nil && err2 != nil {
				_write_err495 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err495 == nil && err2 != nil {
				_write_err495 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err495 == nil && err2 != nil {
				_write_err495 = thrift.WrapTException(err2)
			}
			if _write_err495 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err495,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "downloadBlobChunk", thrift.REPLY, seqId); err2 != nil {
		_write_err495 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err495 == nil && err2 != nil {
		_write_err495 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err495 == nil && err2 != nil {
		_write_err495 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err495 == nil && err2 != nil {
		_write_err495 = thrift.WrapTException(err2)
	}
	if _write_err495 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err495,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorDeleteBlob struct {
	handler Nimbus
}

func (p *nimbusProcessorDeleteBlob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err497 thrift.TException
	args := NimbusDeleteBlobArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "deleteBlob", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusDeleteBlobResult{}
	if err2 := p.handler.DeleteBlob(ctx, args.Key); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		case *KeyNotFoundException:
			result.Knf = v
		case *IllegalStateException:
			result.Ise = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc498 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteBlob: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "deleteBlob", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err497 = thrift.WrapTException(err2)
			}
			if err2 := _exc498.Write(ctx, oprot); _write_err497 == nil && err2 != nil {
				_write_err497 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err497 == nil && err2 != nil {
				_write_err497 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err497 == nil && err2 != nil {
				_write_err497 = thrift.WrapTException(err2)
			}
			if _write_err497 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err497,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "deleteBlob", thrift.REPLY, seqId); err2 != nil {
		_write_err497 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err497 == nil && err2 != nil {
		_write_err497 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err497 == nil && err2 != nil {
		_write_err497 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err497 == nil && err2 != nil {
		_write_err497 = thrift.WrapTException(err2)
	}
	if _write_err497 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err497,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorListBlobs struct {
	handler Nimbus
}

func (p *nimbusProcessorListBlobs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err499 thrift.TException
	args := NimbusListBlobsArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "listBlobs", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusListBlobsResult{}
	if retval, err2 := p.handler.ListBlobs(ctx, args.Session); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, &thrift.ProcessorError{
				WriteError:    thrift.WrapTException(err2),
				EndpointError: err,
			}
		}
		if errors.Is(err2, context.Canceled) {
			if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err3),
					EndpointError: err,
				}
			}
		}
		_exc500 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listBlobs: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "listBlobs", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err499 = thrift.WrapTException(err2)
		}
		if err2 := _exc500.Write(ctx, oprot); _write_err499 == nil && err2 != nil {
			_write_err499 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err499 == nil && err2 != nil {
			_write_err499 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err499 == nil && err2 != nil {
			_write_err499 = thrift.WrapTException(err2)
		}
		if _write_err499 != nil {
			return false, &thrift.ProcessorError{
				WriteError:    _write_err499,
				EndpointError: err,
			}
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "listBlobs", thrift.REPLY, seqId); err2 != nil {
		_write_err499 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err499 == nil && err2 != nil {
		_write_err499 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err499 == nil && err2 != nil {
		_write_err499 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err499 == nil && err2 != nil {
		_write_err499 = thrift.WrapTException(err2)
	}
	if _write_err499 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err499,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetBlobReplication struct {
	handler Nimbus
}

func (p *nimbusProcessorGetBlobReplication) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err501 thrift.TException
	args := NimbusGetBlobReplicationArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getBlobReplication", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetBlobReplicationResult{}
	if retval, err2 := p.handler.GetBlobReplication(ctx, args.Key); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		case *KeyNotFoundException:
			result.Knf = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc502 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlobReplication: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getBlobReplication", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err501 = thrift.WrapTException(err2)
			}
			if err2 := _exc502.Write(ctx, oprot); _write_err501 == nil && err2 != nil {
				_write_err501 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err501 == nil && err2 != nil {
				_write_err501 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err501 == nil && err2 != nil {
				_write_err501 = thrift.WrapTException(err2)
			}
			if _write_err501 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err501,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getBlobReplication", thrift.REPLY, seqId); err2 != nil {
		_write_err501 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err501 == nil && err2 != nil {
		_write_err501 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err501 == nil && err2 != nil {
		_write_err501 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err501 == nil && err2 != nil {
		_write_err501 = thrift.WrapTException(err2)
	}
	if _write_err501 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err501,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorUpdateBlobReplication struct {
	handler Nimbus
}

func (p *nimbusProcessorUpdateBlobReplication) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err503 thrift.TException
	args := NimbusUpdateBlobReplicationArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "updateBlobReplication", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusUpdateBlobReplicationResult{}
	if retval, err2 := p.handler.UpdateBlobReplication(ctx, args.Key, args.Replication); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		case *KeyNotFoundException:
			result.Knf = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc504 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateBlobReplication: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "updateBlobReplication", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err503 = thrift.WrapTException(err2)
			}
			if err2 := _exc504.Write(ctx, oprot); _write_err503 == nil && err2 != nil {
				_write_err503 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err503 == nil && err2 != nil {
				_write_err503 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err503 == nil && err2 != nil {
				_write_err503 = thrift.WrapTException(err2)
			}
			if _write_err503 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err503,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "updateBlobReplication", thrift.REPLY, seqId); err2 != nil {
		_write_err503 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err503 == nil && err2 != nil {
		_write_err503 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err503 == nil && err2 != nil {
		_write_err503 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err503 == nil && err2 != nil {
		_write_err503 = thrift.WrapTException(err2)
	}
	if _write_err503 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err503,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorCreateStateInZookeeper struct {
	handler Nimbus
}

func (p *nimbusProcessorCreateStateInZookeeper) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err505 thrift.TException
	args := NimbusCreateStateInZookeeperArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "createStateInZookeeper", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusCreateStateInZookeeperResult{}
	if err2 := p.handler.CreateStateInZookeeper(ctx, args.Key); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, &thrift.ProcessorError{
				WriteError:    thrift.WrapTException(err2),
				EndpointError: err,
			}
		}
		if errors.Is(err2, context.Canceled) {
			if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err3),
					EndpointError: err,
				}
			}
		}
		_exc506 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createStateInZookeeper: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "createStateInZookeeper", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err505 = thrift.WrapTException(err2)
		}
		if err2 := _exc506.Write(ctx, oprot); _write_err505 == nil && err2 != nil {
			_write_err505 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err505 == nil && err2 != nil {
			_write_err505 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err505 == nil && err2 != nil {
			_write_err505 = thrift.WrapTException(err2)
		}
		if _write_err505 != nil {
			return false, &thrift.ProcessorError{
				WriteError:    _write_err505,
				EndpointError: err,
			}
		}
		return true, err
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "createStateInZookeeper", thrift.REPLY, seqId); err2 != nil {
		_write_err505 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err505 == nil && err2 != nil {
		_write_err505 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err505 == nil && err2 != nil {
		_write_err505 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err505 == nil && err2 != nil {
		_write_err505 = thrift.WrapTException(err2)
	}
	if _write_err505 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err505,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorBeginFileUpload struct {
	handler Nimbus
}

func (p *nimbusProcessorBeginFileUpload) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err507 thrift.TException
	args := NimbusBeginFileUploadArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "beginFileUpload", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusBeginFileUploadResult{}
	if retval, err2 := p.handler.BeginFileUpload(ctx); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc508 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing beginFileUpload: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "beginFileUpload", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err507 = thrift.WrapTException(err2)
			}
			if err2 := _exc508.Write(ctx, oprot); _write_err507 == nil && err2 != nil {
				_write_err507 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err507 == nil && err2 != nil {
				_write_err507 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err507 == nil && err2 != nil {
				_write_err507 = thrift.WrapTException(err2)
			}
			if _write_err507 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err507,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "beginFileUpload", thrift.REPLY, seqId); err2 != nil {
		_write_err507 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err507 == nil && err2 != nil {
		_write_err507 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err507 == nil && err2 != nil {
		_write_err507 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err507 == nil && err2 != nil {
		_write_err507 = thrift.WrapTException(err2)
	}
	if _write_err507 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err507,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorUploadChunk struct {
	handler Nimbus
}

func (p *nimbusProcessorUploadChunk) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err509 thrift.TException
	args := NimbusUploadChunkArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "uploadChunk", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusUploadChunkResult{}
	if err2 := p.handler.UploadChunk(ctx, args.Location, args.Chunk); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc510 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing uploadChunk: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "uploadChunk", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err509 = thrift.WrapTException(err2)
			}
			if err2 := _exc510.Write(ctx, oprot); _write_err509 == nil && err2 != nil {
				_write_err509 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err509 == nil && err2 != nil {
				_write_err509 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err509 == nil && err2 != nil {
				_write_err509 = thrift.WrapTException(err2)
			}
			if _write_err509 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err509,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "uploadChunk", thrift.REPLY, seqId); err2 != nil {
		_write_err509 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err509 == nil && err2 != nil {
		_write_err509 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err509 == nil && err2 != nil {
		_write_err509 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err509 == nil && err2 != nil {
		_write_err509 = thrift.WrapTException(err2)
	}
	if _write_err509 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err509,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorFinishFileUpload struct {
	handler Nimbus
}

func (p *nimbusProcessorFinishFileUpload) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err511 thrift.TException
	args := NimbusFinishFileUploadArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "finishFileUpload", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusFinishFileUploadResult{}
	if err2 := p.handler.FinishFileUpload(ctx, args.Location); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc512 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing finishFileUpload: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "finishFileUpload", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err511 = thrift.WrapTException(err2)
			}
			if err2 := _exc512.Write(ctx, oprot); _write_err511 == nil && err2 != nil {
				_write_err511 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err511 == nil && err2 != nil {
				_write_err511 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err511 == nil && err2 != nil {
				_write_err511 = thrift.WrapTException(err2)
			}
			if _write_err511 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err511,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "finishFileUpload", thrift.REPLY, seqId); err2 != nil {
		_write_err511 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err511 == nil && err2 != nil {
		_write_err511 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err511 == nil && err2 != nil {
		_write_err511 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err511 == nil && err2 != nil {
		_write_err511 = thrift.WrapTException(err2)
	}
	if _write_err511 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err511,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorDownloadChunk struct {
	handler Nimbus
}

func (p *nimbusProcessorDownloadChunk) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err513 thrift.TException
	args := NimbusDownloadChunkArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "downloadChunk", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusDownloadChunkResult{}
	if retval, err2 := p.handler.DownloadChunk(ctx, args.ID); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc514 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing downloadChunk: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "downloadChunk", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err513 = thrift.WrapTException(err2)
			}
			if err2 := _exc514.Write(ctx, oprot); _write_err513 == nil && err2 != nil {
				_write_err513 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err513 == nil && err2 != nil {
				_write_err513 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err513 == nil && err2 != nil {
				_write_err513 = thrift.WrapTException(err2)
			}
			if _write_err513 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err513,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "downloadChunk", thrift.REPLY, seqId); err2 != nil {
		_write_err513 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err513 == nil && err2 != nil {
		_write_err513 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err513 == nil && err2 != nil {
		_write_err513 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err513 == nil && err2 != nil {
		_write_err513 = thrift.WrapTException(err2)
	}
	if _write_err513 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err513,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetNimbusConf struct {
	handler Nimbus
}

func (p *nimbusProcessorGetNimbusConf) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err515 thrift.TException
	args := NimbusGetNimbusConfArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getNimbusConf", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetNimbusConfResult{}
	if retval, err2 := p.handler.GetNimbusConf(ctx); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc516 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNimbusConf: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getNimbusConf", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err515 = thrift.WrapTException(err2)
			}
			if err2 := _exc516.Write(ctx, oprot); _write_err515 == nil && err2 != nil {
				_write_err515 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err515 == nil && err2 != nil {
				_write_err515 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err515 == nil && err2 != nil {
				_write_err515 = thrift.WrapTException(err2)
			}
			if _write_err515 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err515,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getNimbusConf", thrift.REPLY, seqId); err2 != nil {
		_write_err515 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err515 == nil && err2 != nil {
		_write_err515 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err515 == nil && err2 != nil {
		_write_err515 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err515 == nil && err2 != nil {
		_write_err515 = thrift.WrapTException(err2)
	}
	if _write_err515 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err515,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetClusterInfo struct {
	handler Nimbus
}

func (p *nimbusProcessorGetClusterInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err517 thrift.TException
	args := NimbusGetClusterInfoArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getClusterInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetClusterInfoResult{}
	if retval, err2 := p.handler.GetClusterInfo(ctx); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc518 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getClusterInfo: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getClusterInfo", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err517 = thrift.WrapTException(err2)
			}
			if err2 := _exc518.Write(ctx, oprot); _write_err517 == nil && err2 != nil {
				_write_err517 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err517 == nil && err2 != nil {
				_write_err517 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err517 == nil && err2 != nil {
				_write_err517 = thrift.WrapTException(err2)
			}
			if _write_err517 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err517,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getClusterInfo", thrift.REPLY, seqId); err2 != nil {
		_write_err517 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err517 == nil && err2 != nil {
		_write_err517 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err517 == nil && err2 != nil {
		_write_err517 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err517 == nil && err2 != nil {
		_write_err517 = thrift.WrapTException(err2)
	}
	if _write_err517 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err517,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetTopologySummaries struct {
	handler Nimbus
}

func (p *nimbusProcessorGetTopologySummaries) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err519 thrift.TException
	args := NimbusGetTopologySummariesArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getTopologySummaries", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetTopologySummariesResult{}
	if retval, err2 := p.handler.GetTopologySummaries(ctx); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc520 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTopologySummaries: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getTopologySummaries", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err519 = thrift.WrapTException(err2)
			}
			if err2 := _exc520.Write(ctx, oprot); _write_err519 == nil && err2 != nil {
				_write_err519 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err519 == nil && err2 != nil {
				_write_err519 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err519 == nil && err2 != nil {
				_write_err519 = thrift.WrapTException(err2)
			}
			if _write_err519 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err519,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getTopologySummaries", thrift.REPLY, seqId); err2 != nil {
		_write_err519 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err519 == nil && err2 != nil {
		_write_err519 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err519 == nil && err2 != nil {
		_write_err519 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err519 == nil && err2 != nil {
		_write_err519 = thrift.WrapTException(err2)
	}
	if _write_err519 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err519,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetTopologySummaryByName struct {
	handler Nimbus
}

func (p *nimbusProcessorGetTopologySummaryByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err521 thrift.TException
	args := NimbusGetTopologySummaryByNameArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getTopologySummaryByName", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetTopologySummaryByNameResult{}
	if retval, err2 := p.handler.GetTopologySummaryByName(ctx, args.Name); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc522 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTopologySummaryByName: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getTopologySummaryByName", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err521 = thrift.WrapTException(err2)
			}
			if err2 := _exc522.Write(ctx, oprot); _write_err521 == nil && err2 != nil {
				_write_err521 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err521 == nil && err2 != nil {
				_write_err521 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err521 == nil && err2 != nil {
				_write_err521 = thrift.WrapTException(err2)
			}
			if _write_err521 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err521,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getTopologySummaryByName", thrift.REPLY, seqId); err2 != nil {
		_write_err521 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err521 == nil && err2 != nil {
		_write_err521 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err521 == nil && err2 != nil {
		_write_err521 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err521 == nil && err2 != nil {
		_write_err521 = thrift.WrapTException(err2)
	}
	if _write_err521 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err521,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetTopologySummary struct {
	handler Nimbus
}

func (p *nimbusProcessorGetTopologySummary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err523 thrift.TException
	args := NimbusGetTopologySummaryArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getTopologySummary", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetTopologySummaryResult{}
	if retval, err2 := p.handler.GetTopologySummary(ctx, args.ID); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc524 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTopologySummary: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getTopologySummary", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err523 = thrift.WrapTException(err2)
			}
			if err2 := _exc524.Write(ctx, oprot); _write_err523 == nil && err2 != nil {
				_write_err523 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err523 == nil && err2 != nil {
				_write_err523 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err523 == nil && err2 != nil {
				_write_err523 = thrift.WrapTException(err2)
			}
			if _write_err523 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err523,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getTopologySummary", thrift.REPLY, seqId); err2 != nil {
		_write_err523 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err523 == nil && err2 != nil {
		_write_err523 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err523 == nil && err2 != nil {
		_write_err523 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err523 == nil && err2 != nil {
		_write_err523 = thrift.WrapTException(err2)
	}
	if _write_err523 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err523,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetLeader struct {
	handler Nimbus
}

func (p *nimbusProcessorGetLeader) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err525 thrift.TException
	args := NimbusGetLeaderArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getLeader", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetLeaderResult{}
	if retval, err2 := p.handler.GetLeader(ctx); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc526 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLeader: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getLeader", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err525 = thrift.WrapTException(err2)
			}
			if err2 := _exc526.Write(ctx, oprot); _write_err525 == nil && err2 != nil {
				_write_err525 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err525 == nil && err2 != nil {
				_write_err525 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err525 == nil && err2 != nil {
				_write_err525 = thrift.WrapTException(err2)
			}
			if _write_err525 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err525,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getLeader", thrift.REPLY, seqId); err2 != nil {
		_write_err525 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err525 == nil && err2 != nil {
		_write_err525 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err525 == nil && err2 != nil {
		_write_err525 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err525 == nil && err2 != nil {
		_write_err525 = thrift.WrapTException(err2)
	}
	if _write_err525 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err525,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorIsTopologyNameAllowed struct {
	handler Nimbus
}

func (p *nimbusProcessorIsTopologyNameAllowed) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err527 thrift.TException
	args := NimbusIsTopologyNameAllowedArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "isTopologyNameAllowed", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusIsTopologyNameAllowedResult{}
	if retval, err2 := p.handler.IsTopologyNameAllowed(ctx, args.Name); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc528 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isTopologyNameAllowed: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "isTopologyNameAllowed", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err527 = thrift.WrapTException(err2)
			}
			if err2 := _exc528.Write(ctx, oprot); _write_err527 == nil && err2 != nil {
				_write_err527 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err527 == nil && err2 != nil {
				_write_err527 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err527 == nil && err2 != nil {
				_write_err527 = thrift.WrapTException(err2)
			}
			if _write_err527 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err527,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "isTopologyNameAllowed", thrift.REPLY, seqId); err2 != nil {
		_write_err527 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err527 == nil && err2 != nil {
		_write_err527 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err527 == nil && err2 != nil {
		_write_err527 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err527 == nil && err2 != nil {
		_write_err527 = thrift.WrapTException(err2)
	}
	if _write_err527 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err527,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetTopologyInfoByName struct {
	handler Nimbus
}

func (p *nimbusProcessorGetTopologyInfoByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err529 thrift.TException
	args := NimbusGetTopologyInfoByNameArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getTopologyInfoByName", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetTopologyInfoByNameResult{}
	if retval, err2 := p.handler.GetTopologyInfoByName(ctx, args.Name); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc530 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTopologyInfoByName: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getTopologyInfoByName", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err529 = thrift.WrapTException(err2)
			}
			if err2 := _exc530.Write(ctx, oprot); _write_err529 == nil && err2 != nil {
				_write_err529 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err529 == nil && err2 != nil {
				_write_err529 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err529 == nil && err2 != nil {
				_write_err529 = thrift.WrapTException(err2)
			}
			if _write_err529 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err529,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getTopologyInfoByName", thrift.REPLY, seqId); err2 != nil {
		_write_err529 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err529 == nil && err2 != nil {
		_write_err529 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err529 == nil && err2 != nil {
		_write_err529 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err529 == nil && err2 != nil {
		_write_err529 = thrift.WrapTException(err2)
	}
	if _write_err529 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err529,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetTopologyInfo struct {
	handler Nimbus
}

func (p *nimbusProcessorGetTopologyInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err531 thrift.TException
	args := NimbusGetTopologyInfoArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getTopologyInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetTopologyInfoResult{}
	if retval, err2 := p.handler.GetTopologyInfo(ctx, args.ID); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc532 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTopologyInfo: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getTopologyInfo", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err531 = thrift.WrapTException(err2)
			}
			if err2 := _exc532.Write(ctx, oprot); _write_err531 == nil && err2 != nil {
				_write_err531 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err531 == nil && err2 != nil {
				_write_err531 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err531 == nil && err2 != nil {
				_write_err531 = thrift.WrapTException(err2)
			}
			if _write_err531 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err531,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getTopologyInfo", thrift.REPLY, seqId); err2 != nil {
		_write_err531 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err531 == nil && err2 != nil {
		_write_err531 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err531 == nil && err2 != nil {
		_write_err531 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err531 == nil && err2 != nil {
		_write_err531 = thrift.WrapTException(err2)
	}
	if _write_err531 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err531,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetTopologyInfoByNameWithOpts struct {
	handler Nimbus
}

func (p *nimbusProcessorGetTopologyInfoByNameWithOpts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err533 thrift.TException
	args := NimbusGetTopologyInfoByNameWithOptsArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getTopologyInfoByNameWithOpts", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetTopologyInfoByNameWithOptsResult{}
	if retval, err2 := p.handler.GetTopologyInfoByNameWithOpts(ctx, args.Name, args.Options); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc534 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTopologyInfoByNameWithOpts: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getTopologyInfoByNameWithOpts", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err533 = thrift.WrapTException(err2)
			}
			if err2 := _exc534.Write(ctx, oprot); _write_err533 == nil && err2 != nil {
				_write_err533 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err533 == nil && err2 != nil {
				_write_err533 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err533 == nil && err2 != nil {
				_write_err533 = thrift.WrapTException(err2)
			}
			if _write_err533 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err533,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getTopologyInfoByNameWithOpts", thrift.REPLY, seqId); err2 != nil {
		_write_err533 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err533 == nil && err2 != nil {
		_write_err533 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err533 == nil && err2 != nil {
		_write_err533 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err533 == nil && err2 != nil {
		_write_err533 = thrift.WrapTException(err2)
	}
	if _write_err533 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err533,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetTopologyInfoWithOpts struct {
	handler Nimbus
}

func (p *nimbusProcessorGetTopologyInfoWithOpts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err535 thrift.TException
	args := NimbusGetTopologyInfoWithOptsArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getTopologyInfoWithOpts", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetTopologyInfoWithOptsResult{}
	if retval, err2 := p.handler.GetTopologyInfoWithOpts(ctx, args.ID, args.Options); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc536 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTopologyInfoWithOpts: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getTopologyInfoWithOpts", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err535 = thrift.WrapTException(err2)
			}
			if err2 := _exc536.Write(ctx, oprot); _write_err535 == nil && err2 != nil {
				_write_err535 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err535 == nil && err2 != nil {
				_write_err535 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err535 == nil && err2 != nil {
				_write_err535 = thrift.WrapTException(err2)
			}
			if _write_err535 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err535,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getTopologyInfoWithOpts", thrift.REPLY, seqId); err2 != nil {
		_write_err535 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err535 == nil && err2 != nil {
		_write_err535 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err535 == nil && err2 != nil {
		_write_err535 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err535 == nil && err2 != nil {
		_write_err535 = thrift.WrapTException(err2)
	}
	if _write_err535 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err535,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetTopologyPageInfo struct {
	handler Nimbus
}

func (p *nimbusProcessorGetTopologyPageInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err537 thrift.TException
	args := NimbusGetTopologyPageInfoArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getTopologyPageInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetTopologyPageInfoResult{}
	if retval, err2 := p.handler.GetTopologyPageInfo(ctx, args.ID, args.Window, args.IsIncludeSys); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc538 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTopologyPageInfo: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getTopologyPageInfo", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err537 = thrift.WrapTException(err2)
			}
			if err2 := _exc538.Write(ctx, oprot); _write_err537 == nil && err2 != nil {
				_write_err537 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err537 == nil && err2 != nil {
				_write_err537 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err537 == nil && err2 != nil {
				_write_err537 = thrift.WrapTException(err2)
			}
			if _write_err537 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err537,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getTopologyPageInfo", thrift.REPLY, seqId); err2 != nil {
		_write_err537 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err537 == nil && err2 != nil {
		_write_err537 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err537 == nil && err2 != nil {
		_write_err537 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err537 == nil && err2 != nil {
		_write_err537 = thrift.WrapTException(err2)
	}
	if _write_err537 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err537,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetSupervisorPageInfo struct {
	handler Nimbus
}

func (p *nimbusProcessorGetSupervisorPageInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err539 thrift.TException
	args := NimbusGetSupervisorPageInfoArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getSupervisorPageInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetSupervisorPageInfoResult{}
	if retval, err2 := p.handler.GetSupervisorPageInfo(ctx, args.ID, args.Host, args.IsIncludeSys); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc540 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSupervisorPageInfo: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getSupervisorPageInfo", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err539 = thrift.WrapTException(err2)
			}
			if err2 := _exc540.Write(ctx, oprot); _write_err539 == nil && err2 != nil {
				_write_err539 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err539 == nil && err2 != nil {
				_write_err539 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err539 == nil && err2 != nil {
				_write_err539 = thrift.WrapTException(err2)
			}
			if _write_err539 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err539,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getSupervisorPageInfo", thrift.REPLY, seqId); err2 != nil {
		_write_err539 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err539 == nil && err2 != nil {
		_write_err539 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err539 == nil && err2 != nil {
		_write_err539 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err539 == nil && err2 != nil {
		_write_err539 = thrift.WrapTException(err2)
	}
	if _write_err539 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err539,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetComponentPageInfo struct {
	handler Nimbus
}

func (p *nimbusProcessorGetComponentPageInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err541 thrift.TException
	args := NimbusGetComponentPageInfoArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getComponentPageInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetComponentPageInfoResult{}
	if retval, err2 := p.handler.GetComponentPageInfo(ctx, args.TopologyID, args.ComponentID, args.Window, args.IsIncludeSys); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc542 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getComponentPageInfo: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getComponentPageInfo", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err541 = thrift.WrapTException(err2)
			}
			if err2 := _exc542.Write(ctx, oprot); _write_err541 == nil && err2 != nil {
				_write_err541 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err541 == nil && err2 != nil {
				_write_err541 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err541 == nil && err2 != nil {
				_write_err541 = thrift.WrapTException(err2)
			}
			if _write_err541 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err541,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getComponentPageInfo", thrift.REPLY, seqId); err2 != nil {
		_write_err541 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err541 == nil && err2 != nil {
		_write_err541 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err541 == nil && err2 != nil {
		_write_err541 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err541 == nil && err2 != nil {
		_write_err541 = thrift.WrapTException(err2)
	}
	if _write_err541 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err541,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetTopologyConf struct {
	handler Nimbus
}

func (p *nimbusProcessorGetTopologyConf) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err543 thrift.TException
	args := NimbusGetTopologyConfArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getTopologyConf", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetTopologyConfResult{}
	if retval, err2 := p.handler.GetTopologyConf(ctx, args.ID); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc544 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTopologyConf: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getTopologyConf", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err543 = thrift.WrapTException(err2)
			}
			if err2 := _exc544.Write(ctx, oprot); _write_err543 == nil && err2 != nil {
				_write_err543 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err543 == nil && err2 != nil {
				_write_err543 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err543 == nil && err2 != nil {
				_write_err543 = thrift.WrapTException(err2)
			}
			if _write_err543 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err543,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getTopologyConf", thrift.REPLY, seqId); err2 != nil {
		_write_err543 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err543 == nil && err2 != nil {
		_write_err543 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err543 == nil && err2 != nil {
		_write_err543 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err543 == nil && err2 != nil {
		_write_err543 = thrift.WrapTException(err2)
	}
	if _write_err543 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err543,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetTopology struct {
	handler Nimbus
}

func (p *nimbusProcessorGetTopology) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err545 thrift.TException
	args := NimbusGetTopologyArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getTopology", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetTopologyResult{}
	if retval, err2 := p.handler.GetTopology(ctx, args.ID); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc546 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTopology: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getTopology", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err545 = thrift.WrapTException(err2)
			}
			if err2 := _exc546.Write(ctx, oprot); _write_err545 == nil && err2 != nil {
				_write_err545 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err545 == nil && err2 != nil {
				_write_err545 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err545 == nil && err2 != nil {
				_write_err545 = thrift.WrapTException(err2)
			}
			if _write_err545 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err545,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getTopology", thrift.REPLY, seqId); err2 != nil {
		_write_err545 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err545 == nil && err2 != nil {
		_write_err545 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err545 == nil && err2 != nil {
		_write_err545 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err545 == nil && err2 != nil {
		_write_err545 = thrift.WrapTException(err2)
	}
	if _write_err545 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err545,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetUserTopology struct {
	handler Nimbus
}

func (p *nimbusProcessorGetUserTopology) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err547 thrift.TException
	args := NimbusGetUserTopologyArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getUserTopology", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetUserTopologyResult{}
	if retval, err2 := p.handler.GetUserTopology(ctx, args.ID); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc548 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserTopology: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getUserTopology", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err547 = thrift.WrapTException(err2)
			}
			if err2 := _exc548.Write(ctx, oprot); _write_err547 == nil && err2 != nil {
				_write_err547 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err547 == nil && err2 != nil {
				_write_err547 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err547 == nil && err2 != nil {
				_write_err547 = thrift.WrapTException(err2)
			}
			if _write_err547 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err547,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getUserTopology", thrift.REPLY, seqId); err2 != nil {
		_write_err547 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err547 == nil && err2 != nil {
		_write_err547 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err547 == nil && err2 != nil {
		_write_err547 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err547 == nil && err2 != nil {
		_write_err547 = thrift.WrapTException(err2)
	}
	if _write_err547 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err547,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetTopologyHistory struct {
	handler Nimbus
}

func (p *nimbusProcessorGetTopologyHistory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err549 thrift.TException
	args := NimbusGetTopologyHistoryArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getTopologyHistory", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetTopologyHistoryResult{}
	if retval, err2 := p.handler.GetTopologyHistory(ctx, args.User); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc550 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTopologyHistory: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getTopologyHistory", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err549 = thrift.WrapTException(err2)
			}
			if err2 := _exc550.Write(ctx, oprot); _write_err549 == nil && err2 != nil {
				_write_err549 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err549 == nil && err2 != nil {
				_write_err549 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err549 == nil && err2 != nil {
				_write_err549 = thrift.WrapTException(err2)
			}
			if _write_err549 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err549,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getTopologyHistory", thrift.REPLY, seqId); err2 != nil {
		_write_err549 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err549 == nil && err2 != nil {
		_write_err549 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err549 == nil && err2 != nil {
		_write_err549 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err549 == nil && err2 != nil {
		_write_err549 = thrift.WrapTException(err2)
	}
	if _write_err549 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err549,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetOwnerResourceSummaries struct {
	handler Nimbus
}

func (p *nimbusProcessorGetOwnerResourceSummaries) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err551 thrift.TException
	args := NimbusGetOwnerResourceSummariesArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getOwnerResourceSummaries", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetOwnerResourceSummariesResult{}
	if retval, err2 := p.handler.GetOwnerResourceSummaries(ctx, args.Owner); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc552 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getOwnerResourceSummaries: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getOwnerResourceSummaries", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err551 = thrift.WrapTException(err2)
			}
			if err2 := _exc552.Write(ctx, oprot); _write_err551 == nil && err2 != nil {
				_write_err551 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err551 == nil && err2 != nil {
				_write_err551 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err551 == nil && err2 != nil {
				_write_err551 = thrift.WrapTException(err2)
			}
			if _write_err551 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err551,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getOwnerResourceSummaries", thrift.REPLY, seqId); err2 != nil {
		_write_err551 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err551 == nil && err2 != nil {
		_write_err551 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err551 == nil && err2 != nil {
		_write_err551 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err551 == nil && err2 != nil {
		_write_err551 = thrift.WrapTException(err2)
	}
	if _write_err551 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err551,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorGetSupervisorAssignments struct {
	handler Nimbus
}

func (p *nimbusProcessorGetSupervisorAssignments) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err553 thrift.TException
	args := NimbusGetSupervisorAssignmentsArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getSupervisorAssignments", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusGetSupervisorAssignmentsResult{}
	if retval, err2 := p.handler.GetSupervisorAssignments(ctx, args.Node); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc554 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSupervisorAssignments: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getSupervisorAssignments", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err553 = thrift.WrapTException(err2)
			}
			if err2 := _exc554.Write(ctx, oprot); _write_err553 == nil && err2 != nil {
				_write_err553 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err553 == nil && err2 != nil {
				_write_err553 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err553 == nil && err2 != nil {
				_write_err553 = thrift.WrapTException(err2)
			}
			if _write_err553 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err553,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getSupervisorAssignments", thrift.REPLY, seqId); err2 != nil {
		_write_err553 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err553 == nil && err2 != nil {
		_write_err553 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err553 == nil && err2 != nil {
		_write_err553 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err553 == nil && err2 != nil {
		_write_err553 = thrift.WrapTException(err2)
	}
	if _write_err553 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err553,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorSendSupervisorWorkerHeartbeats struct {
	handler Nimbus
}

func (p *nimbusProcessorSendSupervisorWorkerHeartbeats) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err555 thrift.TException
	args := NimbusSendSupervisorWorkerHeartbeatsArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "sendSupervisorWorkerHeartbeats", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusSendSupervisorWorkerHeartbeatsResult{}
	if err2 := p.handler.SendSupervisorWorkerHeartbeats(ctx, args.Heartbeats); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc556 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendSupervisorWorkerHeartbeats: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "sendSupervisorWorkerHeartbeats", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err555 = thrift.WrapTException(err2)
			}
			if err2 := _exc556.Write(ctx, oprot); _write_err555 == nil && err2 != nil {
				_write_err555 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err555 == nil && err2 != nil {
				_write_err555 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err555 == nil && err2 != nil {
				_write_err555 = thrift.WrapTException(err2)
			}
			if _write_err555 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err555,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "sendSupervisorWorkerHeartbeats", thrift.REPLY, seqId); err2 != nil {
		_write_err555 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err555 == nil && err2 != nil {
		_write_err555 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err555 == nil && err2 != nil {
		_write_err555 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err555 == nil && err2 != nil {
		_write_err555 = thrift.WrapTException(err2)
	}
	if _write_err555 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err555,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorSendSupervisorWorkerHeartbeat struct {
	handler Nimbus
}

func (p *nimbusProcessorSendSupervisorWorkerHeartbeat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err557 thrift.TException
	args := NimbusSendSupervisorWorkerHeartbeatArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "sendSupervisorWorkerHeartbeat", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusSendSupervisorWorkerHeartbeatResult{}
	if err2 := p.handler.SendSupervisorWorkerHeartbeat(ctx, args.Heatbeat); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		case *NotAliveException:
			result.E = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc558 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendSupervisorWorkerHeartbeat: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "sendSupervisorWorkerHeartbeat", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err557 = thrift.WrapTException(err2)
			}
			if err2 := _exc558.Write(ctx, oprot); _write_err557 == nil && err2 != nil {
				_write_err557 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err557 == nil && err2 != nil {
				_write_err557 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err557 == nil && err2 != nil {
				_write_err557 = thrift.WrapTException(err2)
			}
			if _write_err557 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err557,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "sendSupervisorWorkerHeartbeat", thrift.REPLY, seqId); err2 != nil {
		_write_err557 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err557 == nil && err2 != nil {
		_write_err557 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err557 == nil && err2 != nil {
		_write_err557 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err557 == nil && err2 != nil {
		_write_err557 = thrift.WrapTException(err2)
	}
	if _write_err557 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err557,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorProcessWorkerMetrics struct {
	handler Nimbus
}

func (p *nimbusProcessorProcessWorkerMetrics) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err559 thrift.TException
	args := NimbusProcessWorkerMetricsArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "processWorkerMetrics", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusProcessWorkerMetricsResult{}
	if err2 := p.handler.ProcessWorkerMetrics(ctx, args.Metrics); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, &thrift.ProcessorError{
				WriteError:    thrift.WrapTException(err2),
				EndpointError: err,
			}
		}
		if errors.Is(err2, context.Canceled) {
			if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err3),
					EndpointError: err,
				}
			}
		}
		_exc560 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing processWorkerMetrics: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "processWorkerMetrics", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err559 = thrift.WrapTException(err2)
		}
		if err2 := _exc560.Write(ctx, oprot); _write_err559 == nil && err2 != nil {
			_write_err559 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err559 == nil && err2 != nil {
			_write_err559 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err559 == nil && err2 != nil {
			_write_err559 = thrift.WrapTException(err2)
		}
		if _write_err559 != nil {
			return false, &thrift.ProcessorError{
				WriteError:    _write_err559,
				EndpointError: err,
			}
		}
		return true, err
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "processWorkerMetrics", thrift.REPLY, seqId); err2 != nil {
		_write_err559 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err559 == nil && err2 != nil {
		_write_err559 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err559 == nil && err2 != nil {
		_write_err559 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err559 == nil && err2 != nil {
		_write_err559 = thrift.WrapTException(err2)
	}
	if _write_err559 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err559,
			EndpointError: err,
		}
	}
	return true, err
}

type nimbusProcessorIsRemoteBlobExists struct {
	handler Nimbus
}

func (p *nimbusProcessorIsRemoteBlobExists) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err561 thrift.TException
	args := NimbusIsRemoteBlobExistsArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "isRemoteBlobExists", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := NimbusIsRemoteBlobExistsResult{}
	if retval, err2 := p.handler.IsRemoteBlobExists(ctx, args.BlobKey); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc562 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isRemoteBlobExists: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "isRemoteBlobExists", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err561 = thrift.WrapTException(err2)
			}
			if err2 := _exc562.Write(ctx, oprot); _write_err561 == nil && err2 != nil {
				_write_err561 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err561 == nil && err2 != nil {
				_write_err561 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err561 == nil && err2 != nil {
				_write_err561 = thrift.WrapTException(err2)
			}
			if _write_err561 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err561,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "isRemoteBlobExists", thrift.REPLY, seqId); err2 != nil {
		_write_err561 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err561 == nil && err2 != nil {
		_write_err561 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err561 == nil && err2 != nil {
		_write_err561 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err561 == nil && err2 != nil {
		_write_err561 = thrift.WrapTException(err2)
	}
	if _write_err561 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err561,
			EndpointError: err,
		}
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//   - Name
//   - UploadedJarLocation
//   - JsonConf
//   - Topology
type NimbusSubmitTopologyArgs struct {
	Name                string         `thrift:"name,1" db:"name" json:"name"`
	UploadedJarLocation string         `thrift:"uploadedJarLocation,2" db:"uploadedJarLocation" json:"uploadedJarLocation"`
	JsonConf            string         `thrift:"jsonConf,3" db:"jsonConf" json:"jsonConf"`
	Topology            *StormTopology `thrift:"topology,4" db:"topology" json:"topology"`
}

func NewNimbusSubmitTopologyArgs() *NimbusSubmitTopologyArgs {
	return &NimbusSubmitTopologyArgs{}
}

func (p *NimbusSubmitTopologyArgs) GetName() string {
	return p.Name
}

func (p *NimbusSubmitTopologyArgs) GetUploadedJarLocation() string {
	return p.UploadedJarLocation
}

func (p *NimbusSubmitTopologyArgs) GetJsonConf() string {
	return p.JsonConf
}

var NimbusSubmitTopologyArgs_Topology_DEFAULT *StormTopology

func (p *NimbusSubmitTopologyArgs) GetTopology() *StormTopology {
	if !p.IsSetTopology() {
		return NimbusSubmitTopologyArgs_Topology_DEFAULT
	}
	return p.Topology
}

func (p *NimbusSubmitTopologyArgs) IsSetTopology() bool {
	return p.Topology != nil
}

func (p *NimbusSubmitTopologyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusSubmitTopologyArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *NimbusSubmitTopologyArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UploadedJarLocation = v
	}
	return nil
}

func (p *NimbusSubmitTopologyArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.JsonConf = v
	}
	return nil
}

func (p *NimbusSubmitTopologyArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.Topology = &StormTopology{}
	if err := p.Topology.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Topology), err)
	}
	return nil
}

func (p *NimbusSubmitTopologyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "submitTopology_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusSubmitTopologyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *NimbusSubmitTopologyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "uploadedJarLocation", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uploadedJarLocation: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.UploadedJarLocation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uploadedJarLocation (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uploadedJarLocation: ", p), err)
	}
	return err
}

func (p *NimbusSubmitTopologyArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "jsonConf", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:jsonConf: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.JsonConf)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.jsonConf (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:jsonConf: ", p), err)
	}
	return err
}

func (p *NimbusSubmitTopologyArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "topology", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:topology: ", p), err)
	}
	if err := p.Topology.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Topology), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:topology: ", p), err)
	}
	return err
}

func (p *NimbusSubmitTopologyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusSubmitTopologyArgs(%+v)", *p)
}

func (p *NimbusSubmitTopologyArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusSubmitTopologyArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusSubmitTopologyArgs)(nil)

// Attributes:
//   - E
//   - Ite
//   - Aze
type NimbusSubmitTopologyResult struct {
	E   *AlreadyAliveException    `thrift:"e,1" db:"e" json:"e,omitempty"`
	Ite *InvalidTopologyException `thrift:"ite,2" db:"ite" json:"ite,omitempty"`
	Aze *AuthorizationException   `thrift:"aze,3" db:"aze" json:"aze,omitempty"`
}

func NewNimbusSubmitTopologyResult() *NimbusSubmitTopologyResult {
	return &NimbusSubmitTopologyResult{}
}

var NimbusSubmitTopologyResult_E_DEFAULT *AlreadyAliveException

func (p *NimbusSubmitTopologyResult) GetE() *AlreadyAliveException {
	if !p.IsSetE() {
		return NimbusSubmitTopologyResult_E_DEFAULT
	}
	return p.E
}

var NimbusSubmitTopologyResult_Ite_DEFAULT *InvalidTopologyException

func (p *NimbusSubmitTopologyResult) GetIte() *InvalidTopologyException {
	if !p.IsSetIte() {
		return NimbusSubmitTopologyResult_Ite_DEFAULT
	}
	return p.Ite
}

var NimbusSubmitTopologyResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusSubmitTopologyResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusSubmitTopologyResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusSubmitTopologyResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusSubmitTopologyResult) IsSetIte() bool {
	return p.Ite != nil
}

func (p *NimbusSubmitTopologyResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusSubmitTopologyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusSubmitTopologyResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &AlreadyAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusSubmitTopologyResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Ite = &InvalidTopologyException{}
	if err := p.Ite.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ite), err)
	}
	return nil
}

func (p *NimbusSubmitTopologyResult) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusSubmitTopologyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "submitTopology_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusSubmitTopologyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusSubmitTopologyResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIte() {
		if err := oprot.WriteFieldBegin(ctx, "ite", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ite: ", p), err)
		}
		if err := p.Ite.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ite), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ite: ", p), err)
		}
	}
	return err
}

func (p *NimbusSubmitTopologyResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusSubmitTopologyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusSubmitTopologyResult(%+v)", *p)
}

func (p *NimbusSubmitTopologyResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusSubmitTopologyResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusSubmitTopologyResult)(nil)

// Attributes:
//   - Name
//   - UploadedJarLocation
//   - JsonConf
//   - Topology
//   - Options
type NimbusSubmitTopologyWithOptsArgs struct {
	Name                string         `thrift:"name,1" db:"name" json:"name"`
	UploadedJarLocation string         `thrift:"uploadedJarLocation,2" db:"uploadedJarLocation" json:"uploadedJarLocation"`
	JsonConf            string         `thrift:"jsonConf,3" db:"jsonConf" json:"jsonConf"`
	Topology            *StormTopology `thrift:"topology,4" db:"topology" json:"topology"`
	Options             *SubmitOptions `thrift:"options,5" db:"options" json:"options"`
}

func NewNimbusSubmitTopologyWithOptsArgs() *NimbusSubmitTopologyWithOptsArgs {
	return &NimbusSubmitTopologyWithOptsArgs{}
}

func (p *NimbusSubmitTopologyWithOptsArgs) GetName() string {
	return p.Name
}

func (p *NimbusSubmitTopologyWithOptsArgs) GetUploadedJarLocation() string {
	return p.UploadedJarLocation
}

func (p *NimbusSubmitTopologyWithOptsArgs) GetJsonConf() string {
	return p.JsonConf
}

var NimbusSubmitTopologyWithOptsArgs_Topology_DEFAULT *StormTopology

func (p *NimbusSubmitTopologyWithOptsArgs) GetTopology() *StormTopology {
	if !p.IsSetTopology() {
		return NimbusSubmitTopologyWithOptsArgs_Topology_DEFAULT
	}
	return p.Topology
}

var NimbusSubmitTopologyWithOptsArgs_Options_DEFAULT *SubmitOptions

func (p *NimbusSubmitTopologyWithOptsArgs) GetOptions() *SubmitOptions {
	if !p.IsSetOptions() {
		return NimbusSubmitTopologyWithOptsArgs_Options_DEFAULT
	}
	return p.Options
}

func (p *NimbusSubmitTopologyWithOptsArgs) IsSetTopology() bool {
	return p.Topology != nil
}

func (p *NimbusSubmitTopologyWithOptsArgs) IsSetOptions() bool {
	return p.Options != nil
}

func (p *NimbusSubmitTopologyWithOptsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusSubmitTopologyWithOptsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *NimbusSubmitTopologyWithOptsArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UploadedJarLocation = v
	}
	return nil
}

func (p *NimbusSubmitTopologyWithOptsArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.JsonConf = v
	}
	return nil
}

func (p *NimbusSubmitTopologyWithOptsArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.Topology = &StormTopology{}
	if err := p.Topology.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Topology), err)
	}
	return nil
}

func (p *NimbusSubmitTopologyWithOptsArgs) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	p.Options = &SubmitOptions{}
	if err := p.Options.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
	}
	return nil
}

func (p *NimbusSubmitTopologyWithOptsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "submitTopologyWithOpts_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusSubmitTopologyWithOptsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *NimbusSubmitTopologyWithOptsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "uploadedJarLocation", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uploadedJarLocation: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.UploadedJarLocation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uploadedJarLocation (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uploadedJarLocation: ", p), err)
	}
	return err
}

func (p *NimbusSubmitTopologyWithOptsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "jsonConf", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:jsonConf: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.JsonConf)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.jsonConf (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:jsonConf: ", p), err)
	}
	return err
}

func (p *NimbusSubmitTopologyWithOptsArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "topology", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:topology: ", p), err)
	}
	if err := p.Topology.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Topology), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:topology: ", p), err)
	}
	return err
}

func (p *NimbusSubmitTopologyWithOptsArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "options", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:options: ", p), err)
	}
	if err := p.Options.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:options: ", p), err)
	}
	return err
}

func (p *NimbusSubmitTopologyWithOptsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusSubmitTopologyWithOptsArgs(%+v)", *p)
}

func (p *NimbusSubmitTopologyWithOptsArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusSubmitTopologyWithOptsArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusSubmitTopologyWithOptsArgs)(nil)

// Attributes:
//   - E
//   - Ite
//   - Aze
type NimbusSubmitTopologyWithOptsResult struct {
	E   *AlreadyAliveException    `thrift:"e,1" db:"e" json:"e,omitempty"`
	Ite *InvalidTopologyException `thrift:"ite,2" db:"ite" json:"ite,omitempty"`
	Aze *AuthorizationException   `thrift:"aze,3" db:"aze" json:"aze,omitempty"`
}

func NewNimbusSubmitTopologyWithOptsResult() *NimbusSubmitTopologyWithOptsResult {
	return &NimbusSubmitTopologyWithOptsResult{}
}

var NimbusSubmitTopologyWithOptsResult_E_DEFAULT *AlreadyAliveException

func (p *NimbusSubmitTopologyWithOptsResult) GetE() *AlreadyAliveException {
	if !p.IsSetE() {
		return NimbusSubmitTopologyWithOptsResult_E_DEFAULT
	}
	return p.E
}

var NimbusSubmitTopologyWithOptsResult_Ite_DEFAULT *InvalidTopologyException

func (p *NimbusSubmitTopologyWithOptsResult) GetIte() *InvalidTopologyException {
	if !p.IsSetIte() {
		return NimbusSubmitTopologyWithOptsResult_Ite_DEFAULT
	}
	return p.Ite
}

var NimbusSubmitTopologyWithOptsResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusSubmitTopologyWithOptsResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusSubmitTopologyWithOptsResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusSubmitTopologyWithOptsResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusSubmitTopologyWithOptsResult) IsSetIte() bool {
	return p.Ite != nil
}

func (p *NimbusSubmitTopologyWithOptsResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusSubmitTopologyWithOptsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusSubmitTopologyWithOptsResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &AlreadyAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusSubmitTopologyWithOptsResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Ite = &InvalidTopologyException{}
	if err := p.Ite.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ite), err)
	}
	return nil
}

func (p *NimbusSubmitTopologyWithOptsResult) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusSubmitTopologyWithOptsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "submitTopologyWithOpts_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusSubmitTopologyWithOptsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusSubmitTopologyWithOptsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIte() {
		if err := oprot.WriteFieldBegin(ctx, "ite", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ite: ", p), err)
		}
		if err := p.Ite.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ite), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ite: ", p), err)
		}
	}
	return err
}

func (p *NimbusSubmitTopologyWithOptsResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusSubmitTopologyWithOptsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusSubmitTopologyWithOptsResult(%+v)", *p)
}

func (p *NimbusSubmitTopologyWithOptsResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusSubmitTopologyWithOptsResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusSubmitTopologyWithOptsResult)(nil)

// Attributes:
//   - Name
type NimbusKillTopologyArgs struct {
	Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewNimbusKillTopologyArgs() *NimbusKillTopologyArgs {
	return &NimbusKillTopologyArgs{}
}

func (p *NimbusKillTopologyArgs) GetName() string {
	return p.Name
}

func (p *NimbusKillTopologyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusKillTopologyArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *NimbusKillTopologyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "killTopology_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusKillTopologyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *NimbusKillTopologyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusKillTopologyArgs(%+v)", *p)
}

func (p *NimbusKillTopologyArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusKillTopologyArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusKillTopologyArgs)(nil)

// Attributes:
//   - E
//   - Aze
type NimbusKillTopologyResult struct {
	E   *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewNimbusKillTopologyResult() *NimbusKillTopologyResult {
	return &NimbusKillTopologyResult{}
}

var NimbusKillTopologyResult_E_DEFAULT *NotAliveException

func (p *NimbusKillTopologyResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusKillTopologyResult_E_DEFAULT
	}
	return p.E
}

var NimbusKillTopologyResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusKillTopologyResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusKillTopologyResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusKillTopologyResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusKillTopologyResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusKillTopologyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusKillTopologyResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusKillTopologyResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusKillTopologyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "killTopology_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusKillTopologyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusKillTopologyResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusKillTopologyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusKillTopologyResult(%+v)", *p)
}

func (p *NimbusKillTopologyResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusKillTopologyResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusKillTopologyResult)(nil)

// Attributes:
//   - Name
//   - Options
type NimbusKillTopologyWithOptsArgs struct {
	Name    string       `thrift:"name,1" db:"name" json:"name"`
	Options *KillOptions `thrift:"options,2" db:"options" json:"options"`
}

func NewNimbusKillTopologyWithOptsArgs() *NimbusKillTopologyWithOptsArgs {
	return &NimbusKillTopologyWithOptsArgs{}
}

func (p *NimbusKillTopologyWithOptsArgs) GetName() string {
	return p.Name
}

var NimbusKillTopologyWithOptsArgs_Options_DEFAULT *KillOptions

func (p *NimbusKillTopologyWithOptsArgs) GetOptions() *KillOptions {
	if !p.IsSetOptions() {
		return NimbusKillTopologyWithOptsArgs_Options_DEFAULT
	}
	return p.Options
}

func (p *NimbusKillTopologyWithOptsArgs) IsSetOptions() bool {
	return p.Options != nil
}

func (p *NimbusKillTopologyWithOptsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusKillTopologyWithOptsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *NimbusKillTopologyWithOptsArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Options = &KillOptions{}
	if err := p.Options.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
	}
	return nil
}

func (p *NimbusKillTopologyWithOptsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "killTopologyWithOpts_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusKillTopologyWithOptsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *NimbusKillTopologyWithOptsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "options", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:options: ", p), err)
	}
	if err := p.Options.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:options: ", p), err)
	}
	return err
}

func (p *NimbusKillTopologyWithOptsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusKillTopologyWithOptsArgs(%+v)", *p)
}

func (p *NimbusKillTopologyWithOptsArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusKillTopologyWithOptsArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusKillTopologyWithOptsArgs)(nil)

// Attributes:
//   - E
//   - Aze
type NimbusKillTopologyWithOptsResult struct {
	E   *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewNimbusKillTopologyWithOptsResult() *NimbusKillTopologyWithOptsResult {
	return &NimbusKillTopologyWithOptsResult{}
}

var NimbusKillTopologyWithOptsResult_E_DEFAULT *NotAliveException

func (p *NimbusKillTopologyWithOptsResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusKillTopologyWithOptsResult_E_DEFAULT
	}
	return p.E
}

var NimbusKillTopologyWithOptsResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusKillTopologyWithOptsResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusKillTopologyWithOptsResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusKillTopologyWithOptsResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusKillTopologyWithOptsResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusKillTopologyWithOptsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusKillTopologyWithOptsResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusKillTopologyWithOptsResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusKillTopologyWithOptsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "killTopologyWithOpts_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusKillTopologyWithOptsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusKillTopologyWithOptsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusKillTopologyWithOptsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusKillTopologyWithOptsResult(%+v)", *p)
}

func (p *NimbusKillTopologyWithOptsResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusKillTopologyWithOptsResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusKillTopologyWithOptsResult)(nil)

// Attributes:
//   - Name
type NimbusActivateArgs struct {
	Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewNimbusActivateArgs() *NimbusActivateArgs {
	return &NimbusActivateArgs{}
}

func (p *NimbusActivateArgs) GetName() string {
	return p.Name
}

func (p *NimbusActivateArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusActivateArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *NimbusActivateArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "activate_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusActivateArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *NimbusActivateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusActivateArgs(%+v)", *p)
}

func (p *NimbusActivateArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusActivateArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusActivateArgs)(nil)

// Attributes:
//   - E
//   - Aze
type NimbusActivateResult struct {
	E   *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewNimbusActivateResult() *NimbusActivateResult {
	return &NimbusActivateResult{}
}

var NimbusActivateResult_E_DEFAULT *NotAliveException

func (p *NimbusActivateResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusActivateResult_E_DEFAULT
	}
	return p.E
}

var NimbusActivateResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusActivateResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusActivateResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusActivateResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusActivateResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusActivateResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusActivateResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusActivateResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusActivateResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "activate_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusActivateResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusActivateResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusActivateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusActivateResult(%+v)", *p)
}

func (p *NimbusActivateResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusActivateResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusActivateResult)(nil)

// Attributes:
//   - Name
type NimbusDeactivateArgs struct {
	Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewNimbusDeactivateArgs() *NimbusDeactivateArgs {
	return &NimbusDeactivateArgs{}
}

func (p *NimbusDeactivateArgs) GetName() string {
	return p.Name
}

func (p *NimbusDeactivateArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusDeactivateArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *NimbusDeactivateArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "deactivate_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusDeactivateArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *NimbusDeactivateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusDeactivateArgs(%+v)", *p)
}

func (p *NimbusDeactivateArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusDeactivateArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusDeactivateArgs)(nil)

// Attributes:
//   - E
//   - Aze
type NimbusDeactivateResult struct {
	E   *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewNimbusDeactivateResult() *NimbusDeactivateResult {
	return &NimbusDeactivateResult{}
}

var NimbusDeactivateResult_E_DEFAULT *NotAliveException

func (p *NimbusDeactivateResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusDeactivateResult_E_DEFAULT
	}
	return p.E
}

var NimbusDeactivateResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusDeactivateResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusDeactivateResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusDeactivateResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusDeactivateResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusDeactivateResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusDeactivateResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusDeactivateResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusDeactivateResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "deactivate_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusDeactivateResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusDeactivateResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusDeactivateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusDeactivateResult(%+v)", *p)
}

func (p *NimbusDeactivateResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusDeactivateResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusDeactivateResult)(nil)

// Attributes:
//   - Name
//   - Options
type NimbusRebalanceArgs struct {
	Name    string            `thrift:"name,1" db:"name" json:"name"`
	Options *RebalanceOptions `thrift:"options,2" db:"options" json:"options"`
}

func NewNimbusRebalanceArgs() *NimbusRebalanceArgs {
	return &NimbusRebalanceArgs{}
}

func (p *NimbusRebalanceArgs) GetName() string {
	return p.Name
}

var NimbusRebalanceArgs_Options_DEFAULT *RebalanceOptions

func (p *NimbusRebalanceArgs) GetOptions() *RebalanceOptions {
	if !p.IsSetOptions() {
		return NimbusRebalanceArgs_Options_DEFAULT
	}
	return p.Options
}

func (p *NimbusRebalanceArgs) IsSetOptions() bool {
	return p.Options != nil
}

func (p *NimbusRebalanceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusRebalanceArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *NimbusRebalanceArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Options = &RebalanceOptions{}
	if err := p.Options.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
	}
	return nil
}

func (p *NimbusRebalanceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "rebalance_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusRebalanceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *NimbusRebalanceArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "options", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:options: ", p), err)
	}
	if err := p.Options.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:options: ", p), err)
	}
	return err
}

func (p *NimbusRebalanceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusRebalanceArgs(%+v)", *p)
}

func (p *NimbusRebalanceArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusRebalanceArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusRebalanceArgs)(nil)

// Attributes:
//   - E
//   - Ite
//   - Aze
type NimbusRebalanceResult struct {
	E   *NotAliveException        `thrift:"e,1" db:"e" json:"e,omitempty"`
	Ite *InvalidTopologyException `thrift:"ite,2" db:"ite" json:"ite,omitempty"`
	Aze *AuthorizationException   `thrift:"aze,3" db:"aze" json:"aze,omitempty"`
}

func NewNimbusRebalanceResult() *NimbusRebalanceResult {
	return &NimbusRebalanceResult{}
}

var NimbusRebalanceResult_E_DEFAULT *NotAliveException

func (p *NimbusRebalanceResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusRebalanceResult_E_DEFAULT
	}
	return p.E
}

var NimbusRebalanceResult_Ite_DEFAULT *InvalidTopologyException

func (p *NimbusRebalanceResult) GetIte() *InvalidTopologyException {
	if !p.IsSetIte() {
		return NimbusRebalanceResult_Ite_DEFAULT
	}
	return p.Ite
}

var NimbusRebalanceResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusRebalanceResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusRebalanceResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusRebalanceResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusRebalanceResult) IsSetIte() bool {
	return p.Ite != nil
}

func (p *NimbusRebalanceResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusRebalanceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusRebalanceResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusRebalanceResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Ite = &InvalidTopologyException{}
	if err := p.Ite.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ite), err)
	}
	return nil
}

func (p *NimbusRebalanceResult) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusRebalanceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "rebalance_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusRebalanceResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusRebalanceResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIte() {
		if err := oprot.WriteFieldBegin(ctx, "ite", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ite: ", p), err)
		}
		if err := p.Ite.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ite), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ite: ", p), err)
		}
	}
	return err
}

func (p *NimbusRebalanceResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusRebalanceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusRebalanceResult(%+v)", *p)
}

func (p *NimbusRebalanceResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusRebalanceResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusRebalanceResult)(nil)

// Attributes:
//   - Name
//   - Config
type NimbusSetLogConfigArgs struct {
	Name   string     `thrift:"name,1" db:"name" json:"name"`
	Config *LogConfig `thrift:"config,2" db:"config" json:"config"`
}

func NewNimbusSetLogConfigArgs() *NimbusSetLogConfigArgs {
	return &NimbusSetLogConfigArgs{}
}

func (p *NimbusSetLogConfigArgs) GetName() string {
	return p.Name
}

var NimbusSetLogConfigArgs_Config_DEFAULT *LogConfig

func (p *NimbusSetLogConfigArgs) GetConfig() *LogConfig {
	if !p.IsSetConfig() {
		return NimbusSetLogConfigArgs_Config_DEFAULT
	}
	return p.Config
}

func (p *NimbusSetLogConfigArgs) IsSetConfig() bool {
	return p.Config != nil
}

func (p *NimbusSetLogConfigArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusSetLogConfigArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *NimbusSetLogConfigArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Config = &LogConfig{}
	if err := p.Config.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
	}
	return nil
}

func (p *NimbusSetLogConfigArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "setLogConfig_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusSetLogConfigArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *NimbusSetLogConfigArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "config", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:config: ", p), err)
	}
	if err := p.Config.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:config: ", p), err)
	}
	return err
}

func (p *NimbusSetLogConfigArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusSetLogConfigArgs(%+v)", *p)
}

func (p *NimbusSetLogConfigArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusSetLogConfigArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusSetLogConfigArgs)(nil)

type NimbusSetLogConfigResult struct {
}

func NewNimbusSetLogConfigResult() *NimbusSetLogConfigResult {
	return &NimbusSetLogConfigResult{}
}

func (p *NimbusSetLogConfigResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusSetLogConfigResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "setLogConfig_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusSetLogConfigResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusSetLogConfigResult(%+v)", *p)
}

func (p *NimbusSetLogConfigResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusSetLogConfigResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusSetLogConfigResult)(nil)

// Attributes:
//   - Name
type NimbusGetLogConfigArgs struct {
	Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewNimbusGetLogConfigArgs() *NimbusGetLogConfigArgs {
	return &NimbusGetLogConfigArgs{}
}

func (p *NimbusGetLogConfigArgs) GetName() string {
	return p.Name
}

func (p *NimbusGetLogConfigArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetLogConfigArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *NimbusGetLogConfigArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getLogConfig_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetLogConfigArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *NimbusGetLogConfigArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetLogConfigArgs(%+v)", *p)
}

func (p *NimbusGetLogConfigArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetLogConfigArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetLogConfigArgs)(nil)

// Attributes:
//   - Success
type NimbusGetLogConfigResult struct {
	Success *LogConfig `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewNimbusGetLogConfigResult() *NimbusGetLogConfigResult {
	return &NimbusGetLogConfigResult{}
}

var NimbusGetLogConfigResult_Success_DEFAULT *LogConfig

func (p *NimbusGetLogConfigResult) GetSuccess() *LogConfig {
	if !p.IsSetSuccess() {
		return NimbusGetLogConfigResult_Success_DEFAULT
	}
	return p.Success
}

func (p *NimbusGetLogConfigResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetLogConfigResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetLogConfigResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &LogConfig{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusGetLogConfigResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getLogConfig_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetLogConfigResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetLogConfigResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetLogConfigResult(%+v)", *p)
}

func (p *NimbusGetLogConfigResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetLogConfigResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetLogConfigResult)(nil)

// Attributes:
//   - Name
//   - Component
//   - Enable
//   - SamplingPercentage
type NimbusDebugArgs struct {
	Name               string  `thrift:"name,1" db:"name" json:"name"`
	Component          string  `thrift:"component,2" db:"component" json:"component"`
	Enable             bool    `thrift:"enable,3" db:"enable" json:"enable"`
	SamplingPercentage float64 `thrift:"samplingPercentage,4" db:"samplingPercentage" json:"samplingPercentage"`
}

func NewNimbusDebugArgs() *NimbusDebugArgs {
	return &NimbusDebugArgs{}
}

func (p *NimbusDebugArgs) GetName() string {
	return p.Name
}

func (p *NimbusDebugArgs) GetComponent() string {
	return p.Component
}

func (p *NimbusDebugArgs) GetEnable() bool {
	return p.Enable
}

func (p *NimbusDebugArgs) GetSamplingPercentage() float64 {
	return p.SamplingPercentage
}

func (p *NimbusDebugArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusDebugArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *NimbusDebugArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Component = v
	}
	return nil
}

func (p *NimbusDebugArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Enable = v
	}
	return nil
}

func (p *NimbusDebugArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SamplingPercentage = v
	}
	return nil
}

func (p *NimbusDebugArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "debug_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusDebugArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *NimbusDebugArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "component", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:component: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Component)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:component: ", p), err)
	}
	return err
}

func (p *NimbusDebugArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "enable", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:enable: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Enable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.enable (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:enable: ", p), err)
	}
	return err
}

func (p *NimbusDebugArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "samplingPercentage", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:samplingPercentage: ", p), err)
	}
	if err := oprot.WriteDouble(ctx, float64(p.SamplingPercentage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.samplingPercentage (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:samplingPercentage: ", p), err)
	}
	return err
}

func (p *NimbusDebugArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusDebugArgs(%+v)", *p)
}

func (p *NimbusDebugArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusDebugArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusDebugArgs)(nil)

// Attributes:
//   - E
//   - Aze
type NimbusDebugResult struct {
	E   *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewNimbusDebugResult() *NimbusDebugResult {
	return &NimbusDebugResult{}
}

var NimbusDebugResult_E_DEFAULT *NotAliveException

func (p *NimbusDebugResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusDebugResult_E_DEFAULT
	}
	return p.E
}

var NimbusDebugResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusDebugResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusDebugResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusDebugResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusDebugResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusDebugResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusDebugResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusDebugResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusDebugResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "debug_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusDebugResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusDebugResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusDebugResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusDebugResult(%+v)", *p)
}

func (p *NimbusDebugResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusDebugResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusDebugResult)(nil)

// Attributes:
//   - ID
//   - ProfileRequest
type NimbusSetWorkerProfilerArgs struct {
	ID             string          `thrift:"id,1" db:"id" json:"id"`
	ProfileRequest *ProfileRequest `thrift:"profileRequest,2" db:"profileRequest" json:"profileRequest"`
}

func NewNimbusSetWorkerProfilerArgs() *NimbusSetWorkerProfilerArgs {
	return &NimbusSetWorkerProfilerArgs{}
}

func (p *NimbusSetWorkerProfilerArgs) GetID() string {
	return p.ID
}

var NimbusSetWorkerProfilerArgs_ProfileRequest_DEFAULT *ProfileRequest

func (p *NimbusSetWorkerProfilerArgs) GetProfileRequest() *ProfileRequest {
	if !p.IsSetProfileRequest() {
		return NimbusSetWorkerProfilerArgs_ProfileRequest_DEFAULT
	}
	return p.ProfileRequest
}

func (p *NimbusSetWorkerProfilerArgs) IsSetProfileRequest() bool {
	return p.ProfileRequest != nil
}

func (p *NimbusSetWorkerProfilerArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusSetWorkerProfilerArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *NimbusSetWorkerProfilerArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.ProfileRequest = &ProfileRequest{}
	if err := p.ProfileRequest.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ProfileRequest), err)
	}
	return nil
}

func (p *NimbusSetWorkerProfilerArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "setWorkerProfiler_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusSetWorkerProfilerArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *NimbusSetWorkerProfilerArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "profileRequest", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:profileRequest: ", p), err)
	}
	if err := p.ProfileRequest.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ProfileRequest), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:profileRequest: ", p), err)
	}
	return err
}

func (p *NimbusSetWorkerProfilerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusSetWorkerProfilerArgs(%+v)", *p)
}

func (p *NimbusSetWorkerProfilerArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusSetWorkerProfilerArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusSetWorkerProfilerArgs)(nil)

type NimbusSetWorkerProfilerResult struct {
}

func NewNimbusSetWorkerProfilerResult() *NimbusSetWorkerProfilerResult {
	return &NimbusSetWorkerProfilerResult{}
}

func (p *NimbusSetWorkerProfilerResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusSetWorkerProfilerResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "setWorkerProfiler_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusSetWorkerProfilerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusSetWorkerProfilerResult(%+v)", *p)
}

func (p *NimbusSetWorkerProfilerResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusSetWorkerProfilerResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusSetWorkerProfilerResult)(nil)

// Attributes:
//   - ID
//   - ComponentID
//   - Action
type NimbusGetComponentPendingProfileActionsArgs struct {
	ID          string        `thrift:"id,1" db:"id" json:"id"`
	ComponentID string        `thrift:"component_id,2" db:"component_id" json:"component_id"`
	Action      ProfileAction `thrift:"action,3" db:"action" json:"action"`
}

func NewNimbusGetComponentPendingProfileActionsArgs() *NimbusGetComponentPendingProfileActionsArgs {
	return &NimbusGetComponentPendingProfileActionsArgs{}
}

func (p *NimbusGetComponentPendingProfileActionsArgs) GetID() string {
	return p.ID
}

func (p *NimbusGetComponentPendingProfileActionsArgs) GetComponentID() string {
	return p.ComponentID
}

func (p *NimbusGetComponentPendingProfileActionsArgs) GetAction() ProfileAction {
	return p.Action
}

func (p *NimbusGetComponentPendingProfileActionsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetComponentPendingProfileActionsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *NimbusGetComponentPendingProfileActionsArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ComponentID = v
	}
	return nil
}

func (p *NimbusGetComponentPendingProfileActionsArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := ProfileAction(v)
		p.Action = temp
	}
	return nil
}

func (p *NimbusGetComponentPendingProfileActionsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getComponentPendingProfileActions_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetComponentPendingProfileActionsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *NimbusGetComponentPendingProfileActionsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "component_id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:component_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ComponentID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:component_id: ", p), err)
	}
	return err
}

func (p *NimbusGetComponentPendingProfileActionsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "action", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:action: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Action)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.action (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:action: ", p), err)
	}
	return err
}

func (p *NimbusGetComponentPendingProfileActionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetComponentPendingProfileActionsArgs(%+v)", *p)
}

func (p *NimbusGetComponentPendingProfileActionsArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetComponentPendingProfileActionsArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetComponentPendingProfileActionsArgs)(nil)

// Attributes:
//   - Success
type NimbusGetComponentPendingProfileActionsResult struct {
	Success []*ProfileRequest `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewNimbusGetComponentPendingProfileActionsResult() *NimbusGetComponentPendingProfileActionsResult {
	return &NimbusGetComponentPendingProfileActionsResult{}
}

var NimbusGetComponentPendingProfileActionsResult_Success_DEFAULT []*ProfileRequest

func (p *NimbusGetComponentPendingProfileActionsResult) GetSuccess() []*ProfileRequest {
	return p.Success
}

func (p *NimbusGetComponentPendingProfileActionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetComponentPendingProfileActionsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetComponentPendingProfileActionsResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ProfileRequest, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem563 := &ProfileRequest{}
		if err := _elem563.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem563), err)
		}
		p.Success = append(p.Success, _elem563)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NimbusGetComponentPendingProfileActionsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getComponentPendingProfileActions_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetComponentPendingProfileActionsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetComponentPendingProfileActionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetComponentPendingProfileActionsResult(%+v)", *p)
}

func (p *NimbusGetComponentPendingProfileActionsResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetComponentPendingProfileActionsResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetComponentPendingProfileActionsResult)(nil)

// Attributes:
//   - Name
//   - Creds
type NimbusUploadNewCredentialsArgs struct {
	Name  string       `thrift:"name,1" db:"name" json:"name"`
	Creds *Credentials `thrift:"creds,2" db:"creds" json:"creds"`
}

func NewNimbusUploadNewCredentialsArgs() *NimbusUploadNewCredentialsArgs {
	return &NimbusUploadNewCredentialsArgs{}
}

func (p *NimbusUploadNewCredentialsArgs) GetName() string {
	return p.Name
}

var NimbusUploadNewCredentialsArgs_Creds_DEFAULT *Credentials

func (p *NimbusUploadNewCredentialsArgs) GetCreds() *Credentials {
	if !p.IsSetCreds() {
		return NimbusUploadNewCredentialsArgs_Creds_DEFAULT
	}
	return p.Creds
}

func (p *NimbusUploadNewCredentialsArgs) IsSetCreds() bool {
	return p.Creds != nil
}

func (p *NimbusUploadNewCredentialsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusUploadNewCredentialsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *NimbusUploadNewCredentialsArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Creds = &Credentials{}
	if err := p.Creds.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Creds), err)
	}
	return nil
}

func (p *NimbusUploadNewCredentialsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "uploadNewCredentials_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusUploadNewCredentialsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *NimbusUploadNewCredentialsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "creds", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:creds: ", p), err)
	}
	if err := p.Creds.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Creds), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:creds: ", p), err)
	}
	return err
}

func (p *NimbusUploadNewCredentialsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusUploadNewCredentialsArgs(%+v)", *p)
}

func (p *NimbusUploadNewCredentialsArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusUploadNewCredentialsArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusUploadNewCredentialsArgs)(nil)

// Attributes:
//   - E
//   - Ite
//   - Aze
type NimbusUploadNewCredentialsResult struct {
	E   *NotAliveException        `thrift:"e,1" db:"e" json:"e,omitempty"`
	Ite *InvalidTopologyException `thrift:"ite,2" db:"ite" json:"ite,omitempty"`
	Aze *AuthorizationException   `thrift:"aze,3" db:"aze" json:"aze,omitempty"`
}

func NewNimbusUploadNewCredentialsResult() *NimbusUploadNewCredentialsResult {
	return &NimbusUploadNewCredentialsResult{}
}

var NimbusUploadNewCredentialsResult_E_DEFAULT *NotAliveException

func (p *NimbusUploadNewCredentialsResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusUploadNewCredentialsResult_E_DEFAULT
	}
	return p.E
}

var NimbusUploadNewCredentialsResult_Ite_DEFAULT *InvalidTopologyException

func (p *NimbusUploadNewCredentialsResult) GetIte() *InvalidTopologyException {
	if !p.IsSetIte() {
		return NimbusUploadNewCredentialsResult_Ite_DEFAULT
	}
	return p.Ite
}

var NimbusUploadNewCredentialsResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusUploadNewCredentialsResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusUploadNewCredentialsResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusUploadNewCredentialsResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusUploadNewCredentialsResult) IsSetIte() bool {
	return p.Ite != nil
}

func (p *NimbusUploadNewCredentialsResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusUploadNewCredentialsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusUploadNewCredentialsResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusUploadNewCredentialsResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Ite = &InvalidTopologyException{}
	if err := p.Ite.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ite), err)
	}
	return nil
}

func (p *NimbusUploadNewCredentialsResult) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusUploadNewCredentialsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "uploadNewCredentials_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusUploadNewCredentialsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusUploadNewCredentialsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIte() {
		if err := oprot.WriteFieldBegin(ctx, "ite", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ite: ", p), err)
		}
		if err := p.Ite.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ite), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ite: ", p), err)
		}
	}
	return err
}

func (p *NimbusUploadNewCredentialsResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusUploadNewCredentialsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusUploadNewCredentialsResult(%+v)", *p)
}

func (p *NimbusUploadNewCredentialsResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusUploadNewCredentialsResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusUploadNewCredentialsResult)(nil)

// Attributes:
//   - Key
//   - Meta
type NimbusBeginCreateBlobArgs struct {
	Key  string            `thrift:"key,1" db:"key" json:"key"`
	Meta *SettableBlobMeta `thrift:"meta,2" db:"meta" json:"meta"`
}

func NewNimbusBeginCreateBlobArgs() *NimbusBeginCreateBlobArgs {
	return &NimbusBeginCreateBlobArgs{}
}

func (p *NimbusBeginCreateBlobArgs) GetKey() string {
	return p.Key
}

var NimbusBeginCreateBlobArgs_Meta_DEFAULT *SettableBlobMeta

func (p *NimbusBeginCreateBlobArgs) GetMeta() *SettableBlobMeta {
	if !p.IsSetMeta() {
		return NimbusBeginCreateBlobArgs_Meta_DEFAULT
	}
	return p.Meta
}

func (p *NimbusBeginCreateBlobArgs) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *NimbusBeginCreateBlobArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusBeginCreateBlobArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *NimbusBeginCreateBlobArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Meta = &SettableBlobMeta{}
	if err := p.Meta.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Meta), err)
	}
	return nil
}

func (p *NimbusBeginCreateBlobArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "beginCreateBlob_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusBeginCreateBlobArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *NimbusBeginCreateBlobArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "meta", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:meta: ", p), err)
	}
	if err := p.Meta.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Meta), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:meta: ", p), err)
	}
	return err
}

func (p *NimbusBeginCreateBlobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusBeginCreateBlobArgs(%+v)", *p)
}

func (p *NimbusBeginCreateBlobArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusBeginCreateBlobArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusBeginCreateBlobArgs)(nil)

// Attributes:
//   - Success
//   - Aze
//   - Kae
type NimbusBeginCreateBlobResult struct {
	Success *string                    `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException    `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
	Kae     *KeyAlreadyExistsException `thrift:"kae,2" db:"kae" json:"kae,omitempty"`
}

func NewNimbusBeginCreateBlobResult() *NimbusBeginCreateBlobResult {
	return &NimbusBeginCreateBlobResult{}
}

var NimbusBeginCreateBlobResult_Success_DEFAULT string

func (p *NimbusBeginCreateBlobResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return NimbusBeginCreateBlobResult_Success_DEFAULT
	}
	return *p.Success
}

var NimbusBeginCreateBlobResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusBeginCreateBlobResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusBeginCreateBlobResult_Aze_DEFAULT
	}
	return p.Aze
}

var NimbusBeginCreateBlobResult_Kae_DEFAULT *KeyAlreadyExistsException

func (p *NimbusBeginCreateBlobResult) GetKae() *KeyAlreadyExistsException {
	if !p.IsSetKae() {
		return NimbusBeginCreateBlobResult_Kae_DEFAULT
	}
	return p.Kae
}

func (p *NimbusBeginCreateBlobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusBeginCreateBlobResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusBeginCreateBlobResult) IsSetKae() bool {
	return p.Kae != nil
}

func (p *NimbusBeginCreateBlobResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusBeginCreateBlobResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NimbusBeginCreateBlobResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusBeginCreateBlobResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Kae = &KeyAlreadyExistsException{}
	if err := p.Kae.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Kae), err)
	}
	return nil
}

func (p *NimbusBeginCreateBlobResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "beginCreateBlob_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusBeginCreateBlobResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusBeginCreateBlobResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusBeginCreateBlobResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetKae() {
		if err := oprot.WriteFieldBegin(ctx, "kae", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:kae: ", p), err)
		}
		if err := p.Kae.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Kae), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:kae: ", p), err)
		}
	}
	return err
}

func (p *NimbusBeginCreateBlobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusBeginCreateBlobResult(%+v)", *p)
}

func (p *NimbusBeginCreateBlobResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusBeginCreateBlobResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusBeginCreateBlobResult)(nil)

// Attributes:
//   - Key
type NimbusBeginUpdateBlobArgs struct {
	Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewNimbusBeginUpdateBlobArgs() *NimbusBeginUpdateBlobArgs {
	return &NimbusBeginUpdateBlobArgs{}
}

func (p *NimbusBeginUpdateBlobArgs) GetKey() string {
	return p.Key
}

func (p *NimbusBeginUpdateBlobArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusBeginUpdateBlobArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *NimbusBeginUpdateBlobArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "beginUpdateBlob_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusBeginUpdateBlobArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *NimbusBeginUpdateBlobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusBeginUpdateBlobArgs(%+v)", *p)
}

func (p *NimbusBeginUpdateBlobArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusBeginUpdateBlobArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusBeginUpdateBlobArgs)(nil)

// Attributes:
//   - Success
//   - Aze
//   - Knf
type NimbusBeginUpdateBlobResult struct {
	Success *string                 `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
	Knf     *KeyNotFoundException   `thrift:"knf,2" db:"knf" json:"knf,omitempty"`
}

func NewNimbusBeginUpdateBlobResult() *NimbusBeginUpdateBlobResult {
	return &NimbusBeginUpdateBlobResult{}
}

var NimbusBeginUpdateBlobResult_Success_DEFAULT string

func (p *NimbusBeginUpdateBlobResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return NimbusBeginUpdateBlobResult_Success_DEFAULT
	}
	return *p.Success
}

var NimbusBeginUpdateBlobResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusBeginUpdateBlobResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusBeginUpdateBlobResult_Aze_DEFAULT
	}
	return p.Aze
}

var NimbusBeginUpdateBlobResult_Knf_DEFAULT *KeyNotFoundException

func (p *NimbusBeginUpdateBlobResult) GetKnf() *KeyNotFoundException {
	if !p.IsSetKnf() {
		return NimbusBeginUpdateBlobResult_Knf_DEFAULT
	}
	return p.Knf
}

func (p *NimbusBeginUpdateBlobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusBeginUpdateBlobResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusBeginUpdateBlobResult) IsSetKnf() bool {
	return p.Knf != nil
}

func (p *NimbusBeginUpdateBlobResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusBeginUpdateBlobResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NimbusBeginUpdateBlobResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusBeginUpdateBlobResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Knf = &KeyNotFoundException{}
	if err := p.Knf.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Knf), err)
	}
	return nil
}

func (p *NimbusBeginUpdateBlobResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "beginUpdateBlob_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusBeginUpdateBlobResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusBeginUpdateBlobResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusBeginUpdateBlobResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetKnf() {
		if err := oprot.WriteFieldBegin(ctx, "knf", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:knf: ", p), err)
		}
		if err := p.Knf.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Knf), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:knf: ", p), err)
		}
	}
	return err
}

func (p *NimbusBeginUpdateBlobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusBeginUpdateBlobResult(%+v)", *p)
}

func (p *NimbusBeginUpdateBlobResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusBeginUpdateBlobResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusBeginUpdateBlobResult)(nil)

// Attributes:
//   - Session
//   - Chunk
type NimbusUploadBlobChunkArgs struct {
	Session string `thrift:"session,1" db:"session" json:"session"`
	Chunk   []byte `thrift:"chunk,2" db:"chunk" json:"chunk"`
}

func NewNimbusUploadBlobChunkArgs() *NimbusUploadBlobChunkArgs {
	return &NimbusUploadBlobChunkArgs{}
}

func (p *NimbusUploadBlobChunkArgs) GetSession() string {
	return p.Session
}

func (p *NimbusUploadBlobChunkArgs) GetChunk() []byte {
	return p.Chunk
}

func (p *NimbusUploadBlobChunkArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusUploadBlobChunkArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Session = v
	}
	return nil
}

func (p *NimbusUploadBlobChunkArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Chunk = v
	}
	return nil
}

func (p *NimbusUploadBlobChunkArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "uploadBlobChunk_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusUploadBlobChunkArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *NimbusUploadBlobChunkArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chunk", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chunk: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Chunk); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chunk (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chunk: ", p), err)
	}
	return err
}

func (p *NimbusUploadBlobChunkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusUploadBlobChunkArgs(%+v)", *p)
}

func (p *NimbusUploadBlobChunkArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusUploadBlobChunkArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusUploadBlobChunkArgs)(nil)

// Attributes:
//   - Aze
type NimbusUploadBlobChunkResult struct {
	Aze *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusUploadBlobChunkResult() *NimbusUploadBlobChunkResult {
	return &NimbusUploadBlobChunkResult{}
}

var NimbusUploadBlobChunkResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusUploadBlobChunkResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusUploadBlobChunkResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusUploadBlobChunkResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusUploadBlobChunkResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusUploadBlobChunkResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusUploadBlobChunkResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "uploadBlobChunk_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusUploadBlobChunkResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusUploadBlobChunkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusUploadBlobChunkResult(%+v)", *p)
}

func (p *NimbusUploadBlobChunkResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusUploadBlobChunkResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusUploadBlobChunkResult)(nil)

// Attributes:
//   - Session
type NimbusFinishBlobUploadArgs struct {
	Session string `thrift:"session,1" db:"session" json:"session"`
}

func NewNimbusFinishBlobUploadArgs() *NimbusFinishBlobUploadArgs {
	return &NimbusFinishBlobUploadArgs{}
}

func (p *NimbusFinishBlobUploadArgs) GetSession() string {
	return p.Session
}

func (p *NimbusFinishBlobUploadArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusFinishBlobUploadArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Session = v
	}
	return nil
}

func (p *NimbusFinishBlobUploadArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "finishBlobUpload_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusFinishBlobUploadArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *NimbusFinishBlobUploadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusFinishBlobUploadArgs(%+v)", *p)
}

func (p *NimbusFinishBlobUploadArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusFinishBlobUploadArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusFinishBlobUploadArgs)(nil)

// Attributes:
//   - Aze
type NimbusFinishBlobUploadResult struct {
	Aze *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusFinishBlobUploadResult() *NimbusFinishBlobUploadResult {
	return &NimbusFinishBlobUploadResult{}
}

var NimbusFinishBlobUploadResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusFinishBlobUploadResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusFinishBlobUploadResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusFinishBlobUploadResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusFinishBlobUploadResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusFinishBlobUploadResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusFinishBlobUploadResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "finishBlobUpload_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusFinishBlobUploadResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusFinishBlobUploadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusFinishBlobUploadResult(%+v)", *p)
}

func (p *NimbusFinishBlobUploadResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusFinishBlobUploadResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusFinishBlobUploadResult)(nil)

// Attributes:
//   - Session
type NimbusCancelBlobUploadArgs struct {
	Session string `thrift:"session,1" db:"session" json:"session"`
}

func NewNimbusCancelBlobUploadArgs() *NimbusCancelBlobUploadArgs {
	return &NimbusCancelBlobUploadArgs{}
}

func (p *NimbusCancelBlobUploadArgs) GetSession() string {
	return p.Session
}

func (p *NimbusCancelBlobUploadArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusCancelBlobUploadArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Session = v
	}
	return nil
}

func (p *NimbusCancelBlobUploadArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "cancelBlobUpload_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusCancelBlobUploadArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *NimbusCancelBlobUploadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusCancelBlobUploadArgs(%+v)", *p)
}

func (p *NimbusCancelBlobUploadArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusCancelBlobUploadArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusCancelBlobUploadArgs)(nil)

// Attributes:
//   - Aze
type NimbusCancelBlobUploadResult struct {
	Aze *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusCancelBlobUploadResult() *NimbusCancelBlobUploadResult {
	return &NimbusCancelBlobUploadResult{}
}

var NimbusCancelBlobUploadResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusCancelBlobUploadResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusCancelBlobUploadResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusCancelBlobUploadResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusCancelBlobUploadResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusCancelBlobUploadResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusCancelBlobUploadResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "cancelBlobUpload_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusCancelBlobUploadResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusCancelBlobUploadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusCancelBlobUploadResult(%+v)", *p)
}

func (p *NimbusCancelBlobUploadResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusCancelBlobUploadResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusCancelBlobUploadResult)(nil)

// Attributes:
//   - Key
type NimbusGetBlobMetaArgs struct {
	Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewNimbusGetBlobMetaArgs() *NimbusGetBlobMetaArgs {
	return &NimbusGetBlobMetaArgs{}
}

func (p *NimbusGetBlobMetaArgs) GetKey() string {
	return p.Key
}

func (p *NimbusGetBlobMetaArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetBlobMetaArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *NimbusGetBlobMetaArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getBlobMeta_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetBlobMetaArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *NimbusGetBlobMetaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetBlobMetaArgs(%+v)", *p)
}

func (p *NimbusGetBlobMetaArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetBlobMetaArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetBlobMetaArgs)(nil)

// Attributes:
//   - Success
//   - Aze
//   - Knf
type NimbusGetBlobMetaResult struct {
	Success *ReadableBlobMeta       `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
	Knf     *KeyNotFoundException   `thrift:"knf,2" db:"knf" json:"knf,omitempty"`
}

func NewNimbusGetBlobMetaResult() *NimbusGetBlobMetaResult {
	return &NimbusGetBlobMetaResult{}
}

var NimbusGetBlobMetaResult_Success_DEFAULT *ReadableBlobMeta

func (p *NimbusGetBlobMetaResult) GetSuccess() *ReadableBlobMeta {
	if !p.IsSetSuccess() {
		return NimbusGetBlobMetaResult_Success_DEFAULT
	}
	return p.Success
}

var NimbusGetBlobMetaResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetBlobMetaResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetBlobMetaResult_Aze_DEFAULT
	}
	return p.Aze
}

var NimbusGetBlobMetaResult_Knf_DEFAULT *KeyNotFoundException

func (p *NimbusGetBlobMetaResult) GetKnf() *KeyNotFoundException {
	if !p.IsSetKnf() {
		return NimbusGetBlobMetaResult_Knf_DEFAULT
	}
	return p.Knf
}

func (p *NimbusGetBlobMetaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetBlobMetaResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetBlobMetaResult) IsSetKnf() bool {
	return p.Knf != nil
}

func (p *NimbusGetBlobMetaResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetBlobMetaResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &ReadableBlobMeta{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusGetBlobMetaResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetBlobMetaResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Knf = &KeyNotFoundException{}
	if err := p.Knf.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Knf), err)
	}
	return nil
}

func (p *NimbusGetBlobMetaResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getBlobMeta_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetBlobMetaResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetBlobMetaResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetBlobMetaResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetKnf() {
		if err := oprot.WriteFieldBegin(ctx, "knf", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:knf: ", p), err)
		}
		if err := p.Knf.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Knf), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:knf: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetBlobMetaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetBlobMetaResult(%+v)", *p)
}

func (p *NimbusGetBlobMetaResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetBlobMetaResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetBlobMetaResult)(nil)

// Attributes:
//   - Key
//   - Meta
type NimbusSetBlobMetaArgs struct {
	Key  string            `thrift:"key,1" db:"key" json:"key"`
	Meta *SettableBlobMeta `thrift:"meta,2" db:"meta" json:"meta"`
}

func NewNimbusSetBlobMetaArgs() *NimbusSetBlobMetaArgs {
	return &NimbusSetBlobMetaArgs{}
}

func (p *NimbusSetBlobMetaArgs) GetKey() string {
	return p.Key
}

var NimbusSetBlobMetaArgs_Meta_DEFAULT *SettableBlobMeta

func (p *NimbusSetBlobMetaArgs) GetMeta() *SettableBlobMeta {
	if !p.IsSetMeta() {
		return NimbusSetBlobMetaArgs_Meta_DEFAULT
	}
	return p.Meta
}

func (p *NimbusSetBlobMetaArgs) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *NimbusSetBlobMetaArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusSetBlobMetaArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *NimbusSetBlobMetaArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Meta = &SettableBlobMeta{}
	if err := p.Meta.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Meta), err)
	}
	return nil
}

func (p *NimbusSetBlobMetaArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "setBlobMeta_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusSetBlobMetaArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *NimbusSetBlobMetaArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "meta", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:meta: ", p), err)
	}
	if err := p.Meta.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Meta), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:meta: ", p), err)
	}
	return err
}

func (p *NimbusSetBlobMetaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusSetBlobMetaArgs(%+v)", *p)
}

func (p *NimbusSetBlobMetaArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusSetBlobMetaArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusSetBlobMetaArgs)(nil)

// Attributes:
//   - Aze
//   - Knf
type NimbusSetBlobMetaResult struct {
	Aze *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
	Knf *KeyNotFoundException   `thrift:"knf,2" db:"knf" json:"knf,omitempty"`
}

func NewNimbusSetBlobMetaResult() *NimbusSetBlobMetaResult {
	return &NimbusSetBlobMetaResult{}
}

var NimbusSetBlobMetaResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusSetBlobMetaResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusSetBlobMetaResult_Aze_DEFAULT
	}
	return p.Aze
}

var NimbusSetBlobMetaResult_Knf_DEFAULT *KeyNotFoundException

func (p *NimbusSetBlobMetaResult) GetKnf() *KeyNotFoundException {
	if !p.IsSetKnf() {
		return NimbusSetBlobMetaResult_Knf_DEFAULT
	}
	return p.Knf
}

func (p *NimbusSetBlobMetaResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusSetBlobMetaResult) IsSetKnf() bool {
	return p.Knf != nil
}

func (p *NimbusSetBlobMetaResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusSetBlobMetaResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusSetBlobMetaResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Knf = &KeyNotFoundException{}
	if err := p.Knf.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Knf), err)
	}
	return nil
}

func (p *NimbusSetBlobMetaResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "setBlobMeta_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusSetBlobMetaResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusSetBlobMetaResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetKnf() {
		if err := oprot.WriteFieldBegin(ctx, "knf", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:knf: ", p), err)
		}
		if err := p.Knf.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Knf), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:knf: ", p), err)
		}
	}
	return err
}

func (p *NimbusSetBlobMetaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusSetBlobMetaResult(%+v)", *p)
}

func (p *NimbusSetBlobMetaResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusSetBlobMetaResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusSetBlobMetaResult)(nil)

// Attributes:
//   - Key
type NimbusBeginBlobDownloadArgs struct {
	Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewNimbusBeginBlobDownloadArgs() *NimbusBeginBlobDownloadArgs {
	return &NimbusBeginBlobDownloadArgs{}
}

func (p *NimbusBeginBlobDownloadArgs) GetKey() string {
	return p.Key
}

func (p *NimbusBeginBlobDownloadArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusBeginBlobDownloadArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *NimbusBeginBlobDownloadArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "beginBlobDownload_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusBeginBlobDownloadArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *NimbusBeginBlobDownloadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusBeginBlobDownloadArgs(%+v)", *p)
}

func (p *NimbusBeginBlobDownloadArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusBeginBlobDownloadArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusBeginBlobDownloadArgs)(nil)

// Attributes:
//   - Success
//   - Aze
//   - Knf
type NimbusBeginBlobDownloadResult struct {
	Success *BeginDownloadResult_   `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
	Knf     *KeyNotFoundException   `thrift:"knf,2" db:"knf" json:"knf,omitempty"`
}

func NewNimbusBeginBlobDownloadResult() *NimbusBeginBlobDownloadResult {
	return &NimbusBeginBlobDownloadResult{}
}

var NimbusBeginBlobDownloadResult_Success_DEFAULT *BeginDownloadResult_

func (p *NimbusBeginBlobDownloadResult) GetSuccess() *BeginDownloadResult_ {
	if !p.IsSetSuccess() {
		return NimbusBeginBlobDownloadResult_Success_DEFAULT
	}
	return p.Success
}

var NimbusBeginBlobDownloadResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusBeginBlobDownloadResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusBeginBlobDownloadResult_Aze_DEFAULT
	}
	return p.Aze
}

var NimbusBeginBlobDownloadResult_Knf_DEFAULT *KeyNotFoundException

func (p *NimbusBeginBlobDownloadResult) GetKnf() *KeyNotFoundException {
	if !p.IsSetKnf() {
		return NimbusBeginBlobDownloadResult_Knf_DEFAULT
	}
	return p.Knf
}

func (p *NimbusBeginBlobDownloadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusBeginBlobDownloadResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusBeginBlobDownloadResult) IsSetKnf() bool {
	return p.Knf != nil
}

func (p *NimbusBeginBlobDownloadResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusBeginBlobDownloadResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &BeginDownloadResult_{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusBeginBlobDownloadResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusBeginBlobDownloadResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Knf = &KeyNotFoundException{}
	if err := p.Knf.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Knf), err)
	}
	return nil
}

func (p *NimbusBeginBlobDownloadResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "beginBlobDownload_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusBeginBlobDownloadResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusBeginBlobDownloadResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusBeginBlobDownloadResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetKnf() {
		if err := oprot.WriteFieldBegin(ctx, "knf", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:knf: ", p), err)
		}
		if err := p.Knf.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Knf), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:knf: ", p), err)
		}
	}
	return err
}

func (p *NimbusBeginBlobDownloadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusBeginBlobDownloadResult(%+v)", *p)
}

func (p *NimbusBeginBlobDownloadResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusBeginBlobDownloadResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusBeginBlobDownloadResult)(nil)

// Attributes:
//   - Session
type NimbusDownloadBlobChunkArgs struct {
	Session string `thrift:"session,1" db:"session" json:"session"`
}

func NewNimbusDownloadBlobChunkArgs() *NimbusDownloadBlobChunkArgs {
	return &NimbusDownloadBlobChunkArgs{}
}

func (p *NimbusDownloadBlobChunkArgs) GetSession() string {
	return p.Session
}

func (p *NimbusDownloadBlobChunkArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusDownloadBlobChunkArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Session = v
	}
	return nil
}

func (p *NimbusDownloadBlobChunkArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "downloadBlobChunk_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusDownloadBlobChunkArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *NimbusDownloadBlobChunkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusDownloadBlobChunkArgs(%+v)", *p)
}

func (p *NimbusDownloadBlobChunkArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusDownloadBlobChunkArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusDownloadBlobChunkArgs)(nil)

// Attributes:
//   - Success
//   - Aze
type NimbusDownloadBlobChunkResult struct {
	Success []byte                  `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusDownloadBlobChunkResult() *NimbusDownloadBlobChunkResult {
	return &NimbusDownloadBlobChunkResult{}
}

var NimbusDownloadBlobChunkResult_Success_DEFAULT []byte

func (p *NimbusDownloadBlobChunkResult) GetSuccess() []byte {
	return p.Success
}

var NimbusDownloadBlobChunkResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusDownloadBlobChunkResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusDownloadBlobChunkResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusDownloadBlobChunkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusDownloadBlobChunkResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusDownloadBlobChunkResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusDownloadBlobChunkResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *NimbusDownloadBlobChunkResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusDownloadBlobChunkResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "downloadBlobChunk_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusDownloadBlobChunkResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.Success); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusDownloadBlobChunkResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusDownloadBlobChunkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusDownloadBlobChunkResult(%+v)", *p)
}

func (p *NimbusDownloadBlobChunkResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusDownloadBlobChunkResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusDownloadBlobChunkResult)(nil)

// Attributes:
//   - Key
type NimbusDeleteBlobArgs struct {
	Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewNimbusDeleteBlobArgs() *NimbusDeleteBlobArgs {
	return &NimbusDeleteBlobArgs{}
}

func (p *NimbusDeleteBlobArgs) GetKey() string {
	return p.Key
}

func (p *NimbusDeleteBlobArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusDeleteBlobArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *NimbusDeleteBlobArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "deleteBlob_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusDeleteBlobArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *NimbusDeleteBlobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusDeleteBlobArgs(%+v)", *p)
}

func (p *NimbusDeleteBlobArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusDeleteBlobArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusDeleteBlobArgs)(nil)

// Attributes:
//   - Aze
//   - Knf
//   - Ise
type NimbusDeleteBlobResult struct {
	Aze *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
	Knf *KeyNotFoundException   `thrift:"knf,2" db:"knf" json:"knf,omitempty"`
	Ise *IllegalStateException  `thrift:"ise,3" db:"ise" json:"ise,omitempty"`
}

func NewNimbusDeleteBlobResult() *NimbusDeleteBlobResult {
	return &NimbusDeleteBlobResult{}
}

var NimbusDeleteBlobResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusDeleteBlobResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusDeleteBlobResult_Aze_DEFAULT
	}
	return p.Aze
}

var NimbusDeleteBlobResult_Knf_DEFAULT *KeyNotFoundException

func (p *NimbusDeleteBlobResult) GetKnf() *KeyNotFoundException {
	if !p.IsSetKnf() {
		return NimbusDeleteBlobResult_Knf_DEFAULT
	}
	return p.Knf
}

var NimbusDeleteBlobResult_Ise_DEFAULT *IllegalStateException

func (p *NimbusDeleteBlobResult) GetIse() *IllegalStateException {
	if !p.IsSetIse() {
		return NimbusDeleteBlobResult_Ise_DEFAULT
	}
	return p.Ise
}

func (p *NimbusDeleteBlobResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusDeleteBlobResult) IsSetKnf() bool {
	return p.Knf != nil
}

func (p *NimbusDeleteBlobResult) IsSetIse() bool {
	return p.Ise != nil
}

func (p *NimbusDeleteBlobResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusDeleteBlobResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusDeleteBlobResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Knf = &KeyNotFoundException{}
	if err := p.Knf.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Knf), err)
	}
	return nil
}

func (p *NimbusDeleteBlobResult) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.Ise = &IllegalStateException{}
	if err := p.Ise.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ise), err)
	}
	return nil
}

func (p *NimbusDeleteBlobResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "deleteBlob_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusDeleteBlobResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusDeleteBlobResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetKnf() {
		if err := oprot.WriteFieldBegin(ctx, "knf", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:knf: ", p), err)
		}
		if err := p.Knf.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Knf), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:knf: ", p), err)
		}
	}
	return err
}

func (p *NimbusDeleteBlobResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIse() {
		if err := oprot.WriteFieldBegin(ctx, "ise", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ise: ", p), err)
		}
		if err := p.Ise.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ise), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ise: ", p), err)
		}
	}
	return err
}

func (p *NimbusDeleteBlobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusDeleteBlobResult(%+v)", *p)
}

func (p *NimbusDeleteBlobResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusDeleteBlobResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusDeleteBlobResult)(nil)

// Attributes:
//   - Session
type NimbusListBlobsArgs struct {
	Session string `thrift:"session,1" db:"session" json:"session"`
}

func NewNimbusListBlobsArgs() *NimbusListBlobsArgs {
	return &NimbusListBlobsArgs{}
}

func (p *NimbusListBlobsArgs) GetSession() string {
	return p.Session
}

func (p *NimbusListBlobsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusListBlobsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Session = v
	}
	return nil
}

func (p *NimbusListBlobsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "listBlobs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusListBlobsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "session", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Session)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.session (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session: ", p), err)
	}
	return err
}

func (p *NimbusListBlobsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusListBlobsArgs(%+v)", *p)
}

func (p *NimbusListBlobsArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusListBlobsArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusListBlobsArgs)(nil)

// Attributes:
//   - Success
type NimbusListBlobsResult struct {
	Success *ListBlobsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewNimbusListBlobsResult() *NimbusListBlobsResult {
	return &NimbusListBlobsResult{}
}

var NimbusListBlobsResult_Success_DEFAULT *ListBlobsResult_

func (p *NimbusListBlobsResult) GetSuccess() *ListBlobsResult_ {
	if !p.IsSetSuccess() {
		return NimbusListBlobsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *NimbusListBlobsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusListBlobsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusListBlobsResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &ListBlobsResult_{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusListBlobsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "listBlobs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusListBlobsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusListBlobsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusListBlobsResult(%+v)", *p)
}

func (p *NimbusListBlobsResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusListBlobsResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusListBlobsResult)(nil)

// Attributes:
//   - Key
type NimbusGetBlobReplicationArgs struct {
	Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewNimbusGetBlobReplicationArgs() *NimbusGetBlobReplicationArgs {
	return &NimbusGetBlobReplicationArgs{}
}

func (p *NimbusGetBlobReplicationArgs) GetKey() string {
	return p.Key
}

func (p *NimbusGetBlobReplicationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetBlobReplicationArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *NimbusGetBlobReplicationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getBlobReplication_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetBlobReplicationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *NimbusGetBlobReplicationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetBlobReplicationArgs(%+v)", *p)
}

func (p *NimbusGetBlobReplicationArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetBlobReplicationArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetBlobReplicationArgs)(nil)

// Attributes:
//   - Success
//   - Aze
//   - Knf
type NimbusGetBlobReplicationResult struct {
	Success *int32                  `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
	Knf     *KeyNotFoundException   `thrift:"knf,2" db:"knf" json:"knf,omitempty"`
}

func NewNimbusGetBlobReplicationResult() *NimbusGetBlobReplicationResult {
	return &NimbusGetBlobReplicationResult{}
}

var NimbusGetBlobReplicationResult_Success_DEFAULT int32

func (p *NimbusGetBlobReplicationResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NimbusGetBlobReplicationResult_Success_DEFAULT
	}
	return *p.Success
}

var NimbusGetBlobReplicationResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetBlobReplicationResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetBlobReplicationResult_Aze_DEFAULT
	}
	return p.Aze
}

var NimbusGetBlobReplicationResult_Knf_DEFAULT *KeyNotFoundException

func (p *NimbusGetBlobReplicationResult) GetKnf() *KeyNotFoundException {
	if !p.IsSetKnf() {
		return NimbusGetBlobReplicationResult_Knf_DEFAULT
	}
	return p.Knf
}

func (p *NimbusGetBlobReplicationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetBlobReplicationResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetBlobReplicationResult) IsSetKnf() bool {
	return p.Knf != nil
}

func (p *NimbusGetBlobReplicationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetBlobReplicationResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NimbusGetBlobReplicationResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetBlobReplicationResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Knf = &KeyNotFoundException{}
	if err := p.Knf.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Knf), err)
	}
	return nil
}

func (p *NimbusGetBlobReplicationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getBlobReplication_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetBlobReplicationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetBlobReplicationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetBlobReplicationResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetKnf() {
		if err := oprot.WriteFieldBegin(ctx, "knf", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:knf: ", p), err)
		}
		if err := p.Knf.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Knf), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:knf: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetBlobReplicationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetBlobReplicationResult(%+v)", *p)
}

func (p *NimbusGetBlobReplicationResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetBlobReplicationResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetBlobReplicationResult)(nil)

// Attributes:
//   - Key
//   - Replication
type NimbusUpdateBlobReplicationArgs struct {
	Key         string `thrift:"key,1" db:"key" json:"key"`
	Replication int32  `thrift:"replication,2" db:"replication" json:"replication"`
}

func NewNimbusUpdateBlobReplicationArgs() *NimbusUpdateBlobReplicationArgs {
	return &NimbusUpdateBlobReplicationArgs{}
}

func (p *NimbusUpdateBlobReplicationArgs) GetKey() string {
	return p.Key
}

func (p *NimbusUpdateBlobReplicationArgs) GetReplication() int32 {
	return p.Replication
}

func (p *NimbusUpdateBlobReplicationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusUpdateBlobReplicationArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *NimbusUpdateBlobReplicationArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Replication = v
	}
	return nil
}

func (p *NimbusUpdateBlobReplicationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "updateBlobReplication_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusUpdateBlobReplicationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *NimbusUpdateBlobReplicationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "replication", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:replication: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Replication)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.replication (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:replication: ", p), err)
	}
	return err
}

func (p *NimbusUpdateBlobReplicationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusUpdateBlobReplicationArgs(%+v)", *p)
}

func (p *NimbusUpdateBlobReplicationArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusUpdateBlobReplicationArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusUpdateBlobReplicationArgs)(nil)

// Attributes:
//   - Success
//   - Aze
//   - Knf
type NimbusUpdateBlobReplicationResult struct {
	Success *int32                  `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
	Knf     *KeyNotFoundException   `thrift:"knf,2" db:"knf" json:"knf,omitempty"`
}

func NewNimbusUpdateBlobReplicationResult() *NimbusUpdateBlobReplicationResult {
	return &NimbusUpdateBlobReplicationResult{}
}

var NimbusUpdateBlobReplicationResult_Success_DEFAULT int32

func (p *NimbusUpdateBlobReplicationResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NimbusUpdateBlobReplicationResult_Success_DEFAULT
	}
	return *p.Success
}

var NimbusUpdateBlobReplicationResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusUpdateBlobReplicationResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusUpdateBlobReplicationResult_Aze_DEFAULT
	}
	return p.Aze
}

var NimbusUpdateBlobReplicationResult_Knf_DEFAULT *KeyNotFoundException

func (p *NimbusUpdateBlobReplicationResult) GetKnf() *KeyNotFoundException {
	if !p.IsSetKnf() {
		return NimbusUpdateBlobReplicationResult_Knf_DEFAULT
	}
	return p.Knf
}

func (p *NimbusUpdateBlobReplicationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusUpdateBlobReplicationResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusUpdateBlobReplicationResult) IsSetKnf() bool {
	return p.Knf != nil
}

func (p *NimbusUpdateBlobReplicationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusUpdateBlobReplicationResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NimbusUpdateBlobReplicationResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusUpdateBlobReplicationResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Knf = &KeyNotFoundException{}
	if err := p.Knf.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Knf), err)
	}
	return nil
}

func (p *NimbusUpdateBlobReplicationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "updateBlobReplication_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusUpdateBlobReplicationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusUpdateBlobReplicationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusUpdateBlobReplicationResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetKnf() {
		if err := oprot.WriteFieldBegin(ctx, "knf", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:knf: ", p), err)
		}
		if err := p.Knf.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Knf), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:knf: ", p), err)
		}
	}
	return err
}

func (p *NimbusUpdateBlobReplicationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusUpdateBlobReplicationResult(%+v)", *p)
}

func (p *NimbusUpdateBlobReplicationResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusUpdateBlobReplicationResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusUpdateBlobReplicationResult)(nil)

// Attributes:
//   - Key
type NimbusCreateStateInZookeeperArgs struct {
	Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewNimbusCreateStateInZookeeperArgs() *NimbusCreateStateInZookeeperArgs {
	return &NimbusCreateStateInZookeeperArgs{}
}

func (p *NimbusCreateStateInZookeeperArgs) GetKey() string {
	return p.Key
}

func (p *NimbusCreateStateInZookeeperArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusCreateStateInZookeeperArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *NimbusCreateStateInZookeeperArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "createStateInZookeeper_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusCreateStateInZookeeperArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *NimbusCreateStateInZookeeperArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusCreateStateInZookeeperArgs(%+v)", *p)
}

func (p *NimbusCreateStateInZookeeperArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusCreateStateInZookeeperArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusCreateStateInZookeeperArgs)(nil)

type NimbusCreateStateInZookeeperResult struct {
}

func NewNimbusCreateStateInZookeeperResult() *NimbusCreateStateInZookeeperResult {
	return &NimbusCreateStateInZookeeperResult{}
}

func (p *NimbusCreateStateInZookeeperResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusCreateStateInZookeeperResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "createStateInZookeeper_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusCreateStateInZookeeperResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusCreateStateInZookeeperResult(%+v)", *p)
}

func (p *NimbusCreateStateInZookeeperResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusCreateStateInZookeeperResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusCreateStateInZookeeperResult)(nil)

type NimbusBeginFileUploadArgs struct {
}

func NewNimbusBeginFileUploadArgs() *NimbusBeginFileUploadArgs {
	return &NimbusBeginFileUploadArgs{}
}

func (p *NimbusBeginFileUploadArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusBeginFileUploadArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "beginFileUpload_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusBeginFileUploadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusBeginFileUploadArgs(%+v)", *p)
}

func (p *NimbusBeginFileUploadArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusBeginFileUploadArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusBeginFileUploadArgs)(nil)

// Attributes:
//   - Success
//   - Aze
type NimbusBeginFileUploadResult struct {
	Success *string                 `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusBeginFileUploadResult() *NimbusBeginFileUploadResult {
	return &NimbusBeginFileUploadResult{}
}

var NimbusBeginFileUploadResult_Success_DEFAULT string

func (p *NimbusBeginFileUploadResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return NimbusBeginFileUploadResult_Success_DEFAULT
	}
	return *p.Success
}

var NimbusBeginFileUploadResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusBeginFileUploadResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusBeginFileUploadResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusBeginFileUploadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusBeginFileUploadResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusBeginFileUploadResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusBeginFileUploadResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NimbusBeginFileUploadResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusBeginFileUploadResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "beginFileUpload_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusBeginFileUploadResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusBeginFileUploadResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusBeginFileUploadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusBeginFileUploadResult(%+v)", *p)
}

func (p *NimbusBeginFileUploadResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusBeginFileUploadResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusBeginFileUploadResult)(nil)

// Attributes:
//   - Location
//   - Chunk
type NimbusUploadChunkArgs struct {
	Location string `thrift:"location,1" db:"location" json:"location"`
	Chunk    []byte `thrift:"chunk,2" db:"chunk" json:"chunk"`
}

func NewNimbusUploadChunkArgs() *NimbusUploadChunkArgs {
	return &NimbusUploadChunkArgs{}
}

func (p *NimbusUploadChunkArgs) GetLocation() string {
	return p.Location
}

func (p *NimbusUploadChunkArgs) GetChunk() []byte {
	return p.Chunk
}

func (p *NimbusUploadChunkArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusUploadChunkArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Location = v
	}
	return nil
}

func (p *NimbusUploadChunkArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Chunk = v
	}
	return nil
}

func (p *NimbusUploadChunkArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "uploadChunk_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusUploadChunkArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "location", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:location: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Location)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.location (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:location: ", p), err)
	}
	return err
}

func (p *NimbusUploadChunkArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chunk", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chunk: ", p), err)
	}
	if err := oprot.WriteBinary(ctx, p.Chunk); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chunk (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chunk: ", p), err)
	}
	return err
}

func (p *NimbusUploadChunkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusUploadChunkArgs(%+v)", *p)
}

func (p *NimbusUploadChunkArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusUploadChunkArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusUploadChunkArgs)(nil)

// Attributes:
//   - Aze
type NimbusUploadChunkResult struct {
	Aze *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusUploadChunkResult() *NimbusUploadChunkResult {
	return &NimbusUploadChunkResult{}
}

var NimbusUploadChunkResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusUploadChunkResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusUploadChunkResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusUploadChunkResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusUploadChunkResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusUploadChunkResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusUploadChunkResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "uploadChunk_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusUploadChunkResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusUploadChunkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusUploadChunkResult(%+v)", *p)
}

func (p *NimbusUploadChunkResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusUploadChunkResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusUploadChunkResult)(nil)

// Attributes:
//   - Location
type NimbusFinishFileUploadArgs struct {
	Location string `thrift:"location,1" db:"location" json:"location"`
}

func NewNimbusFinishFileUploadArgs() *NimbusFinishFileUploadArgs {
	return &NimbusFinishFileUploadArgs{}
}

func (p *NimbusFinishFileUploadArgs) GetLocation() string {
	return p.Location
}

func (p *NimbusFinishFileUploadArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusFinishFileUploadArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Location = v
	}
	return nil
}

func (p *NimbusFinishFileUploadArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "finishFileUpload_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusFinishFileUploadArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "location", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:location: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Location)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.location (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:location: ", p), err)
	}
	return err
}

func (p *NimbusFinishFileUploadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusFinishFileUploadArgs(%+v)", *p)
}

func (p *NimbusFinishFileUploadArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusFinishFileUploadArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusFinishFileUploadArgs)(nil)

// Attributes:
//   - Aze
type NimbusFinishFileUploadResult struct {
	Aze *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusFinishFileUploadResult() *NimbusFinishFileUploadResult {
	return &NimbusFinishFileUploadResult{}
}

var NimbusFinishFileUploadResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusFinishFileUploadResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusFinishFileUploadResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusFinishFileUploadResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusFinishFileUploadResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusFinishFileUploadResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusFinishFileUploadResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "finishFileUpload_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusFinishFileUploadResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusFinishFileUploadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusFinishFileUploadResult(%+v)", *p)
}

func (p *NimbusFinishFileUploadResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusFinishFileUploadResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusFinishFileUploadResult)(nil)

// Attributes:
//   - ID
type NimbusDownloadChunkArgs struct {
	ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewNimbusDownloadChunkArgs() *NimbusDownloadChunkArgs {
	return &NimbusDownloadChunkArgs{}
}

func (p *NimbusDownloadChunkArgs) GetID() string {
	return p.ID
}

func (p *NimbusDownloadChunkArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusDownloadChunkArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *NimbusDownloadChunkArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "downloadChunk_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusDownloadChunkArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *NimbusDownloadChunkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusDownloadChunkArgs(%+v)", *p)
}

func (p *NimbusDownloadChunkArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusDownloadChunkArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusDownloadChunkArgs)(nil)

// Attributes:
//   - Success
//   - Aze
type NimbusDownloadChunkResult struct {
	Success []byte                  `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusDownloadChunkResult() *NimbusDownloadChunkResult {
	return &NimbusDownloadChunkResult{}
}

var NimbusDownloadChunkResult_Success_DEFAULT []byte

func (p *NimbusDownloadChunkResult) GetSuccess() []byte {
	return p.Success
}

var NimbusDownloadChunkResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusDownloadChunkResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusDownloadChunkResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusDownloadChunkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusDownloadChunkResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusDownloadChunkResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusDownloadChunkResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *NimbusDownloadChunkResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusDownloadChunkResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "downloadChunk_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusDownloadChunkResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.Success); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusDownloadChunkResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusDownloadChunkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusDownloadChunkResult(%+v)", *p)
}

func (p *NimbusDownloadChunkResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusDownloadChunkResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusDownloadChunkResult)(nil)

type NimbusGetNimbusConfArgs struct {
}

func NewNimbusGetNimbusConfArgs() *NimbusGetNimbusConfArgs {
	return &NimbusGetNimbusConfArgs{}
}

func (p *NimbusGetNimbusConfArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetNimbusConfArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getNimbusConf_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetNimbusConfArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetNimbusConfArgs(%+v)", *p)
}

func (p *NimbusGetNimbusConfArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetNimbusConfArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetNimbusConfArgs)(nil)

// Attributes:
//   - Success
//   - Aze
type NimbusGetNimbusConfResult struct {
	Success *string                 `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetNimbusConfResult() *NimbusGetNimbusConfResult {
	return &NimbusGetNimbusConfResult{}
}

var NimbusGetNimbusConfResult_Success_DEFAULT string

func (p *NimbusGetNimbusConfResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return NimbusGetNimbusConfResult_Success_DEFAULT
	}
	return *p.Success
}

var NimbusGetNimbusConfResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetNimbusConfResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetNimbusConfResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetNimbusConfResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetNimbusConfResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetNimbusConfResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetNimbusConfResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NimbusGetNimbusConfResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetNimbusConfResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getNimbusConf_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetNimbusConfResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetNimbusConfResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetNimbusConfResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetNimbusConfResult(%+v)", *p)
}

func (p *NimbusGetNimbusConfResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetNimbusConfResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetNimbusConfResult)(nil)

type NimbusGetClusterInfoArgs struct {
}

func NewNimbusGetClusterInfoArgs() *NimbusGetClusterInfoArgs {
	return &NimbusGetClusterInfoArgs{}
}

func (p *NimbusGetClusterInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetClusterInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getClusterInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetClusterInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetClusterInfoArgs(%+v)", *p)
}

func (p *NimbusGetClusterInfoArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetClusterInfoArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetClusterInfoArgs)(nil)

// Attributes:
//   - Success
//   - Aze
type NimbusGetClusterInfoResult struct {
	Success *ClusterSummary         `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetClusterInfoResult() *NimbusGetClusterInfoResult {
	return &NimbusGetClusterInfoResult{}
}

var NimbusGetClusterInfoResult_Success_DEFAULT *ClusterSummary

func (p *NimbusGetClusterInfoResult) GetSuccess() *ClusterSummary {
	if !p.IsSetSuccess() {
		return NimbusGetClusterInfoResult_Success_DEFAULT
	}
	return p.Success
}

var NimbusGetClusterInfoResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetClusterInfoResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetClusterInfoResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetClusterInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetClusterInfoResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetClusterInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetClusterInfoResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &ClusterSummary{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusGetClusterInfoResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetClusterInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getClusterInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetClusterInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetClusterInfoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetClusterInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetClusterInfoResult(%+v)", *p)
}

func (p *NimbusGetClusterInfoResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetClusterInfoResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetClusterInfoResult)(nil)

type NimbusGetTopologySummariesArgs struct {
}

func NewNimbusGetTopologySummariesArgs() *NimbusGetTopologySummariesArgs {
	return &NimbusGetTopologySummariesArgs{}
}

func (p *NimbusGetTopologySummariesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologySummariesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologySummaries_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologySummariesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologySummariesArgs(%+v)", *p)
}

func (p *NimbusGetTopologySummariesArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologySummariesArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologySummariesArgs)(nil)

// Attributes:
//   - Success
//   - Aze
type NimbusGetTopologySummariesResult struct {
	Success []*TopologySummary      `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetTopologySummariesResult() *NimbusGetTopologySummariesResult {
	return &NimbusGetTopologySummariesResult{}
}

var NimbusGetTopologySummariesResult_Success_DEFAULT []*TopologySummary

func (p *NimbusGetTopologySummariesResult) GetSuccess() []*TopologySummary {
	return p.Success
}

var NimbusGetTopologySummariesResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetTopologySummariesResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetTopologySummariesResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetTopologySummariesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetTopologySummariesResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetTopologySummariesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologySummariesResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TopologySummary, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem564 := &TopologySummary{}
		if err := _elem564.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem564), err)
		}
		p.Success = append(p.Success, _elem564)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NimbusGetTopologySummariesResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetTopologySummariesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologySummaries_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologySummariesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologySummariesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologySummariesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologySummariesResult(%+v)", *p)
}

func (p *NimbusGetTopologySummariesResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologySummariesResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologySummariesResult)(nil)

// Attributes:
//   - Name
type NimbusGetTopologySummaryByNameArgs struct {
	Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewNimbusGetTopologySummaryByNameArgs() *NimbusGetTopologySummaryByNameArgs {
	return &NimbusGetTopologySummaryByNameArgs{}
}

func (p *NimbusGetTopologySummaryByNameArgs) GetName() string {
	return p.Name
}

func (p *NimbusGetTopologySummaryByNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologySummaryByNameArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *NimbusGetTopologySummaryByNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologySummaryByName_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologySummaryByNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *NimbusGetTopologySummaryByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologySummaryByNameArgs(%+v)", *p)
}

func (p *NimbusGetTopologySummaryByNameArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologySummaryByNameArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologySummaryByNameArgs)(nil)

// Attributes:
//   - Success
//   - E
//   - Aze
type NimbusGetTopologySummaryByNameResult struct {
	Success *TopologySummary        `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetTopologySummaryByNameResult() *NimbusGetTopologySummaryByNameResult {
	return &NimbusGetTopologySummaryByNameResult{}
}

var NimbusGetTopologySummaryByNameResult_Success_DEFAULT *TopologySummary

func (p *NimbusGetTopologySummaryByNameResult) GetSuccess() *TopologySummary {
	if !p.IsSetSuccess() {
		return NimbusGetTopologySummaryByNameResult_Success_DEFAULT
	}
	return p.Success
}

var NimbusGetTopologySummaryByNameResult_E_DEFAULT *NotAliveException

func (p *NimbusGetTopologySummaryByNameResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusGetTopologySummaryByNameResult_E_DEFAULT
	}
	return p.E
}

var NimbusGetTopologySummaryByNameResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetTopologySummaryByNameResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetTopologySummaryByNameResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetTopologySummaryByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetTopologySummaryByNameResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusGetTopologySummaryByNameResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetTopologySummaryByNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologySummaryByNameResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &TopologySummary{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusGetTopologySummaryByNameResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusGetTopologySummaryByNameResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetTopologySummaryByNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologySummaryByName_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologySummaryByNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologySummaryByNameResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologySummaryByNameResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologySummaryByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologySummaryByNameResult(%+v)", *p)
}

func (p *NimbusGetTopologySummaryByNameResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologySummaryByNameResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologySummaryByNameResult)(nil)

// Attributes:
//   - ID
type NimbusGetTopologySummaryArgs struct {
	ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewNimbusGetTopologySummaryArgs() *NimbusGetTopologySummaryArgs {
	return &NimbusGetTopologySummaryArgs{}
}

func (p *NimbusGetTopologySummaryArgs) GetID() string {
	return p.ID
}

func (p *NimbusGetTopologySummaryArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologySummaryArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *NimbusGetTopologySummaryArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologySummary_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologySummaryArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *NimbusGetTopologySummaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologySummaryArgs(%+v)", *p)
}

func (p *NimbusGetTopologySummaryArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologySummaryArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologySummaryArgs)(nil)

// Attributes:
//   - Success
//   - E
//   - Aze
type NimbusGetTopologySummaryResult struct {
	Success *TopologySummary        `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetTopologySummaryResult() *NimbusGetTopologySummaryResult {
	return &NimbusGetTopologySummaryResult{}
}

var NimbusGetTopologySummaryResult_Success_DEFAULT *TopologySummary

func (p *NimbusGetTopologySummaryResult) GetSuccess() *TopologySummary {
	if !p.IsSetSuccess() {
		return NimbusGetTopologySummaryResult_Success_DEFAULT
	}
	return p.Success
}

var NimbusGetTopologySummaryResult_E_DEFAULT *NotAliveException

func (p *NimbusGetTopologySummaryResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusGetTopologySummaryResult_E_DEFAULT
	}
	return p.E
}

var NimbusGetTopologySummaryResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetTopologySummaryResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetTopologySummaryResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetTopologySummaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetTopologySummaryResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusGetTopologySummaryResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetTopologySummaryResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologySummaryResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &TopologySummary{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusGetTopologySummaryResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusGetTopologySummaryResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetTopologySummaryResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologySummary_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologySummaryResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologySummaryResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologySummaryResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologySummaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologySummaryResult(%+v)", *p)
}

func (p *NimbusGetTopologySummaryResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologySummaryResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologySummaryResult)(nil)

type NimbusGetLeaderArgs struct {
}

func NewNimbusGetLeaderArgs() *NimbusGetLeaderArgs {
	return &NimbusGetLeaderArgs{}
}

func (p *NimbusGetLeaderArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetLeaderArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getLeader_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetLeaderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetLeaderArgs(%+v)", *p)
}

func (p *NimbusGetLeaderArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetLeaderArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetLeaderArgs)(nil)

// Attributes:
//   - Success
//   - Aze
type NimbusGetLeaderResult struct {
	Success *NimbusSummary          `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetLeaderResult() *NimbusGetLeaderResult {
	return &NimbusGetLeaderResult{}
}

var NimbusGetLeaderResult_Success_DEFAULT *NimbusSummary

func (p *NimbusGetLeaderResult) GetSuccess() *NimbusSummary {
	if !p.IsSetSuccess() {
		return NimbusGetLeaderResult_Success_DEFAULT
	}
	return p.Success
}

var NimbusGetLeaderResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetLeaderResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetLeaderResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetLeaderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetLeaderResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetLeaderResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetLeaderResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &NimbusSummary{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusGetLeaderResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetLeaderResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getLeader_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetLeaderResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetLeaderResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetLeaderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetLeaderResult(%+v)", *p)
}

func (p *NimbusGetLeaderResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetLeaderResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetLeaderResult)(nil)

// Attributes:
//   - Name
type NimbusIsTopologyNameAllowedArgs struct {
	Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewNimbusIsTopologyNameAllowedArgs() *NimbusIsTopologyNameAllowedArgs {
	return &NimbusIsTopologyNameAllowedArgs{}
}

func (p *NimbusIsTopologyNameAllowedArgs) GetName() string {
	return p.Name
}

func (p *NimbusIsTopologyNameAllowedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusIsTopologyNameAllowedArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *NimbusIsTopologyNameAllowedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "isTopologyNameAllowed_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusIsTopologyNameAllowedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *NimbusIsTopologyNameAllowedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusIsTopologyNameAllowedArgs(%+v)", *p)
}

func (p *NimbusIsTopologyNameAllowedArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusIsTopologyNameAllowedArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusIsTopologyNameAllowedArgs)(nil)

// Attributes:
//   - Success
//   - Aze
type NimbusIsTopologyNameAllowedResult struct {
	Success *bool                   `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusIsTopologyNameAllowedResult() *NimbusIsTopologyNameAllowedResult {
	return &NimbusIsTopologyNameAllowedResult{}
}

var NimbusIsTopologyNameAllowedResult_Success_DEFAULT bool

func (p *NimbusIsTopologyNameAllowedResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return NimbusIsTopologyNameAllowedResult_Success_DEFAULT
	}
	return *p.Success
}

var NimbusIsTopologyNameAllowedResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusIsTopologyNameAllowedResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusIsTopologyNameAllowedResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusIsTopologyNameAllowedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusIsTopologyNameAllowedResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusIsTopologyNameAllowedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusIsTopologyNameAllowedResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NimbusIsTopologyNameAllowedResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusIsTopologyNameAllowedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "isTopologyNameAllowed_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusIsTopologyNameAllowedResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusIsTopologyNameAllowedResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusIsTopologyNameAllowedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusIsTopologyNameAllowedResult(%+v)", *p)
}

func (p *NimbusIsTopologyNameAllowedResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusIsTopologyNameAllowedResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusIsTopologyNameAllowedResult)(nil)

// Attributes:
//   - Name
type NimbusGetTopologyInfoByNameArgs struct {
	Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewNimbusGetTopologyInfoByNameArgs() *NimbusGetTopologyInfoByNameArgs {
	return &NimbusGetTopologyInfoByNameArgs{}
}

func (p *NimbusGetTopologyInfoByNameArgs) GetName() string {
	return p.Name
}

func (p *NimbusGetTopologyInfoByNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoByNameArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *NimbusGetTopologyInfoByNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologyInfoByName_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoByNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *NimbusGetTopologyInfoByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologyInfoByNameArgs(%+v)", *p)
}

func (p *NimbusGetTopologyInfoByNameArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologyInfoByNameArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologyInfoByNameArgs)(nil)

// Attributes:
//   - Success
//   - E
//   - Aze
type NimbusGetTopologyInfoByNameResult struct {
	Success *TopologyInfo           `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetTopologyInfoByNameResult() *NimbusGetTopologyInfoByNameResult {
	return &NimbusGetTopologyInfoByNameResult{}
}

var NimbusGetTopologyInfoByNameResult_Success_DEFAULT *TopologyInfo

func (p *NimbusGetTopologyInfoByNameResult) GetSuccess() *TopologyInfo {
	if !p.IsSetSuccess() {
		return NimbusGetTopologyInfoByNameResult_Success_DEFAULT
	}
	return p.Success
}

var NimbusGetTopologyInfoByNameResult_E_DEFAULT *NotAliveException

func (p *NimbusGetTopologyInfoByNameResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusGetTopologyInfoByNameResult_E_DEFAULT
	}
	return p.E
}

var NimbusGetTopologyInfoByNameResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetTopologyInfoByNameResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetTopologyInfoByNameResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetTopologyInfoByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetTopologyInfoByNameResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusGetTopologyInfoByNameResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetTopologyInfoByNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoByNameResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &TopologyInfo{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoByNameResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoByNameResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoByNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologyInfoByName_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoByNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyInfoByNameResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyInfoByNameResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyInfoByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologyInfoByNameResult(%+v)", *p)
}

func (p *NimbusGetTopologyInfoByNameResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologyInfoByNameResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologyInfoByNameResult)(nil)

// Attributes:
//   - ID
type NimbusGetTopologyInfoArgs struct {
	ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewNimbusGetTopologyInfoArgs() *NimbusGetTopologyInfoArgs {
	return &NimbusGetTopologyInfoArgs{}
}

func (p *NimbusGetTopologyInfoArgs) GetID() string {
	return p.ID
}

func (p *NimbusGetTopologyInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *NimbusGetTopologyInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologyInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *NimbusGetTopologyInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologyInfoArgs(%+v)", *p)
}

func (p *NimbusGetTopologyInfoArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologyInfoArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologyInfoArgs)(nil)

// Attributes:
//   - Success
//   - E
//   - Aze
type NimbusGetTopologyInfoResult struct {
	Success *TopologyInfo           `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetTopologyInfoResult() *NimbusGetTopologyInfoResult {
	return &NimbusGetTopologyInfoResult{}
}

var NimbusGetTopologyInfoResult_Success_DEFAULT *TopologyInfo

func (p *NimbusGetTopologyInfoResult) GetSuccess() *TopologyInfo {
	if !p.IsSetSuccess() {
		return NimbusGetTopologyInfoResult_Success_DEFAULT
	}
	return p.Success
}

var NimbusGetTopologyInfoResult_E_DEFAULT *NotAliveException

func (p *NimbusGetTopologyInfoResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusGetTopologyInfoResult_E_DEFAULT
	}
	return p.E
}

var NimbusGetTopologyInfoResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetTopologyInfoResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetTopologyInfoResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetTopologyInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetTopologyInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusGetTopologyInfoResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetTopologyInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &TopologyInfo{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologyInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyInfoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyInfoResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologyInfoResult(%+v)", *p)
}

func (p *NimbusGetTopologyInfoResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologyInfoResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologyInfoResult)(nil)

// Attributes:
//   - Name
//   - Options
type NimbusGetTopologyInfoByNameWithOptsArgs struct {
	Name    string          `thrift:"name,1" db:"name" json:"name"`
	Options *GetInfoOptions `thrift:"options,2" db:"options" json:"options"`
}

func NewNimbusGetTopologyInfoByNameWithOptsArgs() *NimbusGetTopologyInfoByNameWithOptsArgs {
	return &NimbusGetTopologyInfoByNameWithOptsArgs{}
}

func (p *NimbusGetTopologyInfoByNameWithOptsArgs) GetName() string {
	return p.Name
}

var NimbusGetTopologyInfoByNameWithOptsArgs_Options_DEFAULT *GetInfoOptions

func (p *NimbusGetTopologyInfoByNameWithOptsArgs) GetOptions() *GetInfoOptions {
	if !p.IsSetOptions() {
		return NimbusGetTopologyInfoByNameWithOptsArgs_Options_DEFAULT
	}
	return p.Options
}

func (p *NimbusGetTopologyInfoByNameWithOptsArgs) IsSetOptions() bool {
	return p.Options != nil
}

func (p *NimbusGetTopologyInfoByNameWithOptsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoByNameWithOptsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *NimbusGetTopologyInfoByNameWithOptsArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Options = &GetInfoOptions{}
	if err := p.Options.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoByNameWithOptsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologyInfoByNameWithOpts_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoByNameWithOptsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *NimbusGetTopologyInfoByNameWithOptsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "options", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:options: ", p), err)
	}
	if err := p.Options.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:options: ", p), err)
	}
	return err
}

func (p *NimbusGetTopologyInfoByNameWithOptsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologyInfoByNameWithOptsArgs(%+v)", *p)
}

func (p *NimbusGetTopologyInfoByNameWithOptsArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologyInfoByNameWithOptsArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologyInfoByNameWithOptsArgs)(nil)

// Attributes:
//   - Success
//   - E
//   - Aze
type NimbusGetTopologyInfoByNameWithOptsResult struct {
	Success *TopologyInfo           `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetTopologyInfoByNameWithOptsResult() *NimbusGetTopologyInfoByNameWithOptsResult {
	return &NimbusGetTopologyInfoByNameWithOptsResult{}
}

var NimbusGetTopologyInfoByNameWithOptsResult_Success_DEFAULT *TopologyInfo

func (p *NimbusGetTopologyInfoByNameWithOptsResult) GetSuccess() *TopologyInfo {
	if !p.IsSetSuccess() {
		return NimbusGetTopologyInfoByNameWithOptsResult_Success_DEFAULT
	}
	return p.Success
}

var NimbusGetTopologyInfoByNameWithOptsResult_E_DEFAULT *NotAliveException

func (p *NimbusGetTopologyInfoByNameWithOptsResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusGetTopologyInfoByNameWithOptsResult_E_DEFAULT
	}
	return p.E
}

var NimbusGetTopologyInfoByNameWithOptsResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetTopologyInfoByNameWithOptsResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetTopologyInfoByNameWithOptsResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetTopologyInfoByNameWithOptsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetTopologyInfoByNameWithOptsResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusGetTopologyInfoByNameWithOptsResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetTopologyInfoByNameWithOptsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoByNameWithOptsResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &TopologyInfo{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoByNameWithOptsResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoByNameWithOptsResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoByNameWithOptsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologyInfoByNameWithOpts_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoByNameWithOptsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyInfoByNameWithOptsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyInfoByNameWithOptsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyInfoByNameWithOptsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologyInfoByNameWithOptsResult(%+v)", *p)
}

func (p *NimbusGetTopologyInfoByNameWithOptsResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologyInfoByNameWithOptsResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologyInfoByNameWithOptsResult)(nil)

// Attributes:
//   - ID
//   - Options
type NimbusGetTopologyInfoWithOptsArgs struct {
	ID      string          `thrift:"id,1" db:"id" json:"id"`
	Options *GetInfoOptions `thrift:"options,2" db:"options" json:"options"`
}

func NewNimbusGetTopologyInfoWithOptsArgs() *NimbusGetTopologyInfoWithOptsArgs {
	return &NimbusGetTopologyInfoWithOptsArgs{}
}

func (p *NimbusGetTopologyInfoWithOptsArgs) GetID() string {
	return p.ID
}

var NimbusGetTopologyInfoWithOptsArgs_Options_DEFAULT *GetInfoOptions

func (p *NimbusGetTopologyInfoWithOptsArgs) GetOptions() *GetInfoOptions {
	if !p.IsSetOptions() {
		return NimbusGetTopologyInfoWithOptsArgs_Options_DEFAULT
	}
	return p.Options
}

func (p *NimbusGetTopologyInfoWithOptsArgs) IsSetOptions() bool {
	return p.Options != nil
}

func (p *NimbusGetTopologyInfoWithOptsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoWithOptsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *NimbusGetTopologyInfoWithOptsArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Options = &GetInfoOptions{}
	if err := p.Options.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoWithOptsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologyInfoWithOpts_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoWithOptsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *NimbusGetTopologyInfoWithOptsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "options", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:options: ", p), err)
	}
	if err := p.Options.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:options: ", p), err)
	}
	return err
}

func (p *NimbusGetTopologyInfoWithOptsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologyInfoWithOptsArgs(%+v)", *p)
}

func (p *NimbusGetTopologyInfoWithOptsArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologyInfoWithOptsArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologyInfoWithOptsArgs)(nil)

// Attributes:
//   - Success
//   - E
//   - Aze
type NimbusGetTopologyInfoWithOptsResult struct {
	Success *TopologyInfo           `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetTopologyInfoWithOptsResult() *NimbusGetTopologyInfoWithOptsResult {
	return &NimbusGetTopologyInfoWithOptsResult{}
}

var NimbusGetTopologyInfoWithOptsResult_Success_DEFAULT *TopologyInfo

func (p *NimbusGetTopologyInfoWithOptsResult) GetSuccess() *TopologyInfo {
	if !p.IsSetSuccess() {
		return NimbusGetTopologyInfoWithOptsResult_Success_DEFAULT
	}
	return p.Success
}

var NimbusGetTopologyInfoWithOptsResult_E_DEFAULT *NotAliveException

func (p *NimbusGetTopologyInfoWithOptsResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusGetTopologyInfoWithOptsResult_E_DEFAULT
	}
	return p.E
}

var NimbusGetTopologyInfoWithOptsResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetTopologyInfoWithOptsResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetTopologyInfoWithOptsResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetTopologyInfoWithOptsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetTopologyInfoWithOptsResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusGetTopologyInfoWithOptsResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetTopologyInfoWithOptsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoWithOptsResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &TopologyInfo{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoWithOptsResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoWithOptsResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoWithOptsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologyInfoWithOpts_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologyInfoWithOptsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyInfoWithOptsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyInfoWithOptsResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyInfoWithOptsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologyInfoWithOptsResult(%+v)", *p)
}

func (p *NimbusGetTopologyInfoWithOptsResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologyInfoWithOptsResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologyInfoWithOptsResult)(nil)

// Attributes:
//   - ID
//   - Window
//   - IsIncludeSys
type NimbusGetTopologyPageInfoArgs struct {
	ID           string `thrift:"id,1" db:"id" json:"id"`
	Window       string `thrift:"window,2" db:"window" json:"window"`
	IsIncludeSys bool   `thrift:"is_include_sys,3" db:"is_include_sys" json:"is_include_sys"`
}

func NewNimbusGetTopologyPageInfoArgs() *NimbusGetTopologyPageInfoArgs {
	return &NimbusGetTopologyPageInfoArgs{}
}

func (p *NimbusGetTopologyPageInfoArgs) GetID() string {
	return p.ID
}

func (p *NimbusGetTopologyPageInfoArgs) GetWindow() string {
	return p.Window
}

func (p *NimbusGetTopologyPageInfoArgs) GetIsIncludeSys() bool {
	return p.IsIncludeSys
}

func (p *NimbusGetTopologyPageInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologyPageInfoArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *NimbusGetTopologyPageInfoArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Window = v
	}
	return nil
}

func (p *NimbusGetTopologyPageInfoArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IsIncludeSys = v
	}
	return nil
}

func (p *NimbusGetTopologyPageInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologyPageInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologyPageInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *NimbusGetTopologyPageInfoArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "window", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:window: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Window)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.window (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:window: ", p), err)
	}
	return err
}

func (p *NimbusGetTopologyPageInfoArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "is_include_sys", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_include_sys: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.IsIncludeSys)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_include_sys (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_include_sys: ", p), err)
	}
	return err
}

func (p *NimbusGetTopologyPageInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologyPageInfoArgs(%+v)", *p)
}

func (p *NimbusGetTopologyPageInfoArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologyPageInfoArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologyPageInfoArgs)(nil)

// Attributes:
//   - Success
//   - E
//   - Aze
type NimbusGetTopologyPageInfoResult struct {
	Success *TopologyPageInfo       `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetTopologyPageInfoResult() *NimbusGetTopologyPageInfoResult {
	return &NimbusGetTopologyPageInfoResult{}
}

var NimbusGetTopologyPageInfoResult_Success_DEFAULT *TopologyPageInfo

func (p *NimbusGetTopologyPageInfoResult) GetSuccess() *TopologyPageInfo {
	if !p.IsSetSuccess() {
		return NimbusGetTopologyPageInfoResult_Success_DEFAULT
	}
	return p.Success
}

var NimbusGetTopologyPageInfoResult_E_DEFAULT *NotAliveException

func (p *NimbusGetTopologyPageInfoResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusGetTopologyPageInfoResult_E_DEFAULT
	}
	return p.E
}

var NimbusGetTopologyPageInfoResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetTopologyPageInfoResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetTopologyPageInfoResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetTopologyPageInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetTopologyPageInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusGetTopologyPageInfoResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetTopologyPageInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologyPageInfoResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &TopologyPageInfo{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusGetTopologyPageInfoResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusGetTopologyPageInfoResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetTopologyPageInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologyPageInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologyPageInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyPageInfoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyPageInfoResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyPageInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologyPageInfoResult(%+v)", *p)
}

func (p *NimbusGetTopologyPageInfoResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologyPageInfoResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologyPageInfoResult)(nil)

// Attributes:
//   - ID
//   - Host
//   - IsIncludeSys
type NimbusGetSupervisorPageInfoArgs struct {
	ID           string `thrift:"id,1" db:"id" json:"id"`
	Host         string `thrift:"host,2" db:"host" json:"host"`
	IsIncludeSys bool   `thrift:"is_include_sys,3" db:"is_include_sys" json:"is_include_sys"`
}

func NewNimbusGetSupervisorPageInfoArgs() *NimbusGetSupervisorPageInfoArgs {
	return &NimbusGetSupervisorPageInfoArgs{}
}

func (p *NimbusGetSupervisorPageInfoArgs) GetID() string {
	return p.ID
}

func (p *NimbusGetSupervisorPageInfoArgs) GetHost() string {
	return p.Host
}

func (p *NimbusGetSupervisorPageInfoArgs) GetIsIncludeSys() bool {
	return p.IsIncludeSys
}

func (p *NimbusGetSupervisorPageInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetSupervisorPageInfoArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *NimbusGetSupervisorPageInfoArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Host = v
	}
	return nil
}

func (p *NimbusGetSupervisorPageInfoArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IsIncludeSys = v
	}
	return nil
}

func (p *NimbusGetSupervisorPageInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getSupervisorPageInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetSupervisorPageInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *NimbusGetSupervisorPageInfoArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Host)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.host (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host: ", p), err)
	}
	return err
}

func (p *NimbusGetSupervisorPageInfoArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "is_include_sys", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_include_sys: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.IsIncludeSys)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_include_sys (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_include_sys: ", p), err)
	}
	return err
}

func (p *NimbusGetSupervisorPageInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetSupervisorPageInfoArgs(%+v)", *p)
}

func (p *NimbusGetSupervisorPageInfoArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetSupervisorPageInfoArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetSupervisorPageInfoArgs)(nil)

// Attributes:
//   - Success
//   - E
//   - Aze
type NimbusGetSupervisorPageInfoResult struct {
	Success *SupervisorPageInfo     `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetSupervisorPageInfoResult() *NimbusGetSupervisorPageInfoResult {
	return &NimbusGetSupervisorPageInfoResult{}
}

var NimbusGetSupervisorPageInfoResult_Success_DEFAULT *SupervisorPageInfo

func (p *NimbusGetSupervisorPageInfoResult) GetSuccess() *SupervisorPageInfo {
	if !p.IsSetSuccess() {
		return NimbusGetSupervisorPageInfoResult_Success_DEFAULT
	}
	return p.Success
}

var NimbusGetSupervisorPageInfoResult_E_DEFAULT *NotAliveException

func (p *NimbusGetSupervisorPageInfoResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusGetSupervisorPageInfoResult_E_DEFAULT
	}
	return p.E
}

var NimbusGetSupervisorPageInfoResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetSupervisorPageInfoResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetSupervisorPageInfoResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetSupervisorPageInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetSupervisorPageInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusGetSupervisorPageInfoResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetSupervisorPageInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetSupervisorPageInfoResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &SupervisorPageInfo{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusGetSupervisorPageInfoResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusGetSupervisorPageInfoResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetSupervisorPageInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getSupervisorPageInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetSupervisorPageInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetSupervisorPageInfoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetSupervisorPageInfoResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetSupervisorPageInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetSupervisorPageInfoResult(%+v)", *p)
}

func (p *NimbusGetSupervisorPageInfoResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetSupervisorPageInfoResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetSupervisorPageInfoResult)(nil)

// Attributes:
//   - TopologyID
//   - ComponentID
//   - Window
//   - IsIncludeSys
type NimbusGetComponentPageInfoArgs struct {
	TopologyID   string `thrift:"topology_id,1" db:"topology_id" json:"topology_id"`
	ComponentID  string `thrift:"component_id,2" db:"component_id" json:"component_id"`
	Window       string `thrift:"window,3" db:"window" json:"window"`
	IsIncludeSys bool   `thrift:"is_include_sys,4" db:"is_include_sys" json:"is_include_sys"`
}

func NewNimbusGetComponentPageInfoArgs() *NimbusGetComponentPageInfoArgs {
	return &NimbusGetComponentPageInfoArgs{}
}

func (p *NimbusGetComponentPageInfoArgs) GetTopologyID() string {
	return p.TopologyID
}

func (p *NimbusGetComponentPageInfoArgs) GetComponentID() string {
	return p.ComponentID
}

func (p *NimbusGetComponentPageInfoArgs) GetWindow() string {
	return p.Window
}

func (p *NimbusGetComponentPageInfoArgs) GetIsIncludeSys() bool {
	return p.IsIncludeSys
}

func (p *NimbusGetComponentPageInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetComponentPageInfoArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TopologyID = v
	}
	return nil
}

func (p *NimbusGetComponentPageInfoArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ComponentID = v
	}
	return nil
}

func (p *NimbusGetComponentPageInfoArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Window = v
	}
	return nil
}

func (p *NimbusGetComponentPageInfoArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IsIncludeSys = v
	}
	return nil
}

func (p *NimbusGetComponentPageInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getComponentPageInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetComponentPageInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "topology_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:topology_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.TopologyID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topology_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:topology_id: ", p), err)
	}
	return err
}

func (p *NimbusGetComponentPageInfoArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "component_id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:component_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ComponentID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.component_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:component_id: ", p), err)
	}
	return err
}

func (p *NimbusGetComponentPageInfoArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "window", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:window: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Window)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.window (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:window: ", p), err)
	}
	return err
}

func (p *NimbusGetComponentPageInfoArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "is_include_sys", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_include_sys: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.IsIncludeSys)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_include_sys (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_include_sys: ", p), err)
	}
	return err
}

func (p *NimbusGetComponentPageInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetComponentPageInfoArgs(%+v)", *p)
}

func (p *NimbusGetComponentPageInfoArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetComponentPageInfoArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetComponentPageInfoArgs)(nil)

// Attributes:
//   - Success
//   - E
//   - Aze
type NimbusGetComponentPageInfoResult struct {
	Success *ComponentPageInfo      `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetComponentPageInfoResult() *NimbusGetComponentPageInfoResult {
	return &NimbusGetComponentPageInfoResult{}
}

var NimbusGetComponentPageInfoResult_Success_DEFAULT *ComponentPageInfo

func (p *NimbusGetComponentPageInfoResult) GetSuccess() *ComponentPageInfo {
	if !p.IsSetSuccess() {
		return NimbusGetComponentPageInfoResult_Success_DEFAULT
	}
	return p.Success
}

var NimbusGetComponentPageInfoResult_E_DEFAULT *NotAliveException

func (p *NimbusGetComponentPageInfoResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusGetComponentPageInfoResult_E_DEFAULT
	}
	return p.E
}

var NimbusGetComponentPageInfoResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetComponentPageInfoResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetComponentPageInfoResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetComponentPageInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetComponentPageInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusGetComponentPageInfoResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetComponentPageInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetComponentPageInfoResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &ComponentPageInfo{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusGetComponentPageInfoResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusGetComponentPageInfoResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetComponentPageInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getComponentPageInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetComponentPageInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetComponentPageInfoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetComponentPageInfoResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetComponentPageInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetComponentPageInfoResult(%+v)", *p)
}

func (p *NimbusGetComponentPageInfoResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetComponentPageInfoResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetComponentPageInfoResult)(nil)

// Attributes:
//   - ID
type NimbusGetTopologyConfArgs struct {
	ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewNimbusGetTopologyConfArgs() *NimbusGetTopologyConfArgs {
	return &NimbusGetTopologyConfArgs{}
}

func (p *NimbusGetTopologyConfArgs) GetID() string {
	return p.ID
}

func (p *NimbusGetTopologyConfArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologyConfArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *NimbusGetTopologyConfArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologyConf_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologyConfArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *NimbusGetTopologyConfArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologyConfArgs(%+v)", *p)
}

func (p *NimbusGetTopologyConfArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologyConfArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologyConfArgs)(nil)

// Attributes:
//   - Success
//   - E
//   - Aze
type NimbusGetTopologyConfResult struct {
	Success *string                 `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetTopologyConfResult() *NimbusGetTopologyConfResult {
	return &NimbusGetTopologyConfResult{}
}

var NimbusGetTopologyConfResult_Success_DEFAULT string

func (p *NimbusGetTopologyConfResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return NimbusGetTopologyConfResult_Success_DEFAULT
	}
	return *p.Success
}

var NimbusGetTopologyConfResult_E_DEFAULT *NotAliveException

func (p *NimbusGetTopologyConfResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusGetTopologyConfResult_E_DEFAULT
	}
	return p.E
}

var NimbusGetTopologyConfResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetTopologyConfResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetTopologyConfResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetTopologyConfResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetTopologyConfResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusGetTopologyConfResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetTopologyConfResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologyConfResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NimbusGetTopologyConfResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusGetTopologyConfResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetTopologyConfResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologyConf_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologyConfResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyConfResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyConfResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyConfResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologyConfResult(%+v)", *p)
}

func (p *NimbusGetTopologyConfResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologyConfResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologyConfResult)(nil)

// Attributes:
//   - ID
type NimbusGetTopologyArgs struct {
	ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewNimbusGetTopologyArgs() *NimbusGetTopologyArgs {
	return &NimbusGetTopologyArgs{}
}

func (p *NimbusGetTopologyArgs) GetID() string {
	return p.ID
}

func (p *NimbusGetTopologyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologyArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *NimbusGetTopologyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopology_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *NimbusGetTopologyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologyArgs(%+v)", *p)
}

func (p *NimbusGetTopologyArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologyArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologyArgs)(nil)

// Attributes:
//   - Success
//   - E
//   - Aze
type NimbusGetTopologyResult struct {
	Success *StormTopology          `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetTopologyResult() *NimbusGetTopologyResult {
	return &NimbusGetTopologyResult{}
}

var NimbusGetTopologyResult_Success_DEFAULT *StormTopology

func (p *NimbusGetTopologyResult) GetSuccess() *StormTopology {
	if !p.IsSetSuccess() {
		return NimbusGetTopologyResult_Success_DEFAULT
	}
	return p.Success
}

var NimbusGetTopologyResult_E_DEFAULT *NotAliveException

func (p *NimbusGetTopologyResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusGetTopologyResult_E_DEFAULT
	}
	return p.E
}

var NimbusGetTopologyResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetTopologyResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetTopologyResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetTopologyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetTopologyResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusGetTopologyResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetTopologyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologyResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &StormTopology{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusGetTopologyResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusGetTopologyResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetTopologyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopology_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologyResult(%+v)", *p)
}

func (p *NimbusGetTopologyResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologyResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologyResult)(nil)

// Attributes:
//   - ID
type NimbusGetUserTopologyArgs struct {
	ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewNimbusGetUserTopologyArgs() *NimbusGetUserTopologyArgs {
	return &NimbusGetUserTopologyArgs{}
}

func (p *NimbusGetUserTopologyArgs) GetID() string {
	return p.ID
}

func (p *NimbusGetUserTopologyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetUserTopologyArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *NimbusGetUserTopologyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getUserTopology_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetUserTopologyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *NimbusGetUserTopologyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetUserTopologyArgs(%+v)", *p)
}

func (p *NimbusGetUserTopologyArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetUserTopologyArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetUserTopologyArgs)(nil)

// Attributes:
//   - Success
//   - E
//   - Aze
type NimbusGetUserTopologyResult struct {
	Success *StormTopology          `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetUserTopologyResult() *NimbusGetUserTopologyResult {
	return &NimbusGetUserTopologyResult{}
}

var NimbusGetUserTopologyResult_Success_DEFAULT *StormTopology

func (p *NimbusGetUserTopologyResult) GetSuccess() *StormTopology {
	if !p.IsSetSuccess() {
		return NimbusGetUserTopologyResult_Success_DEFAULT
	}
	return p.Success
}

var NimbusGetUserTopologyResult_E_DEFAULT *NotAliveException

func (p *NimbusGetUserTopologyResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusGetUserTopologyResult_E_DEFAULT
	}
	return p.E
}

var NimbusGetUserTopologyResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetUserTopologyResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetUserTopologyResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetUserTopologyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetUserTopologyResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusGetUserTopologyResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetUserTopologyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetUserTopologyResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &StormTopology{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusGetUserTopologyResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusGetUserTopologyResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetUserTopologyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getUserTopology_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetUserTopologyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetUserTopologyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetUserTopologyResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetUserTopologyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetUserTopologyResult(%+v)", *p)
}

func (p *NimbusGetUserTopologyResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetUserTopologyResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetUserTopologyResult)(nil)

// Attributes:
//   - User
type NimbusGetTopologyHistoryArgs struct {
	User string `thrift:"user,1" db:"user" json:"user"`
}

func NewNimbusGetTopologyHistoryArgs() *NimbusGetTopologyHistoryArgs {
	return &NimbusGetTopologyHistoryArgs{}
}

func (p *NimbusGetTopologyHistoryArgs) GetUser() string {
	return p.User
}

func (p *NimbusGetTopologyHistoryArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologyHistoryArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *NimbusGetTopologyHistoryArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologyHistory_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologyHistoryArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err)
	}
	return err
}

func (p *NimbusGetTopologyHistoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologyHistoryArgs(%+v)", *p)
}

func (p *NimbusGetTopologyHistoryArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologyHistoryArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologyHistoryArgs)(nil)

// Attributes:
//   - Success
//   - Aze
type NimbusGetTopologyHistoryResult struct {
	Success *TopologyHistoryInfo    `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetTopologyHistoryResult() *NimbusGetTopologyHistoryResult {
	return &NimbusGetTopologyHistoryResult{}
}

var NimbusGetTopologyHistoryResult_Success_DEFAULT *TopologyHistoryInfo

func (p *NimbusGetTopologyHistoryResult) GetSuccess() *TopologyHistoryInfo {
	if !p.IsSetSuccess() {
		return NimbusGetTopologyHistoryResult_Success_DEFAULT
	}
	return p.Success
}

var NimbusGetTopologyHistoryResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetTopologyHistoryResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetTopologyHistoryResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetTopologyHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetTopologyHistoryResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetTopologyHistoryResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetTopologyHistoryResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &TopologyHistoryInfo{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusGetTopologyHistoryResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetTopologyHistoryResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTopologyHistory_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetTopologyHistoryResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyHistoryResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetTopologyHistoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetTopologyHistoryResult(%+v)", *p)
}

func (p *NimbusGetTopologyHistoryResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetTopologyHistoryResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetTopologyHistoryResult)(nil)

// Attributes:
//   - Owner
type NimbusGetOwnerResourceSummariesArgs struct {
	Owner string `thrift:"owner,1" db:"owner" json:"owner"`
}

func NewNimbusGetOwnerResourceSummariesArgs() *NimbusGetOwnerResourceSummariesArgs {
	return &NimbusGetOwnerResourceSummariesArgs{}
}

func (p *NimbusGetOwnerResourceSummariesArgs) GetOwner() string {
	return p.Owner
}

func (p *NimbusGetOwnerResourceSummariesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetOwnerResourceSummariesArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Owner = v
	}
	return nil
}

func (p *NimbusGetOwnerResourceSummariesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getOwnerResourceSummaries_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetOwnerResourceSummariesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "owner", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:owner: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Owner)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.owner (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:owner: ", p), err)
	}
	return err
}

func (p *NimbusGetOwnerResourceSummariesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetOwnerResourceSummariesArgs(%+v)", *p)
}

func (p *NimbusGetOwnerResourceSummariesArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetOwnerResourceSummariesArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetOwnerResourceSummariesArgs)(nil)

// Attributes:
//   - Success
//   - Aze
type NimbusGetOwnerResourceSummariesResult struct {
	Success []*OwnerResourceSummary `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetOwnerResourceSummariesResult() *NimbusGetOwnerResourceSummariesResult {
	return &NimbusGetOwnerResourceSummariesResult{}
}

var NimbusGetOwnerResourceSummariesResult_Success_DEFAULT []*OwnerResourceSummary

func (p *NimbusGetOwnerResourceSummariesResult) GetSuccess() []*OwnerResourceSummary {
	return p.Success
}

var NimbusGetOwnerResourceSummariesResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetOwnerResourceSummariesResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetOwnerResourceSummariesResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetOwnerResourceSummariesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetOwnerResourceSummariesResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetOwnerResourceSummariesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetOwnerResourceSummariesResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*OwnerResourceSummary, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem565 := &OwnerResourceSummary{}
		if err := _elem565.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem565), err)
		}
		p.Success = append(p.Success, _elem565)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NimbusGetOwnerResourceSummariesResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetOwnerResourceSummariesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getOwnerResourceSummaries_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetOwnerResourceSummariesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetOwnerResourceSummariesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetOwnerResourceSummariesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetOwnerResourceSummariesResult(%+v)", *p)
}

func (p *NimbusGetOwnerResourceSummariesResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetOwnerResourceSummariesResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetOwnerResourceSummariesResult)(nil)

// Attributes:
//   - Node
type NimbusGetSupervisorAssignmentsArgs struct {
	Node string `thrift:"node,1" db:"node" json:"node"`
}

func NewNimbusGetSupervisorAssignmentsArgs() *NimbusGetSupervisorAssignmentsArgs {
	return &NimbusGetSupervisorAssignmentsArgs{}
}

func (p *NimbusGetSupervisorAssignmentsArgs) GetNode() string {
	return p.Node
}

func (p *NimbusGetSupervisorAssignmentsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetSupervisorAssignmentsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Node = v
	}
	return nil
}

func (p *NimbusGetSupervisorAssignmentsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getSupervisorAssignments_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetSupervisorAssignmentsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Node)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.node (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err)
	}
	return err
}

func (p *NimbusGetSupervisorAssignmentsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetSupervisorAssignmentsArgs(%+v)", *p)
}

func (p *NimbusGetSupervisorAssignmentsArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetSupervisorAssignmentsArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetSupervisorAssignmentsArgs)(nil)

// Attributes:
//   - Success
//   - Aze
type NimbusGetSupervisorAssignmentsResult struct {
	Success *SupervisorAssignments  `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusGetSupervisorAssignmentsResult() *NimbusGetSupervisorAssignmentsResult {
	return &NimbusGetSupervisorAssignmentsResult{}
}

var NimbusGetSupervisorAssignmentsResult_Success_DEFAULT *SupervisorAssignments

func (p *NimbusGetSupervisorAssignmentsResult) GetSuccess() *SupervisorAssignments {
	if !p.IsSetSuccess() {
		return NimbusGetSupervisorAssignmentsResult_Success_DEFAULT
	}
	return p.Success
}

var NimbusGetSupervisorAssignmentsResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusGetSupervisorAssignmentsResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusGetSupervisorAssignmentsResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusGetSupervisorAssignmentsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusGetSupervisorAssignmentsResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusGetSupervisorAssignmentsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusGetSupervisorAssignmentsResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &SupervisorAssignments{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NimbusGetSupervisorAssignmentsResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusGetSupervisorAssignmentsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getSupervisorAssignments_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusGetSupervisorAssignmentsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetSupervisorAssignmentsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusGetSupervisorAssignmentsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusGetSupervisorAssignmentsResult(%+v)", *p)
}

func (p *NimbusGetSupervisorAssignmentsResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusGetSupervisorAssignmentsResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusGetSupervisorAssignmentsResult)(nil)

// Attributes:
//   - Heartbeats
type NimbusSendSupervisorWorkerHeartbeatsArgs struct {
	Heartbeats *SupervisorWorkerHeartbeats `thrift:"heartbeats,1" db:"heartbeats" json:"heartbeats"`
}

func NewNimbusSendSupervisorWorkerHeartbeatsArgs() *NimbusSendSupervisorWorkerHeartbeatsArgs {
	return &NimbusSendSupervisorWorkerHeartbeatsArgs{}
}

var NimbusSendSupervisorWorkerHeartbeatsArgs_Heartbeats_DEFAULT *SupervisorWorkerHeartbeats

func (p *NimbusSendSupervisorWorkerHeartbeatsArgs) GetHeartbeats() *SupervisorWorkerHeartbeats {
	if !p.IsSetHeartbeats() {
		return NimbusSendSupervisorWorkerHeartbeatsArgs_Heartbeats_DEFAULT
	}
	return p.Heartbeats
}

func (p *NimbusSendSupervisorWorkerHeartbeatsArgs) IsSetHeartbeats() bool {
	return p.Heartbeats != nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Heartbeats = &SupervisorWorkerHeartbeats{}
	if err := p.Heartbeats.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Heartbeats), err)
	}
	return nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sendSupervisorWorkerHeartbeats_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "heartbeats", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:heartbeats: ", p), err)
	}
	if err := p.Heartbeats.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Heartbeats), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:heartbeats: ", p), err)
	}
	return err
}

func (p *NimbusSendSupervisorWorkerHeartbeatsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusSendSupervisorWorkerHeartbeatsArgs(%+v)", *p)
}

func (p *NimbusSendSupervisorWorkerHeartbeatsArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusSendSupervisorWorkerHeartbeatsArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusSendSupervisorWorkerHeartbeatsArgs)(nil)

// Attributes:
//   - Aze
type NimbusSendSupervisorWorkerHeartbeatsResult struct {
	Aze *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusSendSupervisorWorkerHeartbeatsResult() *NimbusSendSupervisorWorkerHeartbeatsResult {
	return &NimbusSendSupervisorWorkerHeartbeatsResult{}
}

var NimbusSendSupervisorWorkerHeartbeatsResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusSendSupervisorWorkerHeartbeatsResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusSendSupervisorWorkerHeartbeatsResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusSendSupervisorWorkerHeartbeatsResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatsResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sendSupervisorWorkerHeartbeats_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusSendSupervisorWorkerHeartbeatsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusSendSupervisorWorkerHeartbeatsResult(%+v)", *p)
}

func (p *NimbusSendSupervisorWorkerHeartbeatsResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusSendSupervisorWorkerHeartbeatsResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusSendSupervisorWorkerHeartbeatsResult)(nil)

// Attributes:
//   - Heatbeat
type NimbusSendSupervisorWorkerHeartbeatArgs struct {
	Heatbeat *SupervisorWorkerHeartbeat `thrift:"heatbeat,1" db:"heatbeat" json:"heatbeat"`
}

func NewNimbusSendSupervisorWorkerHeartbeatArgs() *NimbusSendSupervisorWorkerHeartbeatArgs {
	return &NimbusSendSupervisorWorkerHeartbeatArgs{}
}

var NimbusSendSupervisorWorkerHeartbeatArgs_Heatbeat_DEFAULT *SupervisorWorkerHeartbeat

func (p *NimbusSendSupervisorWorkerHeartbeatArgs) GetHeatbeat() *SupervisorWorkerHeartbeat {
	if !p.IsSetHeatbeat() {
		return NimbusSendSupervisorWorkerHeartbeatArgs_Heatbeat_DEFAULT
	}
	return p.Heatbeat
}

func (p *NimbusSendSupervisorWorkerHeartbeatArgs) IsSetHeatbeat() bool {
	return p.Heatbeat != nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Heatbeat = &SupervisorWorkerHeartbeat{}
	if err := p.Heatbeat.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Heatbeat), err)
	}
	return nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sendSupervisorWorkerHeartbeat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "heatbeat", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:heatbeat: ", p), err)
	}
	if err := p.Heatbeat.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Heatbeat), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:heatbeat: ", p), err)
	}
	return err
}

func (p *NimbusSendSupervisorWorkerHeartbeatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusSendSupervisorWorkerHeartbeatArgs(%+v)", *p)
}

func (p *NimbusSendSupervisorWorkerHeartbeatArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusSendSupervisorWorkerHeartbeatArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusSendSupervisorWorkerHeartbeatArgs)(nil)

// Attributes:
//   - Aze
//   - E
type NimbusSendSupervisorWorkerHeartbeatResult struct {
	Aze *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
	E   *NotAliveException      `thrift:"e,2" db:"e" json:"e,omitempty"`
}

func NewNimbusSendSupervisorWorkerHeartbeatResult() *NimbusSendSupervisorWorkerHeartbeatResult {
	return &NimbusSendSupervisorWorkerHeartbeatResult{}
}

var NimbusSendSupervisorWorkerHeartbeatResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusSendSupervisorWorkerHeartbeatResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusSendSupervisorWorkerHeartbeatResult_Aze_DEFAULT
	}
	return p.Aze
}

var NimbusSendSupervisorWorkerHeartbeatResult_E_DEFAULT *NotAliveException

func (p *NimbusSendSupervisorWorkerHeartbeatResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return NimbusSendSupervisorWorkerHeartbeatResult_E_DEFAULT
	}
	return p.E
}

func (p *NimbusSendSupervisorWorkerHeartbeatResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatResult) IsSetE() bool {
	return p.E != nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sendSupervisorWorkerHeartbeat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusSendSupervisorWorkerHeartbeatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusSendSupervisorWorkerHeartbeatResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:e: ", p), err)
		}
	}
	return err
}

func (p *NimbusSendSupervisorWorkerHeartbeatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusSendSupervisorWorkerHeartbeatResult(%+v)", *p)
}

func (p *NimbusSendSupervisorWorkerHeartbeatResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusSendSupervisorWorkerHeartbeatResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusSendSupervisorWorkerHeartbeatResult)(nil)

// Attributes:
//   - Metrics
type NimbusProcessWorkerMetricsArgs struct {
	Metrics *WorkerMetrics `thrift:"metrics,1" db:"metrics" json:"metrics"`
}

func NewNimbusProcessWorkerMetricsArgs() *NimbusProcessWorkerMetricsArgs {
	return &NimbusProcessWorkerMetricsArgs{}
}

var NimbusProcessWorkerMetricsArgs_Metrics_DEFAULT *WorkerMetrics

func (p *NimbusProcessWorkerMetricsArgs) GetMetrics() *WorkerMetrics {
	if !p.IsSetMetrics() {
		return NimbusProcessWorkerMetricsArgs_Metrics_DEFAULT
	}
	return p.Metrics
}

func (p *NimbusProcessWorkerMetricsArgs) IsSetMetrics() bool {
	return p.Metrics != nil
}

func (p *NimbusProcessWorkerMetricsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusProcessWorkerMetricsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Metrics = &WorkerMetrics{}
	if err := p.Metrics.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metrics), err)
	}
	return nil
}

func (p *NimbusProcessWorkerMetricsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "processWorkerMetrics_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusProcessWorkerMetricsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "metrics", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metrics: ", p), err)
	}
	if err := p.Metrics.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metrics), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metrics: ", p), err)
	}
	return err
}

func (p *NimbusProcessWorkerMetricsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusProcessWorkerMetricsArgs(%+v)", *p)
}

func (p *NimbusProcessWorkerMetricsArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusProcessWorkerMetricsArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusProcessWorkerMetricsArgs)(nil)

type NimbusProcessWorkerMetricsResult struct {
}

func NewNimbusProcessWorkerMetricsResult() *NimbusProcessWorkerMetricsResult {
	return &NimbusProcessWorkerMetricsResult{}
}

func (p *NimbusProcessWorkerMetricsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusProcessWorkerMetricsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "processWorkerMetrics_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusProcessWorkerMetricsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusProcessWorkerMetricsResult(%+v)", *p)
}

func (p *NimbusProcessWorkerMetricsResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusProcessWorkerMetricsResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusProcessWorkerMetricsResult)(nil)

// Attributes:
//   - BlobKey
type NimbusIsRemoteBlobExistsArgs struct {
	BlobKey string `thrift:"blobKey,1" db:"blobKey" json:"blobKey"`
}

func NewNimbusIsRemoteBlobExistsArgs() *NimbusIsRemoteBlobExistsArgs {
	return &NimbusIsRemoteBlobExistsArgs{}
}

func (p *NimbusIsRemoteBlobExistsArgs) GetBlobKey() string {
	return p.BlobKey
}

func (p *NimbusIsRemoteBlobExistsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusIsRemoteBlobExistsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BlobKey = v
	}
	return nil
}

func (p *NimbusIsRemoteBlobExistsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "isRemoteBlobExists_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusIsRemoteBlobExistsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "blobKey", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:blobKey: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.BlobKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blobKey (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:blobKey: ", p), err)
	}
	return err
}

func (p *NimbusIsRemoteBlobExistsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusIsRemoteBlobExistsArgs(%+v)", *p)
}

func (p *NimbusIsRemoteBlobExistsArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusIsRemoteBlobExistsArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusIsRemoteBlobExistsArgs)(nil)

// Attributes:
//   - Success
//   - Aze
type NimbusIsRemoteBlobExistsResult struct {
	Success *bool                   `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewNimbusIsRemoteBlobExistsResult() *NimbusIsRemoteBlobExistsResult {
	return &NimbusIsRemoteBlobExistsResult{}
}

var NimbusIsRemoteBlobExistsResult_Success_DEFAULT bool

func (p *NimbusIsRemoteBlobExistsResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return NimbusIsRemoteBlobExistsResult_Success_DEFAULT
	}
	return *p.Success
}

var NimbusIsRemoteBlobExistsResult_Aze_DEFAULT *AuthorizationException

func (p *NimbusIsRemoteBlobExistsResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return NimbusIsRemoteBlobExistsResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *NimbusIsRemoteBlobExistsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NimbusIsRemoteBlobExistsResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *NimbusIsRemoteBlobExistsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NimbusIsRemoteBlobExistsResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NimbusIsRemoteBlobExistsResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *NimbusIsRemoteBlobExistsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "isRemoteBlobExists_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NimbusIsRemoteBlobExistsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NimbusIsRemoteBlobExistsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *NimbusIsRemoteBlobExistsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NimbusIsRemoteBlobExistsResult(%+v)", *p)
}

func (p *NimbusIsRemoteBlobExistsResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.NimbusIsRemoteBlobExistsResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*NimbusIsRemoteBlobExistsResult)(nil)

type DistributedRPC interface {
	// Parameters:
	//  - FunctionName
	//  - FuncArgs_
	//
	Execute(ctx context.Context, functionName string, funcArgs string) (_r string, _err error)
}

type DistributedRPCClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewDistributedRPCClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DistributedRPCClient {
	return &DistributedRPCClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewDistributedRPCClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DistributedRPCClient {
	return &DistributedRPCClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewDistributedRPCClient(c thrift.TClient) *DistributedRPCClient {
	return &DistributedRPCClient{
		c: c,
	}
}

func (p *DistributedRPCClient) Client_() thrift.TClient {
	return p.c
}

func (p *DistributedRPCClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *DistributedRPCClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//   - FunctionName
//   - FuncArgs_
func (p *DistributedRPCClient) Execute(ctx context.Context, functionName string, funcArgs string) (_r string, _err error) {
	var _args721 DistributedRPCExecuteArgs
	_args721.FunctionName = functionName
	_args721.FuncArgs_ = funcArgs
	var _result723 DistributedRPCExecuteResult
	var _meta722 thrift.ResponseMeta
	_meta722, _err = p.Client_().Call(ctx, "execute", &_args721, &_result723)
	p.SetLastResponseMeta_(_meta722)
	if _err != nil {
		return
	}
	switch {
	case _result723.E != nil:
		return _r, _result723.E
	case _result723.Aze != nil:
		return _r, _result723.Aze
	}

	return _result723.GetSuccess(), nil
}

type DistributedRPCProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      DistributedRPC
}

func (p *DistributedRPCProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DistributedRPCProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DistributedRPCProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDistributedRPCProcessor(handler DistributedRPC) *DistributedRPCProcessor {

	self724 := &DistributedRPCProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self724.processorMap["execute"] = &distributedRPCProcessorExecute{handler: handler}
	return self724
}

func (p *DistributedRPCProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil {
		return false, thrift.WrapTException(err2)
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x725 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x725.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x725
}

type distributedRPCProcessorExecute struct {
	handler DistributedRPC
}

func (p *distributedRPCProcessorExecute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err726 thrift.TException
	args := DistributedRPCExecuteArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "execute", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := DistributedRPCExecuteResult{}
	if retval, err2 := p.handler.Execute(ctx, args.FunctionName, args.FuncArgs_); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *DRPCExecutionException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc727 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "execute", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err726 = thrift.WrapTException(err2)
			}
			if err2 := _exc727.Write(ctx, oprot); _write_err726 == nil && err2 != nil {
				_write_err726 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err726 == nil && err2 != nil {
				_write_err726 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err726 == nil && err2 != nil {
				_write_err726 = thrift.WrapTException(err2)
			}
			if _write_err726 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err726,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "execute", thrift.REPLY, seqId); err2 != nil {
		_write_err726 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err726 == nil && err2 != nil {
		_write_err726 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err726 == nil && err2 != nil {
		_write_err726 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err726 == nil && err2 != nil {
		_write_err726 = thrift.WrapTException(err2)
	}
	if _write_err726 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err726,
			EndpointError: err,
		}
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//   - FunctionName
//   - FuncArgs_
type DistributedRPCExecuteArgs struct {
	FunctionName string `thrift:"functionName,1" db:"functionName" json:"functionName"`
	FuncArgs_    string `thrift:"funcArgs,2" db:"funcArgs" json:"funcArgs"`
}

func NewDistributedRPCExecuteArgs() *DistributedRPCExecuteArgs {
	return &DistributedRPCExecuteArgs{}
}

func (p *DistributedRPCExecuteArgs) GetFunctionName() string {
	return p.FunctionName
}

func (p *DistributedRPCExecuteArgs) GetFuncArgs_() string {
	return p.FuncArgs_
}

func (p *DistributedRPCExecuteArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DistributedRPCExecuteArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FunctionName = v
	}
	return nil
}

func (p *DistributedRPCExecuteArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FuncArgs_ = v
	}
	return nil
}

func (p *DistributedRPCExecuteArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "execute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DistributedRPCExecuteArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "functionName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:functionName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.FunctionName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.functionName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:functionName: ", p), err)
	}
	return err
}

func (p *DistributedRPCExecuteArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "funcArgs", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:funcArgs: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.FuncArgs_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.funcArgs (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:funcArgs: ", p), err)
	}
	return err
}

func (p *DistributedRPCExecuteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DistributedRPCExecuteArgs(%+v)", *p)
}

func (p *DistributedRPCExecuteArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.DistributedRPCExecuteArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DistributedRPCExecuteArgs)(nil)

// Attributes:
//   - Success
//   - E
//   - Aze
type DistributedRPCExecuteResult struct {
	Success *string                 `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *DRPCExecutionException `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewDistributedRPCExecuteResult() *DistributedRPCExecuteResult {
	return &DistributedRPCExecuteResult{}
}

var DistributedRPCExecuteResult_Success_DEFAULT string

func (p *DistributedRPCExecuteResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return DistributedRPCExecuteResult_Success_DEFAULT
	}
	return *p.Success
}

var DistributedRPCExecuteResult_E_DEFAULT *DRPCExecutionException

func (p *DistributedRPCExecuteResult) GetE() *DRPCExecutionException {
	if !p.IsSetE() {
		return DistributedRPCExecuteResult_E_DEFAULT
	}
	return p.E
}

var DistributedRPCExecuteResult_Aze_DEFAULT *AuthorizationException

func (p *DistributedRPCExecuteResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return DistributedRPCExecuteResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *DistributedRPCExecuteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DistributedRPCExecuteResult) IsSetE() bool {
	return p.E != nil
}

func (p *DistributedRPCExecuteResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *DistributedRPCExecuteResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DistributedRPCExecuteResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DistributedRPCExecuteResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &DRPCExecutionException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *DistributedRPCExecuteResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *DistributedRPCExecuteResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "execute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DistributedRPCExecuteResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DistributedRPCExecuteResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *DistributedRPCExecuteResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *DistributedRPCExecuteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DistributedRPCExecuteResult(%+v)", *p)
}

func (p *DistributedRPCExecuteResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.DistributedRPCExecuteResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DistributedRPCExecuteResult)(nil)

type DistributedRPCInvocations interface {
	// Parameters:
	//  - ID
	//  - Result_
	//
	Result_(ctx context.Context, id string, result string) (_err error)
	// Parameters:
	//  - FunctionName
	//
	FetchRequest(ctx context.Context, functionName string) (_r *DRPCRequest, _err error)
	// Parameters:
	//  - ID
	//
	FailRequest(ctx context.Context, id string) (_err error)
	// Parameters:
	//  - ID
	//  - E
	//
	FailRequestV2(ctx context.Context, id string, e *DRPCExecutionException) (_err error)
}

type DistributedRPCInvocationsClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewDistributedRPCInvocationsClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DistributedRPCInvocationsClient {
	return &DistributedRPCInvocationsClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewDistributedRPCInvocationsClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DistributedRPCInvocationsClient {
	return &DistributedRPCInvocationsClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewDistributedRPCInvocationsClient(c thrift.TClient) *DistributedRPCInvocationsClient {
	return &DistributedRPCInvocationsClient{
		c: c,
	}
}

func (p *DistributedRPCInvocationsClient) Client_() thrift.TClient {
	return p.c
}

func (p *DistributedRPCInvocationsClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *DistributedRPCInvocationsClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//   - ID
//   - Result_
func (p *DistributedRPCInvocationsClient) Result_(ctx context.Context, id string, result string) (_err error) {
	var _args730 DistributedRPCInvocationsResultArgs
	_args730.ID = id
	_args730.Result_ = result
	var _result732 DistributedRPCInvocationsResultResult
	var _meta731 thrift.ResponseMeta
	_meta731, _err = p.Client_().Call(ctx, "result", &_args730, &_result732)
	p.SetLastResponseMeta_(_meta731)
	if _err != nil {
		return
	}
	switch {
	case _result732.Aze != nil:
		return _result732.Aze
	}

	return nil
}

// Parameters:
//   - FunctionName
func (p *DistributedRPCInvocationsClient) FetchRequest(ctx context.Context, functionName string) (_r *DRPCRequest, _err error) {
	var _args733 DistributedRPCInvocationsFetchRequestArgs
	_args733.FunctionName = functionName
	var _result735 DistributedRPCInvocationsFetchRequestResult
	var _meta734 thrift.ResponseMeta
	_meta734, _err = p.Client_().Call(ctx, "fetchRequest", &_args733, &_result735)
	p.SetLastResponseMeta_(_meta734)
	if _err != nil {
		return
	}
	switch {
	case _result735.Aze != nil:
		return _r, _result735.Aze
	}

	if _ret736 := _result735.GetSuccess(); _ret736 != nil {
		return _ret736, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "fetchRequest failed: unknown result")
}

// Parameters:
//   - ID
func (p *DistributedRPCInvocationsClient) FailRequest(ctx context.Context, id string) (_err error) {
	var _args737 DistributedRPCInvocationsFailRequestArgs
	_args737.ID = id
	var _result739 DistributedRPCInvocationsFailRequestResult
	var _meta738 thrift.ResponseMeta
	_meta738, _err = p.Client_().Call(ctx, "failRequest", &_args737, &_result739)
	p.SetLastResponseMeta_(_meta738)
	if _err != nil {
		return
	}
	switch {
	case _result739.Aze != nil:
		return _result739.Aze
	}

	return nil
}

// Parameters:
//   - ID
//   - E
func (p *DistributedRPCInvocationsClient) FailRequestV2(ctx context.Context, id string, e *DRPCExecutionException) (_err error) {
	var _args740 DistributedRPCInvocationsFailRequestV2Args
	_args740.ID = id
	_args740.E = e
	var _result742 DistributedRPCInvocationsFailRequestV2Result
	var _meta741 thrift.ResponseMeta
	_meta741, _err = p.Client_().Call(ctx, "failRequestV2", &_args740, &_result742)
	p.SetLastResponseMeta_(_meta741)
	if _err != nil {
		return
	}
	switch {
	case _result742.Aze != nil:
		return _result742.Aze
	}

	return nil
}

type DistributedRPCInvocationsProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      DistributedRPCInvocations
}

func (p *DistributedRPCInvocationsProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DistributedRPCInvocationsProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DistributedRPCInvocationsProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDistributedRPCInvocationsProcessor(handler DistributedRPCInvocations) *DistributedRPCInvocationsProcessor {

	self743 := &DistributedRPCInvocationsProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self743.processorMap["result"] = &distributedRPCInvocationsProcessorResult_{handler: handler}
	self743.processorMap["fetchRequest"] = &distributedRPCInvocationsProcessorFetchRequest{handler: handler}
	self743.processorMap["failRequest"] = &distributedRPCInvocationsProcessorFailRequest{handler: handler}
	self743.processorMap["failRequestV2"] = &distributedRPCInvocationsProcessorFailRequestV2{handler: handler}
	return self743
}

func (p *DistributedRPCInvocationsProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil {
		return false, thrift.WrapTException(err2)
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x744 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x744.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x744
}

type distributedRPCInvocationsProcessorResult_ struct {
	handler DistributedRPCInvocations
}

func (p *distributedRPCInvocationsProcessorResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err745 thrift.TException
	args := DistributedRPCInvocationsResultArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "result", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := DistributedRPCInvocationsResultResult{}
	if err2 := p.handler.Result_(ctx, args.ID, args.Result_); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc746 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing result: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "result", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err745 = thrift.WrapTException(err2)
			}
			if err2 := _exc746.Write(ctx, oprot); _write_err745 == nil && err2 != nil {
				_write_err745 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err745 == nil && err2 != nil {
				_write_err745 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err745 == nil && err2 != nil {
				_write_err745 = thrift.WrapTException(err2)
			}
			if _write_err745 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err745,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "result", thrift.REPLY, seqId); err2 != nil {
		_write_err745 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err745 == nil && err2 != nil {
		_write_err745 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err745 == nil && err2 != nil {
		_write_err745 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err745 == nil && err2 != nil {
		_write_err745 = thrift.WrapTException(err2)
	}
	if _write_err745 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err745,
			EndpointError: err,
		}
	}
	return true, err
}

type distributedRPCInvocationsProcessorFetchRequest struct {
	handler DistributedRPCInvocations
}

func (p *distributedRPCInvocationsProcessorFetchRequest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err747 thrift.TException
	args := DistributedRPCInvocationsFetchRequestArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "fetchRequest", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := DistributedRPCInvocationsFetchRequestResult{}
	if retval, err2 := p.handler.FetchRequest(ctx, args.FunctionName); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc748 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchRequest: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "fetchRequest", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err747 = thrift.WrapTException(err2)
			}
			if err2 := _exc748.Write(ctx, oprot); _write_err747 == nil && err2 != nil {
				_write_err747 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err747 == nil && err2 != nil {
				_write_err747 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err747 == nil && err2 != nil {
				_write_err747 = thrift.WrapTException(err2)
			}
			if _write_err747 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err747,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "fetchRequest", thrift.REPLY, seqId); err2 != nil {
		_write_err747 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err747 == nil && err2 != nil {
		_write_err747 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err747 == nil && err2 != nil {
		_write_err747 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err747 == nil && err2 != nil {
		_write_err747 = thrift.WrapTException(err2)
	}
	if _write_err747 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err747,
			EndpointError: err,
		}
	}
	return true, err
}

type distributedRPCInvocationsProcessorFailRequest struct {
	handler DistributedRPCInvocations
}

func (p *distributedRPCInvocationsProcessorFailRequest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err749 thrift.TException
	args := DistributedRPCInvocationsFailRequestArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "failRequest", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := DistributedRPCInvocationsFailRequestResult{}
	if err2 := p.handler.FailRequest(ctx, args.ID); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc750 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing failRequest: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "failRequest", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err749 = thrift.WrapTException(err2)
			}
			if err2 := _exc750.Write(ctx, oprot); _write_err749 == nil && err2 != nil {
				_write_err749 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err749 == nil && err2 != nil {
				_write_err749 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err749 == nil && err2 != nil {
				_write_err749 = thrift.WrapTException(err2)
			}
			if _write_err749 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err749,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "failRequest", thrift.REPLY, seqId); err2 != nil {
		_write_err749 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err749 == nil && err2 != nil {
		_write_err749 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err749 == nil && err2 != nil {
		_write_err749 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err749 == nil && err2 != nil {
		_write_err749 = thrift.WrapTException(err2)
	}
	if _write_err749 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err749,
			EndpointError: err,
		}
	}
	return true, err
}

type distributedRPCInvocationsProcessorFailRequestV2 struct {
	handler DistributedRPCInvocations
}

func (p *distributedRPCInvocationsProcessorFailRequestV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err751 thrift.TException
	args := DistributedRPCInvocationsFailRequestV2Args{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "failRequestV2", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := DistributedRPCInvocationsFailRequestV2Result{}
	if err2 := p.handler.FailRequestV2(ctx, args.ID, args.E); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc752 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing failRequestV2: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "failRequestV2", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err751 = thrift.WrapTException(err2)
			}
			if err2 := _exc752.Write(ctx, oprot); _write_err751 == nil && err2 != nil {
				_write_err751 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err751 == nil && err2 != nil {
				_write_err751 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err751 == nil && err2 != nil {
				_write_err751 = thrift.WrapTException(err2)
			}
			if _write_err751 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err751,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "failRequestV2", thrift.REPLY, seqId); err2 != nil {
		_write_err751 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err751 == nil && err2 != nil {
		_write_err751 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err751 == nil && err2 != nil {
		_write_err751 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err751 == nil && err2 != nil {
		_write_err751 = thrift.WrapTException(err2)
	}
	if _write_err751 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err751,
			EndpointError: err,
		}
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//   - ID
//   - Result_
type DistributedRPCInvocationsResultArgs struct {
	ID      string `thrift:"id,1" db:"id" json:"id"`
	Result_ string `thrift:"result,2" db:"result" json:"result"`
}

func NewDistributedRPCInvocationsResultArgs() *DistributedRPCInvocationsResultArgs {
	return &DistributedRPCInvocationsResultArgs{}
}

func (p *DistributedRPCInvocationsResultArgs) GetID() string {
	return p.ID
}

func (p *DistributedRPCInvocationsResultArgs) GetResult_() string {
	return p.Result_
}

func (p *DistributedRPCInvocationsResultArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DistributedRPCInvocationsResultArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *DistributedRPCInvocationsResultArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *DistributedRPCInvocationsResultArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "result_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DistributedRPCInvocationsResultArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *DistributedRPCInvocationsResultArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Result_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.result (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err)
	}
	return err
}

func (p *DistributedRPCInvocationsResultArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DistributedRPCInvocationsResultArgs(%+v)", *p)
}

func (p *DistributedRPCInvocationsResultArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.DistributedRPCInvocationsResultArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DistributedRPCInvocationsResultArgs)(nil)

// Attributes:
//   - Aze
type DistributedRPCInvocationsResultResult struct {
	Aze *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewDistributedRPCInvocationsResultResult() *DistributedRPCInvocationsResultResult {
	return &DistributedRPCInvocationsResultResult{}
}

var DistributedRPCInvocationsResultResult_Aze_DEFAULT *AuthorizationException

func (p *DistributedRPCInvocationsResultResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return DistributedRPCInvocationsResultResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *DistributedRPCInvocationsResultResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *DistributedRPCInvocationsResultResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DistributedRPCInvocationsResultResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *DistributedRPCInvocationsResultResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "result_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DistributedRPCInvocationsResultResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *DistributedRPCInvocationsResultResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DistributedRPCInvocationsResultResult(%+v)", *p)
}

func (p *DistributedRPCInvocationsResultResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.DistributedRPCInvocationsResultResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DistributedRPCInvocationsResultResult)(nil)

// Attributes:
//   - FunctionName
type DistributedRPCInvocationsFetchRequestArgs struct {
	FunctionName string `thrift:"functionName,1" db:"functionName" json:"functionName"`
}

func NewDistributedRPCInvocationsFetchRequestArgs() *DistributedRPCInvocationsFetchRequestArgs {
	return &DistributedRPCInvocationsFetchRequestArgs{}
}

func (p *DistributedRPCInvocationsFetchRequestArgs) GetFunctionName() string {
	return p.FunctionName
}

func (p *DistributedRPCInvocationsFetchRequestArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DistributedRPCInvocationsFetchRequestArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FunctionName = v
	}
	return nil
}

func (p *DistributedRPCInvocationsFetchRequestArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "fetchRequest_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DistributedRPCInvocationsFetchRequestArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "functionName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:functionName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.FunctionName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.functionName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:functionName: ", p), err)
	}
	return err
}

func (p *DistributedRPCInvocationsFetchRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DistributedRPCInvocationsFetchRequestArgs(%+v)", *p)
}

func (p *DistributedRPCInvocationsFetchRequestArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.DistributedRPCInvocationsFetchRequestArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DistributedRPCInvocationsFetchRequestArgs)(nil)

// Attributes:
//   - Success
//   - Aze
type DistributedRPCInvocationsFetchRequestResult struct {
	Success *DRPCRequest            `thrift:"success,0" db:"success" json:"success,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewDistributedRPCInvocationsFetchRequestResult() *DistributedRPCInvocationsFetchRequestResult {
	return &DistributedRPCInvocationsFetchRequestResult{}
}

var DistributedRPCInvocationsFetchRequestResult_Success_DEFAULT *DRPCRequest

func (p *DistributedRPCInvocationsFetchRequestResult) GetSuccess() *DRPCRequest {
	if !p.IsSetSuccess() {
		return DistributedRPCInvocationsFetchRequestResult_Success_DEFAULT
	}
	return p.Success
}

var DistributedRPCInvocationsFetchRequestResult_Aze_DEFAULT *AuthorizationException

func (p *DistributedRPCInvocationsFetchRequestResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return DistributedRPCInvocationsFetchRequestResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *DistributedRPCInvocationsFetchRequestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DistributedRPCInvocationsFetchRequestResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *DistributedRPCInvocationsFetchRequestResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DistributedRPCInvocationsFetchRequestResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &DRPCRequest{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DistributedRPCInvocationsFetchRequestResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *DistributedRPCInvocationsFetchRequestResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "fetchRequest_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DistributedRPCInvocationsFetchRequestResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DistributedRPCInvocationsFetchRequestResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *DistributedRPCInvocationsFetchRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DistributedRPCInvocationsFetchRequestResult(%+v)", *p)
}

func (p *DistributedRPCInvocationsFetchRequestResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.DistributedRPCInvocationsFetchRequestResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DistributedRPCInvocationsFetchRequestResult)(nil)

// Attributes:
//   - ID
type DistributedRPCInvocationsFailRequestArgs struct {
	ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewDistributedRPCInvocationsFailRequestArgs() *DistributedRPCInvocationsFailRequestArgs {
	return &DistributedRPCInvocationsFailRequestArgs{}
}

func (p *DistributedRPCInvocationsFailRequestArgs) GetID() string {
	return p.ID
}

func (p *DistributedRPCInvocationsFailRequestArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DistributedRPCInvocationsFailRequestArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *DistributedRPCInvocationsFailRequestArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "failRequest_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DistributedRPCInvocationsFailRequestArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *DistributedRPCInvocationsFailRequestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DistributedRPCInvocationsFailRequestArgs(%+v)", *p)
}

func (p *DistributedRPCInvocationsFailRequestArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.DistributedRPCInvocationsFailRequestArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DistributedRPCInvocationsFailRequestArgs)(nil)

// Attributes:
//   - Aze
type DistributedRPCInvocationsFailRequestResult struct {
	Aze *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewDistributedRPCInvocationsFailRequestResult() *DistributedRPCInvocationsFailRequestResult {
	return &DistributedRPCInvocationsFailRequestResult{}
}

var DistributedRPCInvocationsFailRequestResult_Aze_DEFAULT *AuthorizationException

func (p *DistributedRPCInvocationsFailRequestResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return DistributedRPCInvocationsFailRequestResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *DistributedRPCInvocationsFailRequestResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *DistributedRPCInvocationsFailRequestResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DistributedRPCInvocationsFailRequestResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *DistributedRPCInvocationsFailRequestResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "failRequest_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DistributedRPCInvocationsFailRequestResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *DistributedRPCInvocationsFailRequestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DistributedRPCInvocationsFailRequestResult(%+v)", *p)
}

func (p *DistributedRPCInvocationsFailRequestResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.DistributedRPCInvocationsFailRequestResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DistributedRPCInvocationsFailRequestResult)(nil)

// Attributes:
//   - ID
//   - E
type DistributedRPCInvocationsFailRequestV2Args struct {
	ID string                  `thrift:"id,1" db:"id" json:"id"`
	E  *DRPCExecutionException `thrift:"e,2" db:"e" json:"e"`
}

func NewDistributedRPCInvocationsFailRequestV2Args() *DistributedRPCInvocationsFailRequestV2Args {
	return &DistributedRPCInvocationsFailRequestV2Args{}
}

func (p *DistributedRPCInvocationsFailRequestV2Args) GetID() string {
	return p.ID
}

var DistributedRPCInvocationsFailRequestV2Args_E_DEFAULT *DRPCExecutionException

func (p *DistributedRPCInvocationsFailRequestV2Args) GetE() *DRPCExecutionException {
	if !p.IsSetE() {
		return DistributedRPCInvocationsFailRequestV2Args_E_DEFAULT
	}
	return p.E
}

func (p *DistributedRPCInvocationsFailRequestV2Args) IsSetE() bool {
	return p.E != nil
}

func (p *DistributedRPCInvocationsFailRequestV2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DistributedRPCInvocationsFailRequestV2Args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *DistributedRPCInvocationsFailRequestV2Args) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &DRPCExecutionException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *DistributedRPCInvocationsFailRequestV2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "failRequestV2_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DistributedRPCInvocationsFailRequestV2Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *DistributedRPCInvocationsFailRequestV2Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:e: ", p), err)
	}
	if err := p.E.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:e: ", p), err)
	}
	return err
}

func (p *DistributedRPCInvocationsFailRequestV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DistributedRPCInvocationsFailRequestV2Args(%+v)", *p)
}

func (p *DistributedRPCInvocationsFailRequestV2Args) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.DistributedRPCInvocationsFailRequestV2Args",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DistributedRPCInvocationsFailRequestV2Args)(nil)

// Attributes:
//   - Aze
type DistributedRPCInvocationsFailRequestV2Result struct {
	Aze *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewDistributedRPCInvocationsFailRequestV2Result() *DistributedRPCInvocationsFailRequestV2Result {
	return &DistributedRPCInvocationsFailRequestV2Result{}
}

var DistributedRPCInvocationsFailRequestV2Result_Aze_DEFAULT *AuthorizationException

func (p *DistributedRPCInvocationsFailRequestV2Result) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return DistributedRPCInvocationsFailRequestV2Result_Aze_DEFAULT
	}
	return p.Aze
}

func (p *DistributedRPCInvocationsFailRequestV2Result) IsSetAze() bool {
	return p.Aze != nil
}

func (p *DistributedRPCInvocationsFailRequestV2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DistributedRPCInvocationsFailRequestV2Result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *DistributedRPCInvocationsFailRequestV2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "failRequestV2_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DistributedRPCInvocationsFailRequestV2Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *DistributedRPCInvocationsFailRequestV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DistributedRPCInvocationsFailRequestV2Result(%+v)", *p)
}

func (p *DistributedRPCInvocationsFailRequestV2Result) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.DistributedRPCInvocationsFailRequestV2Result",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DistributedRPCInvocationsFailRequestV2Result)(nil)

type Supervisor interface {
	// Send node specific assignments to supervisor
	//
	// Parameters:
	//  - Assignments
	//
	SendSupervisorAssignments(ctx context.Context, assignments *SupervisorAssignments) (_err error)
	// Get local assignment for a storm
	//
	// Parameters:
	//  - ID
	//
	GetLocalAssignmentForStorm(ctx context.Context, id string) (_r *Assignment, _err error)
	// Send worker heartbeat to local supervisor
	//
	// Parameters:
	//  - Heartbeat
	//
	SendSupervisorWorkerHeartbeat(ctx context.Context, heartbeat *SupervisorWorkerHeartbeat) (_err error)
}

type SupervisorClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewSupervisorClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SupervisorClient {
	return &SupervisorClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewSupervisorClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SupervisorClient {
	return &SupervisorClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewSupervisorClient(c thrift.TClient) *SupervisorClient {
	return &SupervisorClient{
		c: c,
	}
}

func (p *SupervisorClient) Client_() thrift.TClient {
	return p.c
}

func (p *SupervisorClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *SupervisorClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Send node specific assignments to supervisor
//
// Parameters:
//   - Assignments
func (p *SupervisorClient) SendSupervisorAssignments(ctx context.Context, assignments *SupervisorAssignments) (_err error) {
	var _args764 SupervisorSendSupervisorAssignmentsArgs
	_args764.Assignments = assignments
	var _result766 SupervisorSendSupervisorAssignmentsResult
	var _meta765 thrift.ResponseMeta
	_meta765, _err = p.Client_().Call(ctx, "sendSupervisorAssignments", &_args764, &_result766)
	p.SetLastResponseMeta_(_meta765)
	if _err != nil {
		return
	}
	switch {
	case _result766.Aze != nil:
		return _result766.Aze
	}

	return nil
}

// Get local assignment for a storm
//
// Parameters:
//   - ID
func (p *SupervisorClient) GetLocalAssignmentForStorm(ctx context.Context, id string) (_r *Assignment, _err error) {
	var _args767 SupervisorGetLocalAssignmentForStormArgs
	_args767.ID = id
	var _result769 SupervisorGetLocalAssignmentForStormResult
	var _meta768 thrift.ResponseMeta
	_meta768, _err = p.Client_().Call(ctx, "getLocalAssignmentForStorm", &_args767, &_result769)
	p.SetLastResponseMeta_(_meta768)
	if _err != nil {
		return
	}
	switch {
	case _result769.E != nil:
		return _r, _result769.E
	case _result769.Aze != nil:
		return _r, _result769.Aze
	}

	if _ret770 := _result769.GetSuccess(); _ret770 != nil {
		return _ret770, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getLocalAssignmentForStorm failed: unknown result")
}

// Send worker heartbeat to local supervisor
//
// Parameters:
//   - Heartbeat
func (p *SupervisorClient) SendSupervisorWorkerHeartbeat(ctx context.Context, heartbeat *SupervisorWorkerHeartbeat) (_err error) {
	var _args771 SupervisorSendSupervisorWorkerHeartbeatArgs
	_args771.Heartbeat = heartbeat
	var _result773 SupervisorSendSupervisorWorkerHeartbeatResult
	var _meta772 thrift.ResponseMeta
	_meta772, _err = p.Client_().Call(ctx, "sendSupervisorWorkerHeartbeat", &_args771, &_result773)
	p.SetLastResponseMeta_(_meta772)
	if _err != nil {
		return
	}
	switch {
	case _result773.Aze != nil:
		return _result773.Aze
	}

	return nil
}

type SupervisorProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Supervisor
}

func (p *SupervisorProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SupervisorProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SupervisorProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSupervisorProcessor(handler Supervisor) *SupervisorProcessor {

	self774 := &SupervisorProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self774.processorMap["sendSupervisorAssignments"] = &supervisorProcessorSendSupervisorAssignments{handler: handler}
	self774.processorMap["getLocalAssignmentForStorm"] = &supervisorProcessorGetLocalAssignmentForStorm{handler: handler}
	self774.processorMap["sendSupervisorWorkerHeartbeat"] = &supervisorProcessorSendSupervisorWorkerHeartbeat{handler: handler}
	return self774
}

func (p *SupervisorProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil {
		return false, thrift.WrapTException(err2)
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x775 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x775.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x775
}

type supervisorProcessorSendSupervisorAssignments struct {
	handler Supervisor
}

func (p *supervisorProcessorSendSupervisorAssignments) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err776 thrift.TException
	args := SupervisorSendSupervisorAssignmentsArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "sendSupervisorAssignments", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := SupervisorSendSupervisorAssignmentsResult{}
	if err2 := p.handler.SendSupervisorAssignments(ctx, args.Assignments); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc777 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendSupervisorAssignments: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "sendSupervisorAssignments", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err776 = thrift.WrapTException(err2)
			}
			if err2 := _exc777.Write(ctx, oprot); _write_err776 == nil && err2 != nil {
				_write_err776 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err776 == nil && err2 != nil {
				_write_err776 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err776 == nil && err2 != nil {
				_write_err776 = thrift.WrapTException(err2)
			}
			if _write_err776 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err776,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "sendSupervisorAssignments", thrift.REPLY, seqId); err2 != nil {
		_write_err776 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err776 == nil && err2 != nil {
		_write_err776 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err776 == nil && err2 != nil {
		_write_err776 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err776 == nil && err2 != nil {
		_write_err776 = thrift.WrapTException(err2)
	}
	if _write_err776 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err776,
			EndpointError: err,
		}
	}
	return true, err
}

type supervisorProcessorGetLocalAssignmentForStorm struct {
	handler Supervisor
}

func (p *supervisorProcessorGetLocalAssignmentForStorm) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err778 thrift.TException
	args := SupervisorGetLocalAssignmentForStormArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getLocalAssignmentForStorm", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := SupervisorGetLocalAssignmentForStormResult{}
	if retval, err2 := p.handler.GetLocalAssignmentForStorm(ctx, args.ID); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *NotAliveException:
			result.E = v
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc779 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLocalAssignmentForStorm: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getLocalAssignmentForStorm", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err778 = thrift.WrapTException(err2)
			}
			if err2 := _exc779.Write(ctx, oprot); _write_err778 == nil && err2 != nil {
				_write_err778 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err778 == nil && err2 != nil {
				_write_err778 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err778 == nil && err2 != nil {
				_write_err778 = thrift.WrapTException(err2)
			}
			if _write_err778 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err778,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getLocalAssignmentForStorm", thrift.REPLY, seqId); err2 != nil {
		_write_err778 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err778 == nil && err2 != nil {
		_write_err778 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err778 == nil && err2 != nil {
		_write_err778 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err778 == nil && err2 != nil {
		_write_err778 = thrift.WrapTException(err2)
	}
	if _write_err778 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err778,
			EndpointError: err,
		}
	}
	return true, err
}

type supervisorProcessorSendSupervisorWorkerHeartbeat struct {
	handler Supervisor
}

func (p *supervisorProcessorSendSupervisorWorkerHeartbeat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err780 thrift.TException
	args := SupervisorSendSupervisorWorkerHeartbeatArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "sendSupervisorWorkerHeartbeat", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := SupervisorSendSupervisorWorkerHeartbeatResult{}
	if err2 := p.handler.SendSupervisorWorkerHeartbeat(ctx, args.Heartbeat); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *AuthorizationException:
			result.Aze = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc781 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendSupervisorWorkerHeartbeat: "+err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "sendSupervisorWorkerHeartbeat", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err780 = thrift.WrapTException(err2)
			}
			if err2 := _exc781.Write(ctx, oprot); _write_err780 == nil && err2 != nil {
				_write_err780 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err780 == nil && err2 != nil {
				_write_err780 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err780 == nil && err2 != nil {
				_write_err780 = thrift.WrapTException(err2)
			}
			if _write_err780 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err780,
					EndpointError: err,
				}
			}
			return true, err
		}
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "sendSupervisorWorkerHeartbeat", thrift.REPLY, seqId); err2 != nil {
		_write_err780 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err780 == nil && err2 != nil {
		_write_err780 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err780 == nil && err2 != nil {
		_write_err780 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err780 == nil && err2 != nil {
		_write_err780 = thrift.WrapTException(err2)
	}
	if _write_err780 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err780,
			EndpointError: err,
		}
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//   - Assignments
type SupervisorSendSupervisorAssignmentsArgs struct {
	Assignments *SupervisorAssignments `thrift:"assignments,1" db:"assignments" json:"assignments"`
}

func NewSupervisorSendSupervisorAssignmentsArgs() *SupervisorSendSupervisorAssignmentsArgs {
	return &SupervisorSendSupervisorAssignmentsArgs{}
}

var SupervisorSendSupervisorAssignmentsArgs_Assignments_DEFAULT *SupervisorAssignments

func (p *SupervisorSendSupervisorAssignmentsArgs) GetAssignments() *SupervisorAssignments {
	if !p.IsSetAssignments() {
		return SupervisorSendSupervisorAssignmentsArgs_Assignments_DEFAULT
	}
	return p.Assignments
}

func (p *SupervisorSendSupervisorAssignmentsArgs) IsSetAssignments() bool {
	return p.Assignments != nil
}

func (p *SupervisorSendSupervisorAssignmentsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SupervisorSendSupervisorAssignmentsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Assignments = &SupervisorAssignments{}
	if err := p.Assignments.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Assignments), err)
	}
	return nil
}

func (p *SupervisorSendSupervisorAssignmentsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sendSupervisorAssignments_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SupervisorSendSupervisorAssignmentsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "assignments", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assignments: ", p), err)
	}
	if err := p.Assignments.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Assignments), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assignments: ", p), err)
	}
	return err
}

func (p *SupervisorSendSupervisorAssignmentsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SupervisorSendSupervisorAssignmentsArgs(%+v)", *p)
}

func (p *SupervisorSendSupervisorAssignmentsArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SupervisorSendSupervisorAssignmentsArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SupervisorSendSupervisorAssignmentsArgs)(nil)

// Attributes:
//   - Aze
type SupervisorSendSupervisorAssignmentsResult struct {
	Aze *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewSupervisorSendSupervisorAssignmentsResult() *SupervisorSendSupervisorAssignmentsResult {
	return &SupervisorSendSupervisorAssignmentsResult{}
}

var SupervisorSendSupervisorAssignmentsResult_Aze_DEFAULT *AuthorizationException

func (p *SupervisorSendSupervisorAssignmentsResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return SupervisorSendSupervisorAssignmentsResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *SupervisorSendSupervisorAssignmentsResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *SupervisorSendSupervisorAssignmentsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SupervisorSendSupervisorAssignmentsResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *SupervisorSendSupervisorAssignmentsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sendSupervisorAssignments_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SupervisorSendSupervisorAssignmentsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *SupervisorSendSupervisorAssignmentsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SupervisorSendSupervisorAssignmentsResult(%+v)", *p)
}

func (p *SupervisorSendSupervisorAssignmentsResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SupervisorSendSupervisorAssignmentsResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SupervisorSendSupervisorAssignmentsResult)(nil)

// Attributes:
//   - ID
type SupervisorGetLocalAssignmentForStormArgs struct {
	ID string `thrift:"id,1" db:"id" json:"id"`
}

func NewSupervisorGetLocalAssignmentForStormArgs() *SupervisorGetLocalAssignmentForStormArgs {
	return &SupervisorGetLocalAssignmentForStormArgs{}
}

func (p *SupervisorGetLocalAssignmentForStormArgs) GetID() string {
	return p.ID
}

func (p *SupervisorGetLocalAssignmentForStormArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SupervisorGetLocalAssignmentForStormArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *SupervisorGetLocalAssignmentForStormArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getLocalAssignmentForStorm_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SupervisorGetLocalAssignmentForStormArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *SupervisorGetLocalAssignmentForStormArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SupervisorGetLocalAssignmentForStormArgs(%+v)", *p)
}

func (p *SupervisorGetLocalAssignmentForStormArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SupervisorGetLocalAssignmentForStormArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SupervisorGetLocalAssignmentForStormArgs)(nil)

// Attributes:
//   - Success
//   - E
//   - Aze
type SupervisorGetLocalAssignmentForStormResult struct {
	Success *Assignment             `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *NotAliveException      `thrift:"e,1" db:"e" json:"e,omitempty"`
	Aze     *AuthorizationException `thrift:"aze,2" db:"aze" json:"aze,omitempty"`
}

func NewSupervisorGetLocalAssignmentForStormResult() *SupervisorGetLocalAssignmentForStormResult {
	return &SupervisorGetLocalAssignmentForStormResult{}
}

var SupervisorGetLocalAssignmentForStormResult_Success_DEFAULT *Assignment

func (p *SupervisorGetLocalAssignmentForStormResult) GetSuccess() *Assignment {
	if !p.IsSetSuccess() {
		return SupervisorGetLocalAssignmentForStormResult_Success_DEFAULT
	}
	return p.Success
}

var SupervisorGetLocalAssignmentForStormResult_E_DEFAULT *NotAliveException

func (p *SupervisorGetLocalAssignmentForStormResult) GetE() *NotAliveException {
	if !p.IsSetE() {
		return SupervisorGetLocalAssignmentForStormResult_E_DEFAULT
	}
	return p.E
}

var SupervisorGetLocalAssignmentForStormResult_Aze_DEFAULT *AuthorizationException

func (p *SupervisorGetLocalAssignmentForStormResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return SupervisorGetLocalAssignmentForStormResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *SupervisorGetLocalAssignmentForStormResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SupervisorGetLocalAssignmentForStormResult) IsSetE() bool {
	return p.E != nil
}

func (p *SupervisorGetLocalAssignmentForStormResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *SupervisorGetLocalAssignmentForStormResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SupervisorGetLocalAssignmentForStormResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &Assignment{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SupervisorGetLocalAssignmentForStormResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &NotAliveException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *SupervisorGetLocalAssignmentForStormResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *SupervisorGetLocalAssignmentForStormResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getLocalAssignmentForStorm_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SupervisorGetLocalAssignmentForStormResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SupervisorGetLocalAssignmentForStormResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *SupervisorGetLocalAssignmentForStormResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aze: ", p), err)
		}
	}
	return err
}

func (p *SupervisorGetLocalAssignmentForStormResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SupervisorGetLocalAssignmentForStormResult(%+v)", *p)
}

func (p *SupervisorGetLocalAssignmentForStormResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SupervisorGetLocalAssignmentForStormResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SupervisorGetLocalAssignmentForStormResult)(nil)

// Attributes:
//   - Heartbeat
type SupervisorSendSupervisorWorkerHeartbeatArgs struct {
	Heartbeat *SupervisorWorkerHeartbeat `thrift:"heartbeat,1" db:"heartbeat" json:"heartbeat"`
}

func NewSupervisorSendSupervisorWorkerHeartbeatArgs() *SupervisorSendSupervisorWorkerHeartbeatArgs {
	return &SupervisorSendSupervisorWorkerHeartbeatArgs{}
}

var SupervisorSendSupervisorWorkerHeartbeatArgs_Heartbeat_DEFAULT *SupervisorWorkerHeartbeat

func (p *SupervisorSendSupervisorWorkerHeartbeatArgs) GetHeartbeat() *SupervisorWorkerHeartbeat {
	if !p.IsSetHeartbeat() {
		return SupervisorSendSupervisorWorkerHeartbeatArgs_Heartbeat_DEFAULT
	}
	return p.Heartbeat
}

func (p *SupervisorSendSupervisorWorkerHeartbeatArgs) IsSetHeartbeat() bool {
	return p.Heartbeat != nil
}

func (p *SupervisorSendSupervisorWorkerHeartbeatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SupervisorSendSupervisorWorkerHeartbeatArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Heartbeat = &SupervisorWorkerHeartbeat{}
	if err := p.Heartbeat.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Heartbeat), err)
	}
	return nil
}

func (p *SupervisorSendSupervisorWorkerHeartbeatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sendSupervisorWorkerHeartbeat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SupervisorSendSupervisorWorkerHeartbeatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "heartbeat", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:heartbeat: ", p), err)
	}
	if err := p.Heartbeat.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Heartbeat), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:heartbeat: ", p), err)
	}
	return err
}

func (p *SupervisorSendSupervisorWorkerHeartbeatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SupervisorSendSupervisorWorkerHeartbeatArgs(%+v)", *p)
}

func (p *SupervisorSendSupervisorWorkerHeartbeatArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SupervisorSendSupervisorWorkerHeartbeatArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SupervisorSendSupervisorWorkerHeartbeatArgs)(nil)

// Attributes:
//   - Aze
type SupervisorSendSupervisorWorkerHeartbeatResult struct {
	Aze *AuthorizationException `thrift:"aze,1" db:"aze" json:"aze,omitempty"`
}

func NewSupervisorSendSupervisorWorkerHeartbeatResult() *SupervisorSendSupervisorWorkerHeartbeatResult {
	return &SupervisorSendSupervisorWorkerHeartbeatResult{}
}

var SupervisorSendSupervisorWorkerHeartbeatResult_Aze_DEFAULT *AuthorizationException

func (p *SupervisorSendSupervisorWorkerHeartbeatResult) GetAze() *AuthorizationException {
	if !p.IsSetAze() {
		return SupervisorSendSupervisorWorkerHeartbeatResult_Aze_DEFAULT
	}
	return p.Aze
}

func (p *SupervisorSendSupervisorWorkerHeartbeatResult) IsSetAze() bool {
	return p.Aze != nil
}

func (p *SupervisorSendSupervisorWorkerHeartbeatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SupervisorSendSupervisorWorkerHeartbeatResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Aze = &AuthorizationException{}
	if err := p.Aze.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aze), err)
	}
	return nil
}

func (p *SupervisorSendSupervisorWorkerHeartbeatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sendSupervisorWorkerHeartbeat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SupervisorSendSupervisorWorkerHeartbeatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAze() {
		if err := oprot.WriteFieldBegin(ctx, "aze", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aze: ", p), err)
		}
		if err := p.Aze.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aze), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aze: ", p), err)
		}
	}
	return err
}

func (p *SupervisorSendSupervisorWorkerHeartbeatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SupervisorSendSupervisorWorkerHeartbeatResult(%+v)", *p)
}

func (p *SupervisorSendSupervisorWorkerHeartbeatResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type:  "*storm_modified.SupervisorSendSupervisorWorkerHeartbeatResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*SupervisorSendSupervisorWorkerHeartbeatResult)(nil)
