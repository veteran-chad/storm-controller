# Default values for storm-kubernetes using Bitnami common patterns

## @section Global parameters
global:
  ## @param global.imageRegistry Global Docker image registry
  imageRegistry: ""
  ## @param global.imagePullSecrets Global Docker registry secret names as an array
  imagePullSecrets: []
  ## @param global.storageClass Global StorageClass for Persistent Volume(s)
  storageClass: ""
  ## @param global.security.allowInsecureImages Allow non-Bitnami images (required for Storm)
  security:
    allowInsecureImages: true

## @section Common parameters
## @param nameOverride String to partially override common.names.fullname template
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname template
fullnameOverride: ""
## @param clusterDomain Default Kubernetes cluster domain
clusterDomain: cluster.local
## @param commonAnnotations Annotations to add to all deployed objects
commonAnnotations: {}
## @param commonLabels Labels to add to all deployed objects
commonLabels: {}

## @section Security parameters
## @param serviceAccount.create Enable creation of ServiceAccount for Storm pods
## @param serviceAccount.name The name of the ServiceAccount to use
## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account
## @param serviceAccount.annotations Annotations for service account. Evaluated as a template
## @param serviceAccount.labels Labels for service account. Evaluated as a template
serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: true
  annotations: {}
  labels: {}

## @param rbac.create Create Role and RoleBinding
## @param rbac.rules Custom RBAC rules to set
rbac:
  create: true
  rules: []

## @param podSecurityContext.enabled Enable security context for Storm pods
## @param podSecurityContext.fsGroup Set filesystem group
## @param podSecurityContext.runAsUser Set user ID
## @param podSecurityContext.runAsGroup Set group ID
## @param podSecurityContext.runAsNonRoot Set container must run as non-root user
## @param podSecurityContext.seccompProfile.type Set seccomp profile
podSecurityContext:
  enabled: true
  fsGroup: 1000     # Storm user in official image
  runAsUser: 1000   # Storm user in official image
  runAsGroup: 1000  # Storm group in official image
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

## @param containerSecurityContext.enabled Enable security context for containers
## @param containerSecurityContext.runAsUser Set containers' user ID
## @param containerSecurityContext.runAsNonRoot Set container must run as non-root user
## @param containerSecurityContext.allowPrivilegeEscalation Set privilege escalation
## @param containerSecurityContext.readOnlyRootFilesystem Set read-only root filesystem
## @param containerSecurityContext.capabilities.drop List of capabilities to drop
containerSecurityContext:
  enabled: true
  runAsUser: 1000  # Storm user in official image
  runAsNonRoot: true
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  capabilities:
    drop:
      - ALL

## @param networkPolicy.enabled Enable NetworkPolicy
## @param networkPolicy.allowExternalUI Allow external access to Storm UI
## @param networkPolicy.allowExternalZookeeper Allow external access to Zookeeper
## @param networkPolicy.allowedNamespaces Allow traffic from specific namespaces
## @param networkPolicy.customIngress Custom ingress rules
## @param networkPolicy.customEgress Custom egress rules
networkPolicy:
  enabled: false
  allowExternalUI: true
  allowExternalZookeeper: true
  allowedNamespaces: []
  customIngress: []
  customEgress: []

## @param podSecurityPolicy.create Create PodSecurityPolicy resources
podSecurityPolicy:
  create: false

## @section Wait Container parameters
## Configuration for init containers that wait for dependencies
## @param waitContainer.image.registry Wait container image registry
## @param waitContainer.image.repository Wait container image repository
## @param waitContainer.image.tag Wait container image tag
## @param waitContainer.image.digest Wait container image digest
## @param waitContainer.image.pullPolicy Wait container image pull policy
## @param waitContainer.image.pullSecrets Wait container image pull secrets
waitContainer:
  image:
    registry: docker.io
    repository: busybox
    tag: latest
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []


## @section Storm Cluster parameters
## @param cluster.enabled Enable cluster-wide Storm configuration
cluster:
  enabled: true
  ## @param cluster.extraConfig Extra cluster-wide Storm configuration
  ## eg.:
  ## extraConfig:
  ##   storm.cluster.mode: "distributed"
  ##   storm.local.dir: "storm-local"
  ##   storm.log.dir: "/storm/logs"
  ##   storm.thrift.transport: "org.apache.storm.security.auth.SimpleTransportPlugin"
  ##   storm.messaging.transport: "org.apache.storm.messaging.netty.Context"
  ##   topology.acker.executors: null
  ##   topology.eventlogger.executors: 0
  ##   topology.workers: 1
  ##   topology.message.timeout.secs: 30
  ##   topology.max.spout.pending: null
  ##   topology.worker.childopts: null
  extraConfig: {}


## @section Storm UI parameters
## @param ui.enabled Deploy Storm UI
ui:
  enabled: true
  ## @param ui.replicaCount Number of UI replicas
  replicaCount: 1
  ## @param ui.image.registry UI image registry
  ## @param ui.image.repository UI image repository
  ## @param ui.image.tag UI image tag (immutable tags are recommended)
  ## @param ui.image.digest UI image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param ui.image.pullPolicy UI image pull policy
  ## @param ui.image.pullSecrets UI image pull secrets
  image:
    registry: docker.io
    repository: storm
    tag: 2.8.1
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  ## @param ui.ports.http UI HTTP port
  ports:
    http: 8080
  ## @param ui.service.type UI service type
  ## @param ui.service.ports.http UI service HTTP port
  ## @param ui.service.nodePorts.http Node port for UI HTTP
  ## @param ui.service.clusterIP UI service Cluster IP
  ## @param ui.service.loadBalancerIP UI service Load Balancer IP
  ## @param ui.service.loadBalancerSourceRanges UI service Load Balancer sources
  ## @param ui.service.externalTrafficPolicy UI service external traffic policy
  ## @param ui.service.annotations Additional custom annotations for UI service
  ## @param ui.service.extraPorts Extra ports to expose in UI service
  ## @param ui.service.sessionAffinity Control where client requests go, to the same pod or round-robin
  ## @param ui.service.sessionAffinityConfig Additional settings for the sessionAffinity
  service:
    type: ClusterIP
    ports:
      http: 8080
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
    sessionAffinity: None
    sessionAffinityConfig: {}
  ## @param ui.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if ui.resources is set (ui.resources is recommended for production).
  resourcesPreset: "micro"
  ## @param ui.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  resources: {}
  ## @param ui.logDir Storm log directory
  logDir: /apache-storm/logs
  ## @param ui.extraEnvVars Array with extra environment variables to add to UI nodes
  ## @param ui.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for UI nodes
  ## @param ui.extraEnvVarsSecret Name of existing Secret containing extra env vars for UI nodes
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  ## @param ui.extraVolumes Optionally specify extra list of additional volumes for the UI pod(s)
  ## @param ui.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the UI container(s)
  extraVolumes: []
  extraVolumeMounts: []
  ## @param ui.sidecars Add additional sidecar containers to the UI pod(s)
  sidecars: []
  ## @param ui.initContainers Add additional init containers to the UI pod(s)
  initContainers: []
  ## @param ui.podLabels Extra labels for UI pods
  ## @param ui.podAnnotations Annotations for UI pods
  podLabels: {}
  podAnnotations: {}
  ## @param ui.podAffinityPreset Pod affinity preset. Ignored if `ui.affinity` is set. Allowed values: `soft` or `hard`
  ## @param ui.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `ui.affinity` is set. Allowed values: `soft` or `hard`
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  ## Node affinity preset
  ## @param ui.nodeAffinityPreset.type Node affinity preset type. Ignored if `ui.affinity` is set. Allowed values: `soft` or `hard`
  ## @param ui.nodeAffinityPreset.key Node label key to match. Ignored if `ui.affinity` is set
  ## @param ui.nodeAffinityPreset.values Node label values to match. Ignored if `ui.affinity` is set
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  ## @param ui.affinity Affinity for UI pods assignment
  ## @param ui.nodeSelector Node labels for UI pods assignment
  ## @param ui.tolerations Tolerations for UI pods assignment
  ## @param ui.topologySpreadConstraints Topology Spread Constraints for pod assignment spread across your cluster among failure-domains
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  ## @param ui.priorityClassName UI pods' priorityClassName
  ## @param ui.schedulerName Name of the k8s scheduler (other than default) for UI pods
  ## @param ui.updateStrategy.type UI deployment strategy type
  ## @param ui.updateStrategy.rollingUpdate UI deployment rolling update configuration parameters
  priorityClassName: ""
  schedulerName: ""
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  ## UI pod liveness probe
  ## @param ui.livenessProbe.enabled Enable livenessProbe on UI containers
  ## @param ui.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param ui.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param ui.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param ui.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param ui.livenessProbe.successThreshold Success threshold for livenessProbe
  ## @param ui.livenessProbe.path Path for HTTP livenessProbe
  livenessProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
    path: /
  ## @param ui.readinessProbe.enabled Enable readinessProbe on UI containers
  ## @param ui.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param ui.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param ui.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param ui.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param ui.readinessProbe.successThreshold Success threshold for readinessProbe
  ## @param ui.readinessProbe.path Path for HTTP readinessProbe
  readinessProbe:
    enabled: false
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
    path: /
  ## @param ui.startupProbe.enabled Enable startupProbe on UI containers
  ## @param ui.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param ui.startupProbe.periodSeconds Period seconds for startupProbe
  ## @param ui.startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param ui.startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param ui.startupProbe.successThreshold Success threshold for startupProbe
  ## @param ui.startupProbe.path Path for HTTP startupProbe
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1
    path: /
  ## @param ui.customLivenessProbe Custom livenessProbe that overrides the default one
  ## @param ui.customReadinessProbe Custom readinessProbe that overrides the default one
  ## @param ui.customStartupProbe Custom startupProbe that overrides the default one
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  ## @param ui.lifecycleHooks for the UI container(s) to automate configuration before or after startup
  lifecycleHooks: {}
  ## @param ui.hostAliases UI pods host aliases
  hostAliases: []
  ## @param ui.command Override default container command (useful when using custom images)
  ## @param ui.args Override default container args (useful when using custom images)
  command: []
  args: []
  ## @param ui.extraConfig Extra configuration for Storm UI
  ## eg.:
  ## extraConfig:
  ##   ui.host: 0.0.0.0
  ##   ui.port: 8080
  ##   ui.title: "Storm UI"
  ##   ui.childopts: "-Xmx768m"
  ##   ui.actions.enabled: true
  ##   ui.filter: null
  ##   ui.filter.params: null
  ##   ui.users: null
  ##   ui.header.buffer.bytes: 4096
  ##   ui.http.creds.plugin: org.apache.storm.security.auth.DefaultHttpCredentialsPlugin
  ##   ui.pagination: 20
  ##   ui.disable.http.binding: true
  ##   ui.disable.spout.lag.monitoring: true
  extraConfig: {}

## @section Storm Nimbus parameters
## @param nimbus.enabled Deploy Storm Nimbus
nimbus:
  enabled: true
  ## @param nimbus.replicaCount Number of Nimbus replicas
  replicaCount: 1
  ## @param nimbus.image.registry Nimbus image registry
  ## @param nimbus.image.repository Nimbus image repository
  ## @param nimbus.image.tag Nimbus image tag (immutable tags are recommended)
  ## @param nimbus.image.digest Nimbus image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param nimbus.image.pullPolicy Nimbus image pull policy
  ## @param nimbus.image.pullSecrets Nimbus image pull secrets
  image:
    registry: docker.io
    repository: storm
    tag: 2.8.1
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  ## @param nimbus.ports.thrift Nimbus Thrift port
  ports:
    thrift: 6627
  ## @param nimbus.service.type Nimbus service type
  ## @param nimbus.service.ports.thrift Nimbus service Thrift port
  ## @param nimbus.service.nodePorts.thrift Node port for Nimbus Thrift
  ## @param nimbus.service.clusterIP Nimbus service Cluster IP
  ## @param nimbus.service.loadBalancerIP Nimbus service Load Balancer IP
  ## @param nimbus.service.loadBalancerSourceRanges Nimbus service Load Balancer sources
  ## @param nimbus.service.externalTrafficPolicy Nimbus service external traffic policy
  ## @param nimbus.service.annotations Additional custom annotations for Nimbus service
  ## @param nimbus.service.extraPorts Extra ports to expose in Nimbus service
  ## @param nimbus.service.sessionAffinity Control where client requests go, to the same pod or round-robin
  ## @param nimbus.service.sessionAffinityConfig Additional settings for the sessionAffinity
  service:
    type: ClusterIP
    ports:
      thrift: 6627
    nodePorts:
      thrift: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
    sessionAffinity: None
    sessionAffinityConfig: {}
    ## @param nimbus.service.headless.annotations Annotations for the headless service
    headless:
      annotations: {}
  ## @param nimbus.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if nimbus.resources is set (nimbus.resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  resourcesPreset: "small"
  ## @param nimbus.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  resources: {}
  ## @param nimbus.persistence.enabled Enable persistence using Persistent Volume Claims
  ## @param nimbus.persistence.storageClass Persistent Volume storage class
  ## @param nimbus.persistence.accessModes Persistent Volume access modes
  ## @param nimbus.persistence.size Persistent Volume size
  ## @param nimbus.persistence.mountPath Path to mount the volume at
  ## @param nimbus.persistence.annotations Persistent Volume Claim annotations
  ## @param nimbus.persistence.labels Persistent Volume Claim labels
  ## @param nimbus.persistence.selector Selector to match an existing Persistent Volume
  persistence:
    enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    mountPath: /storm/data
    annotations: {}
    labels: {}
    selector: {}
  ## @param nimbus.logDir Storm log directory
  logDir: /apache-storm/logs
  ## @param nimbus.extraEnvVars Array with extra environment variables to add to Nimbus nodes
  ## @param nimbus.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for Nimbus nodes
  ## @param nimbus.extraEnvVarsSecret Name of existing Secret containing extra env vars for Nimbus nodes
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  ## @param nimbus.extraVolumes Optionally specify extra list of additional volumes for the Nimbus pod(s)
  ## @param nimbus.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the Nimbus container(s)
  extraVolumes: []
  extraVolumeMounts: []
  ## @param nimbus.sidecars Add additional sidecar containers to the Nimbus pod(s)
  sidecars: []
  ## @param nimbus.initContainers Add additional init containers to the Nimbus pod(s)
  initContainers: []
  ## @param nimbus.podLabels Extra labels for Nimbus pods
  ## @param nimbus.podAnnotations Annotations for Nimbus pods
  podLabels: {}
  podAnnotations: {}
  ## @param nimbus.podAffinityPreset Pod affinity preset. Ignored if `nimbus.affinity` is set. Allowed values: `soft` or `hard`
  ## @param nimbus.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `nimbus.affinity` is set. Allowed values: `soft` or `hard`
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  ## Node affinity preset
  ## @param nimbus.nodeAffinityPreset.type Node affinity preset type. Ignored if `nimbus.affinity` is set. Allowed values: `soft` or `hard`
  ## @param nimbus.nodeAffinityPreset.key Node label key to match. Ignored if `nimbus.affinity` is set
  ## @param nimbus.nodeAffinityPreset.values Node label values to match. Ignored if `nimbus.affinity` is set
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  ## @param nimbus.affinity Affinity for Nimbus pods assignment
  ## @param nimbus.nodeSelector Node labels for Nimbus pods assignment
  ## @param nimbus.tolerations Tolerations for Nimbus pods assignment
  ## @param nimbus.topologySpreadConstraints Topology Spread Constraints for pod assignment spread across your cluster among failure-domains
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  ## @param nimbus.priorityClassName Nimbus pods' priorityClassName
  ## @param nimbus.schedulerName Name of the k8s scheduler (other than default) for Nimbus pods
  ## @param nimbus.updateStrategy.type Nimbus statefulset strategy type
  ## @param nimbus.updateStrategy.rollingUpdate Nimbus statefulset rolling update configuration parameters
  priorityClassName: ""
  schedulerName: ""
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  ## Nimbus pod liveness probe
  ## @param nimbus.livenessProbe.enabled Enable livenessProbe on Nimbus containers
  ## @param nimbus.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param nimbus.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param nimbus.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param nimbus.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param nimbus.livenessProbe.successThreshold Success threshold for livenessProbe
  livenessProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  ## @param nimbus.readinessProbe.enabled Enable readinessProbe on Nimbus containers
  ## @param nimbus.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param nimbus.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param nimbus.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param nimbus.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param nimbus.readinessProbe.successThreshold Success threshold for readinessProbe
  readinessProbe:
    enabled: false
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  ## @param nimbus.startupProbe.enabled Enable startupProbe on Nimbus containers
  ## @param nimbus.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param nimbus.startupProbe.periodSeconds Period seconds for startupProbe
  ## @param nimbus.startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param nimbus.startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param nimbus.startupProbe.successThreshold Success threshold for startupProbe
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1
  ## @param nimbus.customLivenessProbe Custom livenessProbe that overrides the default one
  ## @param nimbus.customReadinessProbe Custom readinessProbe that overrides the default one
  ## @param nimbus.customStartupProbe Custom startupProbe that overrides the default one
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  ## @param nimbus.lifecycleHooks for the Nimbus container(s) to automate configuration before or after startup
  lifecycleHooks: {}
  ## @param nimbus.hostAliases Nimbus pods host aliases
  hostAliases: []
  ## @param nimbus.command Override default container command (useful when using custom images)
  ## @param nimbus.args Override default container args (useful when using custom images)
  command: []
  args: []
  ## @param nimbus.extraConfig Extra configuration for Storm Nimbus
  ## eg.:
  ## extraConfig:
  ##   nimbus.seeds: ["localhost"]
  ##   nimbus.thrift.port: 6627
  ##   nimbus.thrift.threads: 64
  ##   nimbus.thrift.max_buffer_size: 1048576
  ##   nimbus.childopts: "-Xmx1024m"
  ##   nimbus.task.timeout.secs: 30
  ##   nimbus.supervisor.timeout.secs: 60
  ##   nimbus.monitor.freq.secs: 10
  ##   nimbus.cleanup.inbox.freq.secs: 600
  ##   nimbus.inbox.jar.expiration.secs: 3600
  ##   nimbus.code.sync.freq.secs: 120
  ##   nimbus.task.launch.secs: 120
  ##   nimbus.file.copy.expiration.secs: 600
  ##   nimbus.topology.validator: "org.apache.storm.nimbus.DefaultTopologyValidator"
  extraConfig: {}

## @section Storm Supervisor parameters
## @param supervisor.enabled Deploy Storm Supervisor
supervisor:
  enabled: true
  ## @param supervisor.replicaCount Number of Supervisor replicas
  replicaCount: 1
  ## @param supervisor.slotsPerSupervisor Number of worker slots per supervisor
  slotsPerSupervisor: 4
  
  ## Memory configuration for supervisors
  ## @param supervisor.memoryConfig.mode Memory configuration mode: "auto" or "manual"
  ## @param supervisor.memoryConfig.memoryPerWorker Memory allocated per worker slot (e.g., "1Gi", "512Mi")
  ## @param supervisor.memoryConfig.memoryOverheadPercent JVM overhead percentage for container sizing
  ## @param supervisor.memoryConfig.cpuPerWorker CPU cores allocated per worker slot
  memoryConfig:
    ## Mode can be "auto" or "manual"
    ## - auto: Automatically calculate container resources based on worker requirements
    ## - manual: Use resources section directly
    mode: "auto"
    ## Memory allocated per worker (includes heap + off-heap)
    ## This is the primary tuning parameter
    memoryPerWorker: "1Gi"
    ## Overhead percentage for JVM non-heap memory (metaspace, direct memory, etc.)
    ## Container memory = total worker memory * (1 + overheadPercent/100)
    memoryOverheadPercent: 25
    ## CPU per worker (used for capacity calculation)
    cpuPerWorker: "1"
  ## @param supervisor.image.registry Supervisor image registry
  ## @param supervisor.image.repository Supervisor image repository
  ## @param supervisor.image.tag Supervisor image tag (immutable tags are recommended)
  ## @param supervisor.image.digest Supervisor image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param supervisor.image.pullPolicy Supervisor image pull policy
  ## @param supervisor.image.pullSecrets Supervisor image pull secrets
  image:
    registry: docker.io
    repository: storm
    tag: 2.8.1
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  ## @param supervisor.ports.http Supervisor HTTP port
  ports:
    http: 8000
  ## @param supervisor.service.type Supervisor service type
  ## @param supervisor.service.ports.http Supervisor service HTTP port
  ## @param supervisor.service.nodePorts.http Node port for Supervisor HTTP
  ## @param supervisor.service.clusterIP Supervisor service Cluster IP
  ## @param supervisor.service.loadBalancerIP Supervisor service Load Balancer IP
  ## @param supervisor.service.loadBalancerSourceRanges Supervisor service Load Balancer sources
  ## @param supervisor.service.externalTrafficPolicy Supervisor service external traffic policy
  ## @param supervisor.service.annotations Additional custom annotations for Supervisor service
  ## @param supervisor.service.extraPorts Extra ports to expose in Supervisor service
  ## @param supervisor.service.sessionAffinity Control where client requests go, to the same pod or round-robin
  ## @param supervisor.service.sessionAffinityConfig Additional settings for the sessionAffinity
  service:
    type: ClusterIP
    ports:
      http: 8000
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
    sessionAffinity: None
    sessionAffinityConfig: {}
  ## @param supervisor.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if supervisor.resources is set (supervisor.resources is recommended for production).
  resourcesPreset: "small"
  ## @param supervisor.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
  resources: {}
  ## @param supervisor.logDir Storm log directory
  logDir: /apache-storm/logs
  ## @param supervisor.dataDir Storm data directory
  dataDir: /storm/data
  ## @param supervisor.extraEnvVars Array with extra environment variables to add to Supervisor nodes
  ## @param supervisor.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for Supervisor nodes
  ## @param supervisor.extraEnvVarsSecret Name of existing Secret containing extra env vars for Supervisor nodes
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  ## @param supervisor.extraVolumes Optionally specify extra list of additional volumes for the Supervisor pod(s)
  ## @param supervisor.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the Supervisor container(s)
  extraVolumes: []
  extraVolumeMounts: []
  ## @param supervisor.sidecars Add additional sidecar containers to the Supervisor pod(s)
  sidecars: []
  ## @param supervisor.initContainers Add additional init containers to the Supervisor pod(s)
  initContainers: []
  ## @param supervisor.podLabels Extra labels for Supervisor pods
  ## @param supervisor.podAnnotations Annotations for Supervisor pods
  podLabels: {}
  podAnnotations: {}
  ## @param supervisor.podAffinityPreset Pod affinity preset. Ignored if `supervisor.affinity` is set. Allowed values: `soft` or `hard`
  ## @param supervisor.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `supervisor.affinity` is set. Allowed values: `soft` or `hard`
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  ## Node affinity preset
  ## @param supervisor.nodeAffinityPreset.type Node affinity preset type. Ignored if `supervisor.affinity` is set. Allowed values: `soft` or `hard`
  ## @param supervisor.nodeAffinityPreset.key Node label key to match. Ignored if `supervisor.affinity` is set
  ## @param supervisor.nodeAffinityPreset.values Node label values to match. Ignored if `supervisor.affinity` is set
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  ## @param supervisor.affinity Affinity for Supervisor pods assignment
  ## @param supervisor.nodeSelector Node labels for Supervisor pods assignment
  ## @param supervisor.tolerations Tolerations for Supervisor pods assignment
  ## @param supervisor.topologySpreadConstraints Topology Spread Constraints for pod assignment spread across your cluster among failure-domains
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  ## @param supervisor.priorityClassName Supervisor pods' priorityClassName
  ## @param supervisor.schedulerName Name of the k8s scheduler (other than default) for Supervisor pods
  ## @param supervisor.updateStrategy.type Supervisor deployment strategy type
  ## @param supervisor.updateStrategy.rollingUpdate Supervisor deployment rolling update configuration parameters
  priorityClassName: ""
  schedulerName: ""
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  ## Supervisor pod liveness probe
  ## @param supervisor.livenessProbe.enabled Enable livenessProbe on Supervisor containers
  ## @param supervisor.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param supervisor.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param supervisor.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param supervisor.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param supervisor.livenessProbe.successThreshold Success threshold for livenessProbe
  livenessProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  ## @param supervisor.readinessProbe.enabled Enable readinessProbe on Supervisor containers
  ## @param supervisor.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param supervisor.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param supervisor.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param supervisor.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param supervisor.readinessProbe.successThreshold Success threshold for readinessProbe
  readinessProbe:
    enabled: false
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 10
    failureThreshold: 5
    successThreshold: 1
  ## @param supervisor.startupProbe.enabled Enable startupProbe on Supervisor containers
  ## @param supervisor.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  ## @param supervisor.startupProbe.periodSeconds Period seconds for startupProbe
  ## @param supervisor.startupProbe.timeoutSeconds Timeout seconds for startupProbe
  ## @param supervisor.startupProbe.failureThreshold Failure threshold for startupProbe
  ## @param supervisor.startupProbe.successThreshold Success threshold for startupProbe
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1
  ## @param supervisor.customLivenessProbe Custom livenessProbe that overrides the default one
  ## @param supervisor.customReadinessProbe Custom readinessProbe that overrides the default one
  ## @param supervisor.customStartupProbe Custom startupProbe that overrides the default one
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  ## @param supervisor.lifecycleHooks for the Supervisor container(s) to automate configuration before or after startup
  lifecycleHooks: {}
  ## @param supervisor.hostAliases Supervisor pods host aliases
  hostAliases: []
  ## @param supervisor.command Override default container command (useful when using custom images)
  ## @param supervisor.args Override default container args (useful when using custom images)
  command: []
  args: []
  ## @param supervisor.extraConfig Extra configuration for Storm Supervisor
  ## eg.:
  ## extraConfig:
  ##   supervisor.slots.ports: [6700, 6701, 6702, 6703]
  ##   supervisor.childopts: "-Xmx256m"
  ##   supervisor.run.worker.as.user: false
  ##   supervisor.worker.start.timeout.secs: 120
  ##   supervisor.worker.timeout.secs: 30
  ##   supervisor.worker.shutdown.sleep.secs: 3
  ##   supervisor.monitor.frequency.secs: 3
  ##   supervisor.heartbeat.frequency.secs: 5
  ##   supervisor.memory.capacity.mb: 4096.0
  ##   supervisor.cpu.capacity: 400.0
  ##   supervisor.thrift.port: 6628
  ##   supervisor.blobstore.class: "org.apache.storm.blobstore.NimbusBlobStore"
  ##   supervisor.blobstore.download.thread.count: 5
  extraConfig: {}

## @section Zookeeper parameters
## @param zookeeper.enabled Deploy Zookeeper as a dependency
zookeeper:
  enabled: true
  ## External Zookeeper configuration
  ## @param zookeeper.external.servers List of external Zookeeper servers (when enabled=false)
  external:
    # Example:
    # servers:
    #   - "zk1.example.com"
    #   - "zk2.example.com"
    #   - "zk3.example.com"
    servers: []
  ## @param zookeeper.config Configuration for external Zookeeper, defaults shown below
  ## eg.:
  ## config:
  ##  storm.zookeeper.port: 2181
  ##  storm.zookeeper.root: /storm
  ##  storm.zookeeper.session.timeout: 20000
  ##  storm.zookeeper.connection.timeout: 15000
  ##  storm.zookeeper.retry.times: 5
  ##  storm.zookeeper.retry.interval: 1000
  ##  storm.zookeeper.retry.intervalceiling.millis: 30000
  ##  storm.zookeeper.auth.user: null
  ##  storm.zookeeper.auth.password: null
  ##  storm.zookeeper.ssl.enable: false
  ##  storm.zookeeper.ssl.hostnameVerification: false
  extraConfig: {}
    


## @section Storm Cluster Configuration (Deprecated)
## @deprecated Use cluster.extraConfig instead. This section will be removed in a future release.
## Complete Storm cluster configuration with all available options and defaults from defaults.yaml
# clusterConfig:
#   ## Core Storm Configuration
#   java.library.path: "/usr/local/lib:/opt/local/lib:/usr/lib:/usr/lib64"
#   storm.local.dir: "storm-local"
#   storm.log4j2.conf.dir: "log4j2"
#   storm.log.dir: "/storm/logs"
#   
#   ## Cluster Mode Configuration
#   storm.cluster.mode: "distributed"
#   storm.local.mode.zmq: false
#   storm.cluster.state.store: "org.apache.storm.cluster.ZKStateStorageFactory"
#   
#   ## Security and Transport Configuration
#   storm.thrift.transport: "org.apache.storm.security.auth.SimpleTransportPlugin"
#   storm.thrift.socket.timeout.ms: 600000
#   storm.thrift.tls.socket.timeout.ms: 600000
#   storm.principal.tolocal: "org.apache.storm.security.auth.DefaultPrincipalToLocal"
#   storm.group.mapping.service: "org.apache.storm.security.auth.ShellBasedGroupsMapping"
#   storm.group.mapping.service.params: null
#   storm.group.mapping.service.cache.duration.secs: 120
#   storm.auth.simple-white-list.users: []
#   
#   ## Messaging Configuration
#   storm.messaging.transport: "org.apache.storm.messaging.netty.Context"
#   storm.messaging.netty.server_worker_threads: 1
#   storm.messaging.netty.client_worker_threads: 1
#   storm.messaging.netty.buffer_size: 5242880
#   storm.messaging.netty.flush_timeout_ms: 600000
#   storm.messaging.netty.buffer.high.watermark: 16777216
#   storm.messaging.netty.buffer.low.watermark: 8388608
#   storm.messaging.netty.max_wait_ms: 1000
#   storm.messaging.netty.min_wait_ms: 100
#   storm.messaging.netty.transfer.batch.size: 262144
#   storm.messaging.netty.socket.backlog: 500
#   storm.messaging.netty.authentication: false
#   
#   ## Worker Configuration
#   worker.heap.memory.mb: 768
#   worker.childopts: "-Xmx%HEAP-MEM%m -XX:+IgnoreUnrecognizedVMOptions -XX:+PrintGCDetails -Xloggc:artifacts/gc.log -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=1M -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=artifacts/heapdump"
#   worker.gc.childopts: ""
#   worker.profiler.enabled: false
#   worker.profiler.childopts: "-XX:+UnlockCommercialFeatures -XX:+FlightRecorder"
#   worker.profiler.command: "flight.bash"
#   worker.heartbeat.frequency.secs: 1
#   worker.log.level.reset.poll.secs: 30
#   worker.max.timeout.secs: 600
#   worker.min.cpu.pcore.percent: 0.0
#   
#   ## LogViewer Configuration
#   logviewer.port: 8000
#   logviewer.childopts: "-Xmx128m"
#   logviewer.cleanup.age.mins: 10080
#   logviewer.appender.name: "A1"
#   logviewer.max.sum.worker.logs.size.mb: 4096
#   logviewer.max.per.worker.logs.size.mb: 2048
#   logviewer.disable.http.binding: true
#   logviewer.filter: null
#   logviewer.filter.params: null
#   logs.users: null
#   
#   ## DRPC Configuration
#   drpc.port: 3772
#   drpc.worker.threads: 64
#   drpc.max_buffer_size: 1048576
#   drpc.queue.size: 128
#   drpc.invocations.port: 3773
#   drpc.invocations.threads: 64
#   drpc.request.timeout.secs: 600
#   drpc.childopts: "-Xmx768m"
#   drpc.http.port: 3774
#   drpc.https.port: -1
#   drpc.https.keystore.password: ""
#   drpc.https.keystore.type: "JKS"
#   drpc.http.creds.plugin: org.apache.storm.security.auth.DefaultHttpCredentialsPlugin
#   drpc.authorizer.acl.filename: "drpc-auth-acl.yaml"
#   drpc.authorizer.acl.strict: false
#   drpc.disable.http.binding: true
#   
#   ## Transactional Configuration
#   transactional.zookeeper.root: "/transactional"
#   transactional.zookeeper.servers: null
#   transactional.zookeeper.port: null
#   
#   ## Blobstore Configuration
#   nimbus.blobstore.class: "org.apache.storm.blobstore.LocalFsBlobStore"
#   nimbus.blobstore.expiration.secs: 600
#   storm.blobstore.inputstream.buffer.size.bytes: 65536
#   storm.blobstore.dependency.jar.upload.chunk.size.bytes: 1048576
#   client.blobstore.class: "org.apache.storm.blobstore.NimbusBlobStore"
#   storm.blobstore.replication.factor: 3
#   storm.blobstore.acl.validation.enabled: false
#   
#   ## Topology Default Configuration
#   topology.enable.message.timeouts: true
#   topology.debug: false
#   topology.workers: 1
#   topology.acker.executors: null
#   topology.ras.acker.executors.per.worker: 1
#   topology.eventlogger.executors: 0
#   topology.tasks: null
#   topology.message.timeout.secs: 30
#   topology.multilang.serializer: "org.apache.storm.multilang.JsonSerializer"
#   topology.shellbolt.max.pending: 100
#   topology.skip.missing.kryo.registrations: false
#   topology.max.task.parallelism: null
#   topology.max.spout.pending: null
#   topology.state.synchronization.timeout.secs: 60
#   topology.stats.sample.rate: 0.05
#   topology.builtin.metrics.bucket.size.secs: 60
#   topology.fall.back.on.java.serialization: false
#   topology.worker.childopts: null
#   topology.worker.logwriter.childopts: "-Xmx64m"
#   topology.tick.tuple.freq.secs: null
#   topology.worker.shared.thread.pool.size: 4
#   topology.worker.receiver.thread.count: 1
#   topology.worker.nimbus.thrift.client.use.tls: false
#   topology.transfer.buffer.size: 1000
#   topology.transfer.batch.size: 1
#   topology.executor.receive.buffer.size: 32768
#   topology.producer.batch.size: 1
#   topology.batch.flush.interval.millis: 1
#   topology.spout.recvq.skips: 3
#   topology.disable.loadaware.messaging: false
#   topology.state.checkpoint.interval.ms: 1000
#   topology.localityaware.higher.bound: 0.8
#   topology.localityaware.lower.bound: 0.2
#   topology.serialized.message.size.metrics: false
#   topology.error.throttle.interval.secs: 10
#   topology.max.error.report.per.interval: 5
#   topology.kryo.factory: "org.apache.storm.serialization.DefaultKryoFactory"
#   topology.tuple.serializer: "org.apache.storm.serialization.types.ListDelegateSerializer"
#   topology.trident.batch.emit.interval.millis: 500
#   topology.testing.always.try.serialize: false
#   topology.classpath: null
#   topology.environment: null
#   topology.classpath.beginning.enabled: false
#   
#   ## Topology Wait Strategies
#   topology.spout.wait.strategy: "org.apache.storm.policy.WaitStrategyProgressive"
#   topology.spout.wait.park.microsec: 100
#   topology.spout.wait.progressive.level1.count: 0
#   topology.spout.wait.progressive.level2.count: 0
#   topology.spout.wait.progressive.level3.sleep.millis: 1
#   topology.bolt.wait.strategy: "org.apache.storm.policy.WaitStrategyProgressive"
#   topology.bolt.wait.park.microsec: 100
#   topology.bolt.wait.progressive.level1.count: 1
#   topology.bolt.wait.progressive.level2.count: 1000
#   topology.bolt.wait.progressive.level3.sleep.millis: 1
#   topology.backpressure.wait.strategy: "org.apache.storm.policy.WaitStrategyProgressive"
#   topology.backpressure.wait.park.microsec: 100
#   topology.backpressure.wait.progressive.level1.count: 1
#   topology.backpressure.wait.progressive.level2.count: 1000
#   topology.backpressure.wait.progressive.level3.sleep.millis: 1
#   topology.backpressure.check.millis: 50
#   topology.executor.overflow.limit: 0
#   
#   ## Resource Aware Scheduler Configuration
#   topology.priority: 29
#   topology.component.resources.onheap.memory.mb: 128.0
#   topology.component.resources.offheap.memory.mb: 0.0
#   topology.component.cpu.pcore.percent: 10.0
#   topology.worker.max.heap.size.mb: 768.0
#   topology.scheduler.strategy: "org.apache.storm.scheduler.resource.strategies.scheduling.DefaultResourceAwareStrategy"
#   resource.aware.scheduler.priority.strategy: "org.apache.storm.scheduler.resource.strategies.priority.DefaultSchedulingPriorityStrategy"
#   topology.ras.constraint.max.state.search: 10000
#   resource.aware.scheduler.constraint.max.state.search: 100000
#   topology.ras.one.executor.per.worker: false
#   topology.ras.one.component.per.worker: false
#   topology.min.replication.count: 1
#   topology.max.replication.wait.time.sec: 60
#   
#   ## Scheduler Configuration
#   scheduler.display.resource: false
#   blacklist.scheduler.tolerance.time.secs: 300
#   blacklist.scheduler.tolerance.count: 3
#   blacklist.scheduler.resume.time.secs: 1800
#   blacklist.scheduler.reporter: "org.apache.storm.scheduler.blacklist.reporters.LogReporter"
#   blacklist.scheduler.strategy: "org.apache.storm.scheduler.blacklist.strategies.DefaultBlacklistStrategy"
#   blacklist.scheduler.assume.supervisor.bad.based.on.bad.slot: true
#   
#   ## Miscellaneous Configuration
#   storm.nimbus.retry.times: 5
#   storm.nimbus.retry.interval.millis: 2000
#   storm.nimbus.retry.intervalceiling.millis: 60000
#   storm.meta.serialization.delegate: "org.apache.storm.serialization.GzipThriftSerializationDelegate"
#   storm.codedistributor.class: "org.apache.storm.codedistributor.LocalFileSystemCodeDistributor"
#   storm.workers.artifacts.dir: "workers-artifacts"
#   storm.health.check.dir: "healthchecks"
#   storm.health.check.timeout.ms: 5000
#   storm.disable.symlinks: false
#   storm.network.topography.plugin: org.apache.storm.networktopography.DefaultRackDNSToSwitchMapping
#   dev.zookeeper.path: "/tmp/dev-storm-zookeeper"
#   
#   ## Pacemaker Configuration
#   pacemaker.servers: []
#   pacemaker.port: 6699
#   pacemaker.base.threads: 10
#   pacemaker.max.threads: 50
#   pacemaker.client.max.threads: 2
#   pacemaker.thread.timeout: 10
#   pacemaker.childopts: "-Xmx1024m"
#   pacemaker.auth.method: "NONE"
#   pacemaker.kerberos.users: []
#   pacemaker.thrift.message.size.max: 10485760
#   
#   ## Metrics Configuration
#   storm.daemon.metrics.reporter.plugins:
#     - "org.apache.storm.daemon.metrics.reporters.JmxPreparableReporter"
#   storm.daemon.metrics.reporter.interval.secs: 10
#   storm.metricstore.class: "org.apache.storm.metricstore.rocksdb.RocksDbStore"
#   storm.metricprocessor.class: "org.apache.storm.metricstore.NimbusMetricProcessor"
#   storm.metricstore.rocksdb.location: "storm_rocks"
#   storm.metricstore.rocksdb.create_if_missing: true
#   storm.metricstore.rocksdb.metadata_string_cache_capacity: 4000
#   storm.metricstore.rocksdb.retention_hours: 240
#   storm.cluster.metrics.consumer.publish.interval.secs: 60
#   executor.metrics.frequency.secs: 60
#   task.heartbeat.frequency.secs: 3
#   task.refresh.poll.secs: 10
#   task.credentials.poll.secs: 30
#   
#   ## Resource Isolation (CGroup) Configuration
#   storm.resource.isolation.plugin: "org.apache.storm.container.cgroup.CgroupManager"
#   storm.resource.isolation.plugin.enable: false
#   storm.cgroup.memory.enforcement.enable: false
#   storm.cgroup.inherit.cpuset.configs: false
#   storm.cgroup.hierarchy.dir: "/cgroup/storm_resources"
#   storm.cgroup.resources:
#     - "cpu"
#     - "memory"
#   storm.cgroup.hierarchy.name: "storm"
#   storm.supervisor.cgroup.rootdir: "storm"
#   storm.cgroup.cgexec.cmd: "/bin/cgexec"
#   storm.cgroup.memory.limit.tolerance.margin.mb: 0.0
#   storm.supervisor.memory.limit.tolerance.margin.mb: 128.0
#   storm.supervisor.hard.memory.limit.multiplier: 2.0
#   storm.supervisor.hard.memory.limit.overage.mb: 2024
#   storm.supervisor.low.memory.threshold.mb: 1024
#   storm.supervisor.medium.memory.threshold.mb: 1536
#   storm.supervisor.medium.memory.grace.period.ms: 30000
#   storm.oci.cgroup.root: "/sys/fs/cgroup"
#   storm.oci.cgroup.parent: "/storm"
#   storm.oci.nscd.dir: "/var/run/nscd"
#   
#   ## Worker Metrics
#   worker.metrics:
#     "CGroupMemory": "org.apache.storm.metrics2.cgroup.CGroupMemoryUsage"
#     "CGroupMemoryLimit": "org.apache.storm.metrics2.cgroup.CGroupMemoryLimit"
#     "CGroupCpu": "org.apache.storm.metrics2.cgroup.CGroupCpu"
#     "CGroupCpuGuarantee": "org.apache.storm.metrics2.cgroup.CGroupCpuGuarantee"
#     "CGroupCpuGuaranteeByCfsQuota": "org.apache.storm.metrics2.cgroup.CGroupCpuGuaranteeByCfsQuota"
#     "CGroupCpuStat": "org.apache.storm.metrics2.cgroup.CGroupCpuStat"
#   
#   ## Statistics Configuration
#   num.stat.buckets: 20

## @section Test configuration
## @param tests.enabled Enable Helm tests
tests:
  enabled: true