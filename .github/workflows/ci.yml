name: CI

on:
  push:
    branches: [ main, feature/storm-controller ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io

jobs:
  lint-helm-chart:
    name: Lint Storm Kubernetes Helm Chart
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Add Helm repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Build Helm dependencies
        run: |
          helm dependency update charts/storm-kubernetes

      - name: Lint chart
        run: |
          helm lint charts/storm-kubernetes --strict
          
      - name: Validate values schema
        run: |
          helm lint charts/storm-kubernetes --strict --values charts/storm-kubernetes/values-production.yaml
          
  test-helm-chart:
    name: Test Storm Kubernetes Chart
    runs-on: ubuntu-latest
    needs: [lint-helm-chart]
    steps:
      - uses: actions/checkout@v4

      - uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Add Helm repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Build dependencies
        run: |
          helm dependency update charts/storm-kubernetes
          
      - name: Test default installation
        run: |
          helm template test-release charts/storm-kubernetes > /tmp/default.yaml
          echo "✓ Default installation template generated successfully"
          
      - name: Test with security features
        run: |
          helm template test-release charts/storm-kubernetes \
            --values charts/storm-kubernetes/values-production-security.yaml > /tmp/security.yaml
          echo "✓ Security features template generated successfully"
          
      - name: Test with monitoring
        run: |
          helm template test-release charts/storm-kubernetes \
            --values charts/storm-kubernetes/values-production-monitoring.yaml > /tmp/monitoring.yaml || \
          (echo "Failed to generate monitoring template" && exit 1)
          echo "✓ Monitoring features template generated successfully"
          
      - name: Test with HPA
        run: |
          helm template test-release charts/storm-kubernetes \
            --values charts/storm-kubernetes/values-production-hpa.yaml > /tmp/hpa.yaml
          echo "✓ HPA features template generated successfully"
          
      - name: Test with authentication
        run: |
          helm template test-release charts/storm-kubernetes \
            --values charts/storm-kubernetes/values-production-auth.yaml > /tmp/auth.yaml
          echo "✓ Authentication features template generated successfully"
          
      - name: Test full production setup
        run: |
          helm template test-release charts/storm-kubernetes \
            --values charts/storm-kubernetes/values-production.yaml > /tmp/production.yaml
          echo "✓ Full production template generated successfully"
          
      - name: Validate generated manifests
        run: |
          # Check that key resources are generated
          echo "Checking for required resources..."
          grep -q "kind: StatefulSet" /tmp/production.yaml && echo "✓ StatefulSet found" || echo "✗ StatefulSet missing"
          grep -q "kind: Deployment" /tmp/production.yaml && echo "✓ Deployment found" || echo "✗ Deployment missing"
          grep -q "kind: Service" /tmp/production.yaml && echo "✓ Service found" || echo "✗ Service missing"
          grep -q "kind: ConfigMap" /tmp/production.yaml && echo "✓ ConfigMap found" || echo "✗ ConfigMap missing"
          grep -q "kind: ServiceAccount" /tmp/production.yaml && echo "✓ ServiceAccount found" || echo "✗ ServiceAccount missing"
          grep -q "kind: NetworkPolicy" /tmp/production.yaml && echo "✓ NetworkPolicy found" || echo "✗ NetworkPolicy missing"
          grep -q "kind: PodDisruptionBudget" /tmp/production.yaml && echo "✓ PodDisruptionBudget found" || echo "✗ PodDisruptionBudget missing"
          grep -q "kind: ServiceMonitor" /tmp/monitoring.yaml && echo "✓ ServiceMonitor found" || true
          grep -q "kind: HorizontalPodAutoscaler" /tmp/hpa.yaml && echo "✓ HPA found" || echo "✗ HPA missing"
          grep -q "storm-auth" /tmp/auth.yaml && echo "✓ Auth ConfigMap found" || echo "✗ Auth ConfigMap missing"

  package-helm-chart:
    name: Package Storm Kubernetes Chart
    runs-on: ubuntu-latest
    needs: [lint-helm-chart, test-helm-chart]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Add Helm repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=0.0.0-$(git rev-parse --short HEAD)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub Registry for Helm
        run: |
          echo ${{ secrets.DOCKERHUB_TOKEN }} | helm registry login registry-1.docker.io --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build dependencies
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs, remove lock files and update dependencies
            rm -f charts/storm-kubernetes/Chart.lock
          fi
          
          # Always update dependencies to ensure consistency
          helm dependency update charts/storm-kubernetes
          
      - name: Update chart versions
        run: |
          VERSION=${{ steps.version.outputs.version }}
          sed -i "s/version: .*/version: ${VERSION}/" charts/storm-kubernetes/Chart.yaml
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            sed -i "s/appVersion: .*/appVersion: ${GITHUB_REF#refs/tags/}/" charts/storm-kubernetes/Chart.yaml
          fi

      - name: Package charts
        run: |
          mkdir -p .cr-release-packages
          helm package charts/storm-kubernetes --destination .cr-release-packages

      - name: Upload chart artifacts
        uses: actions/upload-artifact@v4
        with:
          name: helm-charts
          path: .cr-release-packages/*.tgz

      - name: Log in to Docker Hub Registry
        if: github.event_name != 'pull_request'
        run: |
          echo ${{ secrets.DOCKERHUB_TOKEN }} | helm registry login registry-1.docker.io --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Push to OCI registry
        if: github.event_name != 'pull_request'
        run: |
          for chart in .cr-release-packages/*.tgz; do
            helm push $chart oci://registry-1.docker.io/veteranchad
          done

