name: Release
on:
  push:
    branches: [main]
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-matrix:
    name: Build Multi-Storm Version Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        storm-version: ["2.6.4", "2.8.1"]
    permissions:
      contents: read
      packages: write
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For git describe
          
      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=main-$(git rev-parse --short HEAD)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "storm_tag=$VERSION-storm${{ matrix.storm-version }}" >> $GITHUB_OUTPUT
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      # Update Dockerfile to accept STORM_VERSION build arg
      - name: Update Dockerfile for Storm version
        working-directory: src
        run: |
          # Add ARG STORM_VERSION at the beginning
          sed -i '1i ARG STORM_VERSION=2.8.1' Dockerfile
          # Update FROM storm:latest to use the build arg
          sed -i 's/FROM storm:latest/FROM storm:${STORM_VERSION}/' Dockerfile
          
      - name: Build and push controller image
        uses: docker/build-push-action@v5
        with:
          context: src
          push: true
          build-args: |
            STORM_VERSION=${{ matrix.storm-version }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.storm_tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:storm${{ matrix.storm-version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push JAR container image
        uses: docker/build-push-action@v5
        with:
          context: containers/storm-controller-topology-jar
          push: true
          build-args: |
            STORM_VERSION=${{ matrix.storm-version }}
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}-jar:${{ steps.version.outputs.storm_tag }}
            ${{ env.REGISTRY }}/${{ github.repository }}-jar:storm${{ matrix.storm-version }}
            
  build-default:
    name: Build Default Storm Version
    runs-on: ubuntu-latest
    needs: build-matrix
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Determine version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update Dockerfile for Storm version
        working-directory: src
        run: |
          sed -i '1i ARG STORM_VERSION=2.8.1' Dockerfile
          sed -i 's/FROM storm:latest/FROM storm:${STORM_VERSION}/' Dockerfile
          
      - name: Build and push controller image (default Storm)
        uses: docker/build-push-action@v5
        with:
          context: src
          push: true
          build-args: |
            STORM_VERSION=2.8.1
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
  release-helm-chart:
    name: Release Helm Chart
    runs-on: ubuntu-latest
    needs: [build-matrix]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
      
    steps:
      - uses: actions/checkout@v4
      
      - uses: azure/setup-helm@v3
        with:
          version: 'latest'
          
      - name: Add Helm repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
          
      - name: Build Helm dependencies
        run: |
          helm dependency build charts/storm-kubernetes
          
      - name: Package Helm chart
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          # Update Chart.yaml with version
          sed -i "s/version: .*/version: ${VERSION}/" charts/storm-kubernetes/Chart.yaml
          sed -i "s/appVersion: .*/appVersion: ${VERSION}/" charts/storm-kubernetes/Chart.yaml
          
          helm package charts/storm-kubernetes
          
      - name: Log in to Container Registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin
          
      - name: Push to OCI registry
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          helm push storm-kubernetes-${VERSION}.tgz oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts
          
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-matrix, build-default, release-helm-chart]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate release notes
        id: notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          cat > release-notes.md << EOF
          ## Storm Controller ${VERSION}
          
          ### Container Images
          
          Controller images with Storm versions:
          - \`ghcr.io/veteran-chad/storm-controller:${VERSION}\` (Storm 2.8.1 - default)
          - \`ghcr.io/veteran-chad/storm-controller:${VERSION}-storm2.6.4\`
          - \`ghcr.io/veteran-chad/storm-controller:${VERSION}-storm2.8.1\`
          
          JAR container images:
          - \`ghcr.io/veteran-chad/storm-controller-jar:${VERSION}-storm2.6.4\`
          - \`ghcr.io/veteran-chad/storm-controller-jar:${VERSION}-storm2.8.1\`
          
          ### Helm Chart
          
          \`\`\`bash
          helm install storm-kubernetes oci://ghcr.io/veteran-chad/charts/storm-kubernetes --version ${VERSION#v}
          \`\`\`
          
          ### What's Changed
          
          EOF
          
          if [ -n "$PREV_TAG" ]; then
            git log --pretty=format:"- %s (%an)" ${PREV_TAG}..HEAD >> release-notes.md
          else
            git log --pretty=format:"- %s (%an)" HEAD >> release-notes.md
          fi
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(github.ref, '-rc.') || contains(github.ref, '-beta.') }}
          generate_release_notes: true  # Also include GitHub's auto-generated notes