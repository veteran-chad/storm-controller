name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.23'

jobs:
  build-binaries:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binary
        working-directory: src
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          LDFLAGS="-s -w -X main.version=$VERSION"
          go build -ldflags="$LDFLAGS" -o storm-controller-${{ matrix.os }}-${{ matrix.arch }} ./main.go
          if [ "${{ matrix.os }}" = "windows" ]; then
            mv storm-controller-${{ matrix.os }}-${{ matrix.arch }} storm-controller-${{ matrix.os }}-${{ matrix.arch }}.exe
          fi

      - name: Create tarball
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          if [ "${{ matrix.os }}" = "windows" ]; then
            tar czf storm-controller-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz storm-controller-${{ matrix.os }}-${{ matrix.arch }}.exe
          else
            tar czf storm-controller-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz storm-controller-${{ matrix.os }}-${{ matrix.arch }}
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: storm-controller-${{ matrix.os }}-${{ matrix.arch }}
          path: storm-controller-*.tar.gz

  build-container-images:
    name: Build Multi-Platform Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        storm-version: ["2.6.4", "2.7.0", "2.8.1"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "storm_tag=$VERSION-storm${{ matrix.storm-version }}" >> $GITHUB_OUTPUT

      - name: Build and push controller image
        uses: docker/build-push-action@v5
        with:
          context: src
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            STORM_VERSION=${{ matrix.storm-version }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.storm_tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:storm${{ matrix.storm-version }}
            docker.io/${{ github.repository }}:${{ steps.version.outputs.storm_tag }}
            docker.io/${{ github.repository }}:storm${{ matrix.storm-version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-default-image:
    name: Build Default Image
    runs-on: ubuntu-latest
    needs: [build-container-images]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push controller image (default)
        uses: docker/build-push-action@v5
        with:
          context: src
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            docker.io/${{ github.repository }}:${{ steps.version.outputs.version }}
            docker.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release-helm-charts:
    name: Release Helm Charts
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Add Helm repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Update chart versions
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          APP_VERSION=${GITHUB_REF#refs/tags/}
          
          for chart in storm-operator storm-crd-cluster storm-kubernetes storm-shared; do
            sed -i "s/version: .*/version: ${VERSION}/" charts/$chart/Chart.yaml
            sed -i "s/appVersion: .*/appVersion: ${APP_VERSION}/" charts/$chart/Chart.yaml
          done

      - name: Build dependencies
        run: |
          helm dependency build charts/storm-operator
          helm dependency build charts/storm-kubernetes

      - name: Package charts
        run: |
          mkdir -p .release
          for chart in storm-operator storm-crd-cluster storm-kubernetes storm-shared; do
            helm package charts/$chart --destination .release
          done

      - name: Create chart index
        run: |
          helm repo index .release --url https://github.com/${{ github.repository }}/releases/download/${GITHUB_REF#refs/tags/}

      - name: Upload chart artifacts
        uses: actions/upload-artifact@v4
        with:
          name: helm-charts
          path: |
            .release/*.tgz
            .release/index.yaml

      - name: Log in to Container Registry
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin

      - name: Push to OCI registry
        run: |
          for chart in .release/*.tgz; do
            helm push $chart oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts
          done

  build-mcp-server:
    name: Build Storm MCP Server
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push MCP server image
        uses: docker/build-push-action@v5
        with:
          context: src/storm-mcp-server
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/storm-mcp-server:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/storm-mcp-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-binaries, build-default-image, release-helm-charts, build-mcp-server]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate release notes
        id: notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          cat > release-notes.md << 'EOF'
          ## Storm Controller ${VERSION}
          
          ### Installation
          
          #### Using Helm (Recommended)
          
          ```bash
          # Add the Helm repository
          helm repo add storm-controller https://github.com/${{ github.repository }}/releases/download/${VERSION}
          helm repo update
          
          # Install the Storm Operator
          helm install storm-operator storm-controller/storm-operator \
            --namespace storm-operator --create-namespace
          
          # Deploy a Storm cluster using CRDs
          helm install my-cluster storm-controller/storm-crd-cluster \
            --namespace storm-prod --create-namespace
          ```
          
          #### Using OCI Registry
          
          ```bash
          # Install Storm Operator
          helm install storm-operator oci://ghcr.io/${{ github.repository_owner }}/charts/storm-operator \
            --version ${VERSION#v} \
            --namespace storm-operator --create-namespace
          ```
          
          ### Container Images
          
          Controller images with multiple Storm versions:
          - `ghcr.io/${{ github.repository }}:${VERSION}` (Storm 2.8.1 - default)
          - `ghcr.io/${{ github.repository }}:${VERSION}-storm2.6.4`
          - `ghcr.io/${{ github.repository }}:${VERSION}-storm2.7.0`
          - `ghcr.io/${{ github.repository }}:${VERSION}-storm2.8.1`
          
          Also available on Docker Hub:
          - `docker.io/${{ github.repository }}:${VERSION}`
          - `docker.io/${{ github.repository }}:storm2.6.4`
          - `docker.io/${{ github.repository }}:storm2.7.0`
          - `docker.io/${{ github.repository }}:storm2.8.1`
          
          ### Helm Charts
          
          | Chart | Version | Description |
          |-------|---------|-------------|
          | storm-operator | ${VERSION#v} | Storm Operator with optional Zookeeper |
          | storm-crd-cluster | ${VERSION#v} | Deploy Storm cluster via CRD |
          | storm-kubernetes | ${VERSION#v} | Traditional Helm deployment |
          | storm-shared | ${VERSION#v} | Shared templates and helpers |
          
          ### Binaries
          
          Standalone controller binaries for various platforms:
          - Linux (amd64, arm64)
          - macOS (amd64, arm64)
          - Windows (amd64)
          
          ### Storm MCP Server
          
          MCP (Model Context Protocol) server for Storm expertise:
          - `ghcr.io/${{ github.repository_owner }}/storm-mcp-server:${VERSION}`
          
          ### What's Changed
          
          EOF
          
          if [ -n "$PREV_TAG" ]; then
            echo "#### Commits since $PREV_TAG" >> release-notes.md
            echo "" >> release-notes.md
            git log --pretty=format:"- %s (%an)" ${PREV_TAG}..HEAD >> release-notes.md
          else
            echo "#### All Commits" >> release-notes.md
            echo "" >> release-notes.md
            git log --pretty=format:"- %s (%an)" --max-count=20 >> release-notes.md
          fi
          
          cat >> release-notes.md << 'EOF'
          
          ### Upgrading
          
          #### From v0.x to ${VERSION}
          
          1. Update CRDs:
             ```bash
             kubectl apply -f https://github.com/${{ github.repository }}/releases/download/${VERSION}/storm-crds.yaml
             ```
          
          2. Upgrade the operator:
             ```bash
             helm upgrade storm-operator storm-controller/storm-operator \
               --namespace storm-operator \
               --version ${VERSION#v}
             ```
          
          ### Documentation
          
          - [Getting Started](https://github.com/${{ github.repository }}/blob/${VERSION}/README.md)
          - [Helm Chart Documentation](https://github.com/${{ github.repository }}/tree/${VERSION}/charts)
          - [Monitoring Guide](https://github.com/${{ github.repository }}/blob/${VERSION}/monitoring/README.md)
          - [Examples](https://github.com/${{ github.repository }}/tree/${VERSION}/examples)
          
          EOF

      - name: Create CRD manifest
        working-directory: src
        run: |
          make manifests
          cp config/crd/bases/*.yaml ../artifacts/
          cd ../artifacts
          cat storm.apache.org_*.yaml > storm-crds.yaml

      - name: Prepare release assets
        run: |
          cd artifacts
          mv helm-charts/*.tgz .
          mv helm-charts/index.yaml .
          for dir in storm-controller-*; do
            if [ -d "$dir" ]; then
              mv $dir/*.tar.gz .
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(github.ref, '-rc.') || contains(github.ref, '-beta.') || contains(github.ref, '-alpha.') }}
          generate_release_notes: true
          files: |
            artifacts/*.tar.gz
            artifacts/*.tgz
            artifacts/index.yaml
            artifacts/storm-crds.yaml